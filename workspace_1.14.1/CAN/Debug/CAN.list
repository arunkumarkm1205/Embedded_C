
CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024a4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800262c  0800262c  0000362c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800265c  0800265c  00004014  2**0
                  CONTENTS
  4 .ARM          00000000  0800265c  0800265c  00004014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800265c  0800265c  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800265c  0800265c  0000365c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002660  08002660  00003660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002664  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004014  2**0
                  CONTENTS
 10 .bss          0000008c  20000014  20000014  00004014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  00004014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000542f  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011d6  00000000  00000000  00009473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000530  00000000  00000000  0000a650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003c4  00000000  00000000  0000ab80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e145  00000000  00000000  0000af44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000065d8  00000000  00000000  00029089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b3413  00000000  00000000  0002f661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e2a74  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001380  00000000  00000000  000e2ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  000e3e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002614 	.word	0x08002614

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002614 	.word	0x08002614

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9d4 	bl	8000578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f812 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f882 	bl	80002dc <MX_GPIO_Init>
  MX_CAN_Init();
 80001d8:	f000 f84a 	bl	8000270 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_WakeUp(&hcan);
 80001dc:	4805      	ldr	r0, [pc, #20]	@ (80001f4 <main+0x2c>)
 80001de:	f000 fc3b 	bl	8000a58 <HAL_CAN_WakeUp>
  filter_config();
 80001e2:	f000 f8cd 	bl	8000380 <filter_config>
  HAL_CAN_Start( &hcan);
 80001e6:	4803      	ldr	r0, [pc, #12]	@ (80001f4 <main+0x2c>)
 80001e8:	f000 fbf1 	bl	80009ce <HAL_CAN_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CAN_TX();
 80001ec:	f000 f89a 	bl	8000324 <CAN_TX>
 80001f0:	e7fc      	b.n	80001ec <main+0x24>
 80001f2:	bf00      	nop
 80001f4:	20000030 	.word	0x20000030

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b090      	sub	sp, #64	@ 0x40
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0318 	add.w	r3, r7, #24
 8000202:	2228      	movs	r2, #40	@ 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f002 f9d8 	bl	80025bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	609a      	str	r2, [r3, #8]
 8000216:	60da      	str	r2, [r3, #12]
 8000218:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021e:	2301      	movs	r3, #1
 8000220:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000222:	2310      	movs	r3, #16
 8000224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000226:	2300      	movs	r3, #0
 8000228:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022a:	f107 0318 	add.w	r3, r7, #24
 800022e:	4618      	mov	r0, r3
 8000230:	f000 ffa0 	bl	8001174 <HAL_RCC_OscConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800023a:	f000 f8c3 	bl	80003c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800023e:	230f      	movs	r3, #15
 8000240:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	2100      	movs	r1, #0
 8000256:	4618      	mov	r0, r3
 8000258:	f001 ffca 	bl	80021f0 <HAL_RCC_ClockConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000262:	f000 f8af 	bl	80003c4 <Error_Handler>
  }
}
 8000266:	bf00      	nop
 8000268:	3740      	adds	r7, #64	@ 0x40
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
	...

08000270 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000274:	4b17      	ldr	r3, [pc, #92]	@ (80002d4 <MX_CAN_Init+0x64>)
 8000276:	4a18      	ldr	r2, [pc, #96]	@ (80002d8 <MX_CAN_Init+0x68>)
 8000278:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800027a:	4b16      	ldr	r3, [pc, #88]	@ (80002d4 <MX_CAN_Init+0x64>)
 800027c:	2210      	movs	r2, #16
 800027e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000280:	4b14      	ldr	r3, [pc, #80]	@ (80002d4 <MX_CAN_Init+0x64>)
 8000282:	2200      	movs	r2, #0
 8000284:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000286:	4b13      	ldr	r3, [pc, #76]	@ (80002d4 <MX_CAN_Init+0x64>)
 8000288:	2200      	movs	r2, #0
 800028a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 800028c:	4b11      	ldr	r3, [pc, #68]	@ (80002d4 <MX_CAN_Init+0x64>)
 800028e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000292:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000294:	4b0f      	ldr	r3, [pc, #60]	@ (80002d4 <MX_CAN_Init+0x64>)
 8000296:	2200      	movs	r2, #0
 8000298:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800029a:	4b0e      	ldr	r3, [pc, #56]	@ (80002d4 <MX_CAN_Init+0x64>)
 800029c:	2200      	movs	r2, #0
 800029e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	@ (80002d4 <MX_CAN_Init+0x64>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80002a6:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <MX_CAN_Init+0x64>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80002ac:	4b09      	ldr	r3, [pc, #36]	@ (80002d4 <MX_CAN_Init+0x64>)
 80002ae:	2201      	movs	r2, #1
 80002b0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80002b2:	4b08      	ldr	r3, [pc, #32]	@ (80002d4 <MX_CAN_Init+0x64>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80002b8:	4b06      	ldr	r3, [pc, #24]	@ (80002d4 <MX_CAN_Init+0x64>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80002be:	4805      	ldr	r0, [pc, #20]	@ (80002d4 <MX_CAN_Init+0x64>)
 80002c0:	f000 f9c0 	bl	8000644 <HAL_CAN_Init>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80002ca:	f000 f87b 	bl	80003c4 <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */
  // hcan.Instance->MCR  &= ~ ( CAN_MCR_SLEEP);

  /* USER CODE END CAN_Init 2 */

}
 80002ce:	bf00      	nop
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	20000030 	.word	0x20000030
 80002d8:	40006400 	.word	0x40006400

080002dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <MX_GPIO_Init+0x44>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000320 <MX_GPIO_Init+0x44>)
 80002e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002ec:	6153      	str	r3, [r2, #20]
 80002ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <MX_GPIO_Init+0x44>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80002f6:	607b      	str	r3, [r7, #4]
 80002f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fa:	4b09      	ldr	r3, [pc, #36]	@ (8000320 <MX_GPIO_Init+0x44>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a08      	ldr	r2, [pc, #32]	@ (8000320 <MX_GPIO_Init+0x44>)
 8000300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <MX_GPIO_Init+0x44>)
 8000308:	695b      	ldr	r3, [r3, #20]
 800030a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800030e:	603b      	str	r3, [r7, #0]
 8000310:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40021000 	.word	0x40021000

08000324 <CAN_TX>:

/* USER CODE BEGIN 4 */

void  CAN_TX()
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	TX_Header.DLC= 4;
 8000328:	4b11      	ldr	r3, [pc, #68]	@ (8000370 <CAN_TX+0x4c>)
 800032a:	2204      	movs	r2, #4
 800032c:	611a      	str	r2, [r3, #16]
	TX_Header.StdId=0x041;
 800032e:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <CAN_TX+0x4c>)
 8000330:	2241      	movs	r2, #65	@ 0x41
 8000332:	601a      	str	r2, [r3, #0]
	TX_Header.IDE=CAN_ID_STD;
 8000334:	4b0e      	ldr	r3, [pc, #56]	@ (8000370 <CAN_TX+0x4c>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
	TX_Header.RTR=CAN_RTR_DATA;
 800033a:	4b0d      	ldr	r3, [pc, #52]	@ (8000370 <CAN_TX+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	60da      	str	r2, [r3, #12]
	if( HAL_CAN_AddTxMessage(&hcan, &TX_Header, tdata, &TxMailbox )!= HAL_OK)
 8000340:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <CAN_TX+0x50>)
 8000342:	4a0d      	ldr	r2, [pc, #52]	@ (8000378 <CAN_TX+0x54>)
 8000344:	490a      	ldr	r1, [pc, #40]	@ (8000370 <CAN_TX+0x4c>)
 8000346:	480d      	ldr	r0, [pc, #52]	@ (800037c <CAN_TX+0x58>)
 8000348:	f000 fbc8 	bl	8000adc <HAL_CAN_AddTxMessage>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <CAN_TX+0x32>
	{
		Error_Handler();
 8000352:	f000 f837 	bl	80003c4 <Error_Handler>
	}
		while(HAL_CAN_IsTxMessagePending(&hcan,TxMailbox)) ;
 8000356:	bf00      	nop
 8000358:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <CAN_TX+0x50>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4619      	mov	r1, r3
 800035e:	4807      	ldr	r0, [pc, #28]	@ (800037c <CAN_TX+0x58>)
 8000360:	f000 fc8c 	bl	8000c7c <HAL_CAN_IsTxMessagePending>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1f6      	bne.n	8000358 <CAN_TX+0x34>
	//CAN_RX();
}
 800036a:	bf00      	nop
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	20000058 	.word	0x20000058
 8000374:	20000098 	.word	0x20000098
 8000378:	20000000 	.word	0x20000000
 800037c:	20000030 	.word	0x20000030

08000380 <filter_config>:

void filter_config()
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	FI_Header.FilterActivation=CAN_FILTER_ENABLE;
 8000384:	4b0d      	ldr	r3, [pc, #52]	@ (80003bc <filter_config+0x3c>)
 8000386:	2201      	movs	r2, #1
 8000388:	621a      	str	r2, [r3, #32]
	FI_Header.FilterBank= 0;
 800038a:	4b0c      	ldr	r3, [pc, #48]	@ (80003bc <filter_config+0x3c>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
	FI_Header.FilterFIFOAssignment=CAN_FILTER_FIFO0;
 8000390:	4b0a      	ldr	r3, [pc, #40]	@ (80003bc <filter_config+0x3c>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
	FI_Header.FilterIdHigh= 0x041 << 5;
 8000396:	4b09      	ldr	r3, [pc, #36]	@ (80003bc <filter_config+0x3c>)
 8000398:	f44f 6202 	mov.w	r2, #2080	@ 0x820
 800039c:	601a      	str	r2, [r3, #0]
	FI_Header.FilterIdLow=0x0000;
 800039e:	4b07      	ldr	r3, [pc, #28]	@ (80003bc <filter_config+0x3c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	605a      	str	r2, [r3, #4]

	/*FI_Header.FilterMaskIdHigh=0;
	FI_Header.FilterMaskIdLow=0x0000;*/
	FI_Header.FilterMode=CAN_FILTERMODE_IDLIST;
 80003a4:	4b05      	ldr	r3, [pc, #20]	@ (80003bc <filter_config+0x3c>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	619a      	str	r2, [r3, #24]
	FI_Header.FilterScale= CAN_FILTERSCALE_32BIT;
 80003aa:	4b04      	ldr	r3, [pc, #16]	@ (80003bc <filter_config+0x3c>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	61da      	str	r2, [r3, #28]


	HAL_CAN_ConfigFilter(&hcan, &FI_Header);
 80003b0:	4902      	ldr	r1, [pc, #8]	@ (80003bc <filter_config+0x3c>)
 80003b2:	4803      	ldr	r0, [pc, #12]	@ (80003c0 <filter_config+0x40>)
 80003b4:	f000 fa41 	bl	800083a <HAL_CAN_ConfigFilter>
}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000070 	.word	0x20000070
 80003c0:	20000030 	.word	0x20000030

080003c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c8:	b672      	cpsid	i
}
 80003ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <Error_Handler+0x8>

080003d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000414 <HAL_MspInit+0x44>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	4a0e      	ldr	r2, [pc, #56]	@ (8000414 <HAL_MspInit+0x44>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	6193      	str	r3, [r2, #24]
 80003e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <HAL_MspInit+0x44>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	f003 0301 	and.w	r3, r3, #1
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ee:	4b09      	ldr	r3, [pc, #36]	@ (8000414 <HAL_MspInit+0x44>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	4a08      	ldr	r2, [pc, #32]	@ (8000414 <HAL_MspInit+0x44>)
 80003f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003f8:	61d3      	str	r3, [r2, #28]
 80003fa:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <HAL_MspInit+0x44>)
 80003fc:	69db      	ldr	r3, [r3, #28]
 80003fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000402:	603b      	str	r3, [r7, #0]
 8000404:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000406:	2007      	movs	r0, #7
 8000408:	f000 fd0e 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021000 	.word	0x40021000

08000418 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08a      	sub	sp, #40	@ 0x28
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000420:	f107 0314 	add.w	r3, r7, #20
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
 8000428:	605a      	str	r2, [r3, #4]
 800042a:	609a      	str	r2, [r3, #8]
 800042c:	60da      	str	r2, [r3, #12]
 800042e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a18      	ldr	r2, [pc, #96]	@ (8000498 <HAL_CAN_MspInit+0x80>)
 8000436:	4293      	cmp	r3, r2
 8000438:	d129      	bne.n	800048e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800043a:	4b18      	ldr	r3, [pc, #96]	@ (800049c <HAL_CAN_MspInit+0x84>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	4a17      	ldr	r2, [pc, #92]	@ (800049c <HAL_CAN_MspInit+0x84>)
 8000440:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000444:	61d3      	str	r3, [r2, #28]
 8000446:	4b15      	ldr	r3, [pc, #84]	@ (800049c <HAL_CAN_MspInit+0x84>)
 8000448:	69db      	ldr	r3, [r3, #28]
 800044a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800044e:	613b      	str	r3, [r7, #16]
 8000450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b12      	ldr	r3, [pc, #72]	@ (800049c <HAL_CAN_MspInit+0x84>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a11      	ldr	r2, [pc, #68]	@ (800049c <HAL_CAN_MspInit+0x84>)
 8000458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800045c:	6153      	str	r3, [r2, #20]
 800045e:	4b0f      	ldr	r3, [pc, #60]	@ (800049c <HAL_CAN_MspInit+0x84>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800046a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800046e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000470:	2302      	movs	r3, #2
 8000472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	2300      	movs	r3, #0
 8000476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000478:	2303      	movs	r3, #3
 800047a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 800047c:	2309      	movs	r3, #9
 800047e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000480:	f107 0314 	add.w	r3, r7, #20
 8000484:	4619      	mov	r1, r3
 8000486:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800048a:	f000 fd01 	bl	8000e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 800048e:	bf00      	nop
 8000490:	3728      	adds	r7, #40	@ 0x28
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40006400 	.word	0x40006400
 800049c:	40021000 	.word	0x40021000

080004a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <NMI_Handler+0x4>

080004a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <HardFault_Handler+0x4>

080004b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <MemManage_Handler+0x4>

080004b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <BusFault_Handler+0x4>

080004c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <UsageFault_Handler+0x4>

080004c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr

080004d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr

080004f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f6:	f000 f885 	bl	8000604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000504:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <SystemInit+0x20>)
 8000506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800050a:	4a05      	ldr	r2, [pc, #20]	@ (8000520 <SystemInit+0x20>)
 800050c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000510:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	e000ed00 	.word	0xe000ed00

08000524 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000524:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800055c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000528:	f7ff ffea 	bl	8000500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800052c:	480c      	ldr	r0, [pc, #48]	@ (8000560 <LoopForever+0x6>)
  ldr r1, =_edata
 800052e:	490d      	ldr	r1, [pc, #52]	@ (8000564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000530:	4a0d      	ldr	r2, [pc, #52]	@ (8000568 <LoopForever+0xe>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000534:	e002      	b.n	800053c <LoopCopyDataInit>

08000536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053a:	3304      	adds	r3, #4

0800053c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800053c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000540:	d3f9      	bcc.n	8000536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000542:	4a0a      	ldr	r2, [pc, #40]	@ (800056c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000544:	4c0a      	ldr	r4, [pc, #40]	@ (8000570 <LoopForever+0x16>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000548:	e001      	b.n	800054e <LoopFillZerobss>

0800054a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800054c:	3204      	adds	r2, #4

0800054e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000550:	d3fb      	bcc.n	800054a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000552:	f002 f83b 	bl	80025cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000556:	f7ff fe37 	bl	80001c8 <main>

0800055a <LoopForever>:

LoopForever:
    b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800055c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000568:	08002664 	.word	0x08002664
  ldr r2, =_sbss
 800056c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000570:	200000a0 	.word	0x200000a0

08000574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC1_2_IRQHandler>
	...

08000578 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800057c:	4b08      	ldr	r3, [pc, #32]	@ (80005a0 <HAL_Init+0x28>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a07      	ldr	r2, [pc, #28]	@ (80005a0 <HAL_Init+0x28>)
 8000582:	f043 0310 	orr.w	r3, r3, #16
 8000586:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000588:	2003      	movs	r0, #3
 800058a:	f000 fc4d 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800058e:	2000      	movs	r0, #0
 8000590:	f000 f808 	bl	80005a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000594:	f7ff ff1c 	bl	80003d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000598:	2300      	movs	r3, #0
}
 800059a:	4618      	mov	r0, r3
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40022000 	.word	0x40022000

080005a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ac:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <HAL_InitTick+0x54>)
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <HAL_InitTick+0x58>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4619      	mov	r1, r3
 80005b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80005be:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fc57 	bl	8000e76 <HAL_SYSTICK_Config>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ce:	2301      	movs	r3, #1
 80005d0:	e00e      	b.n	80005f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b0f      	cmp	r3, #15
 80005d6:	d80a      	bhi.n	80005ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d8:	2200      	movs	r2, #0
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	f04f 30ff 	mov.w	r0, #4294967295
 80005e0:	f000 fc2d 	bl	8000e3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e4:	4a06      	ldr	r2, [pc, #24]	@ (8000600 <HAL_InitTick+0x5c>)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005ea:	2300      	movs	r3, #0
 80005ec:	e000      	b.n	80005f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000008 	.word	0x20000008
 80005fc:	20000010 	.word	0x20000010
 8000600:	2000000c 	.word	0x2000000c

08000604 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <HAL_IncTick+0x20>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b06      	ldr	r3, [pc, #24]	@ (8000628 <HAL_IncTick+0x24>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	4a04      	ldr	r2, [pc, #16]	@ (8000628 <HAL_IncTick+0x24>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000010 	.word	0x20000010
 8000628:	2000009c 	.word	0x2000009c

0800062c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000630:	4b03      	ldr	r3, [pc, #12]	@ (8000640 <HAL_GetTick+0x14>)
 8000632:	681b      	ldr	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	2000009c 	.word	0x2000009c

08000644 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000652:	2301      	movs	r3, #1
 8000654:	e0ed      	b.n	8000832 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	2b00      	cmp	r3, #0
 8000660:	d102      	bne.n	8000668 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f7ff fed8 	bl	8000418 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f042 0201 	orr.w	r2, r2, #1
 8000676:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000678:	f7ff ffd8 	bl	800062c <HAL_GetTick>
 800067c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800067e:	e012      	b.n	80006a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000680:	f7ff ffd4 	bl	800062c <HAL_GetTick>
 8000684:	4602      	mov	r2, r0
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	2b0a      	cmp	r3, #10
 800068c:	d90b      	bls.n	80006a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000692:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2205      	movs	r2, #5
 800069e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	e0c5      	b.n	8000832 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	685b      	ldr	r3, [r3, #4]
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d0e5      	beq.n	8000680 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f022 0202 	bic.w	r2, r2, #2
 80006c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006c4:	f7ff ffb2 	bl	800062c <HAL_GetTick>
 80006c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006ca:	e012      	b.n	80006f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006cc:	f7ff ffae 	bl	800062c <HAL_GetTick>
 80006d0:	4602      	mov	r2, r0
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	2b0a      	cmp	r3, #10
 80006d8:	d90b      	bls.n	80006f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2205      	movs	r2, #5
 80006ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e09f      	b.n	8000832 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	f003 0302 	and.w	r3, r3, #2
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1e5      	bne.n	80006cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7e1b      	ldrb	r3, [r3, #24]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d108      	bne.n	800071a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	e007      	b.n	800072a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000728:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	7e5b      	ldrb	r3, [r3, #25]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d108      	bne.n	8000744 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	e007      	b.n	8000754 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000752:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7e9b      	ldrb	r3, [r3, #26]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d108      	bne.n	800076e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f042 0220 	orr.w	r2, r2, #32
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	e007      	b.n	800077e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f022 0220 	bic.w	r2, r2, #32
 800077c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	7edb      	ldrb	r3, [r3, #27]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d108      	bne.n	8000798 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f022 0210 	bic.w	r2, r2, #16
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	e007      	b.n	80007a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f042 0210 	orr.w	r2, r2, #16
 80007a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	7f1b      	ldrb	r3, [r3, #28]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d108      	bne.n	80007c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f042 0208 	orr.w	r2, r2, #8
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	e007      	b.n	80007d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f022 0208 	bic.w	r2, r2, #8
 80007d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7f5b      	ldrb	r3, [r3, #29]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d108      	bne.n	80007ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f042 0204 	orr.w	r2, r2, #4
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	e007      	b.n	80007fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f022 0204 	bic.w	r2, r2, #4
 80007fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689a      	ldr	r2, [r3, #8]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	431a      	orrs	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	691b      	ldr	r3, [r3, #16]
 800080a:	431a      	orrs	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	ea42 0103 	orr.w	r1, r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	430a      	orrs	r2, r1
 8000820:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2201      	movs	r2, #1
 800082c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800083a:	b480      	push	{r7}
 800083c:	b087      	sub	sp, #28
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000850:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d003      	beq.n	8000860 <HAL_CAN_ConfigFilter+0x26>
 8000858:	7cfb      	ldrb	r3, [r7, #19]
 800085a:	2b02      	cmp	r3, #2
 800085c:	f040 80aa 	bne.w	80009b4 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000866:	f043 0201 	orr.w	r2, r3, #1
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	695b      	ldr	r3, [r3, #20]
 8000874:	f003 031f 	and.w	r3, r3, #31
 8000878:	2201      	movs	r2, #1
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	43db      	mvns	r3, r3
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d123      	bne.n	80008e2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	43db      	mvns	r3, r3
 80008a4:	401a      	ands	r2, r3
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3248      	adds	r2, #72	@ 0x48
 80008c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008d8:	6979      	ldr	r1, [r7, #20]
 80008da:	3348      	adds	r3, #72	@ 0x48
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	440b      	add	r3, r1
 80008e0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d122      	bne.n	8000930 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	431a      	orrs	r2, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000906:	683a      	ldr	r2, [r7, #0]
 8000908:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800090a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	3248      	adds	r2, #72	@ 0x48
 8000910:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000924:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000926:	6979      	ldr	r1, [r7, #20]
 8000928:	3348      	adds	r3, #72	@ 0x48
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	440b      	add	r3, r1
 800092e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d109      	bne.n	800094c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	43db      	mvns	r3, r3
 8000942:	401a      	ands	r2, r3
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800094a:	e007      	b.n	800095c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	431a      	orrs	r2, r3
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d109      	bne.n	8000978 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	43db      	mvns	r3, r3
 800096e:	401a      	ands	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000976:	e007      	b.n	8000988 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	431a      	orrs	r2, r3
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	6a1b      	ldr	r3, [r3, #32]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d107      	bne.n	80009a0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	431a      	orrs	r2, r3
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80009a6:	f023 0201 	bic.w	r2, r3, #1
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	e006      	b.n	80009c2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009b8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
  }
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	371c      	adds	r7, #28
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b084      	sub	sp, #16
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d12e      	bne.n	8000a40 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2202      	movs	r2, #2
 80009e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f022 0201 	bic.w	r2, r2, #1
 80009f8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80009fa:	f7ff fe17 	bl	800062c <HAL_GetTick>
 80009fe:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a00:	e012      	b.n	8000a28 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a02:	f7ff fe13 	bl	800062c <HAL_GetTick>
 8000a06:	4602      	mov	r2, r0
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	2b0a      	cmp	r3, #10
 8000a0e:	d90b      	bls.n	8000a28 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a14:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2205      	movs	r2, #5
 8000a20:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e012      	b.n	8000a4e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1e5      	bne.n	8000a02 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e006      	b.n	8000a4e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a44:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000a4c:	2301      	movs	r3, #1
  }
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <HAL_CAN_WakeUp>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_CAN_WakeUp(CAN_HandleTypeDef *hcan)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b087      	sub	sp, #28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = 1000000U;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <HAL_CAN_WakeUp+0x80>)
 8000a66:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a6e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a70:	7cfb      	ldrb	r3, [r7, #19]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d002      	beq.n	8000a7c <HAL_CAN_WakeUp+0x24>
 8000a76:	7cfb      	ldrb	r3, [r7, #19]
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d11f      	bne.n	8000abc <HAL_CAN_WakeUp+0x64>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Wake up request */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f022 0202 	bic.w	r2, r2, #2
 8000a8a:	601a      	str	r2, [r3, #0]

    /* Wait sleep mode is exited */
    do
    {
      /* Increment counter */
      count++;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	60fb      	str	r3, [r7, #12]

      /* Check if timeout is reached */
      if (count > timeout)
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d207      	bcs.n	8000aaa <HAL_CAN_WakeUp+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00f      	b.n	8000aca <HAL_CAN_WakeUp+0x72>
      }
    }
    while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f003 0302 	and.w	r3, r3, #2
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1e9      	bne.n	8000a8c <HAL_CAN_WakeUp+0x34>

    /* Return function status */
    return HAL_OK;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e006      	b.n	8000aca <HAL_CAN_WakeUp+0x72>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ac0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
  }
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	371c      	adds	r7, #28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	000f4240 	.word	0x000f4240

08000adc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b089      	sub	sp, #36	@ 0x24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
 8000ae8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000af0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000afa:	7ffb      	ldrb	r3, [r7, #31]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d003      	beq.n	8000b08 <HAL_CAN_AddTxMessage+0x2c>
 8000b00:	7ffb      	ldrb	r3, [r7, #31]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	f040 80ad 	bne.w	8000c62 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d10a      	bne.n	8000b28 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d105      	bne.n	8000b28 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 8095 	beq.w	8000c52 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	0e1b      	lsrs	r3, r3, #24
 8000b2c:	f003 0303 	and.w	r3, r3, #3
 8000b30:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000b32:	2201      	movs	r2, #1
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	409a      	lsls	r2, r3
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d10d      	bne.n	8000b60 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000b4a:	68bb      	ldr	r3, [r7, #8]
 8000b4c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000b4e:	68f9      	ldr	r1, [r7, #12]
 8000b50:	6809      	ldr	r1, [r1, #0]
 8000b52:	431a      	orrs	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	3318      	adds	r3, #24
 8000b58:	011b      	lsls	r3, r3, #4
 8000b5a:	440b      	add	r3, r1
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	e00f      	b.n	8000b80 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b6a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b70:	68f9      	ldr	r1, [r7, #12]
 8000b72:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000b74:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3318      	adds	r3, #24
 8000b7a:	011b      	lsls	r3, r3, #4
 8000b7c:	440b      	add	r3, r1
 8000b7e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6819      	ldr	r1, [r3, #0]
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	691a      	ldr	r2, [r3, #16]
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	3318      	adds	r3, #24
 8000b8c:	011b      	lsls	r3, r3, #4
 8000b8e:	440b      	add	r3, r1
 8000b90:	3304      	adds	r3, #4
 8000b92:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	7d1b      	ldrb	r3, [r3, #20]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d111      	bne.n	8000bc0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	3318      	adds	r3, #24
 8000ba4:	011b      	lsls	r3, r3, #4
 8000ba6:	4413      	add	r3, r2
 8000ba8:	3304      	adds	r3, #4
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	6811      	ldr	r1, [r2, #0]
 8000bb0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	3318      	adds	r3, #24
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	440b      	add	r3, r1
 8000bbc:	3304      	adds	r3, #4
 8000bbe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3307      	adds	r3, #7
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	061a      	lsls	r2, r3, #24
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3306      	adds	r3, #6
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	041b      	lsls	r3, r3, #16
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3305      	adds	r3, #5
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	687a      	ldr	r2, [r7, #4]
 8000bde:	3204      	adds	r2, #4
 8000be0:	7812      	ldrb	r2, [r2, #0]
 8000be2:	4610      	mov	r0, r2
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	6811      	ldr	r1, [r2, #0]
 8000be8:	ea43 0200 	orr.w	r2, r3, r0
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	440b      	add	r3, r1
 8000bf2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000bf6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3303      	adds	r3, #3
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	061a      	lsls	r2, r3, #24
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3302      	adds	r3, #2
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	041b      	lsls	r3, r3, #16
 8000c08:	431a      	orrs	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	021b      	lsls	r3, r3, #8
 8000c12:	4313      	orrs	r3, r2
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	7812      	ldrb	r2, [r2, #0]
 8000c18:	4610      	mov	r0, r2
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	6811      	ldr	r1, [r2, #0]
 8000c1e:	ea43 0200 	orr.w	r2, r3, r0
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	011b      	lsls	r3, r3, #4
 8000c26:	440b      	add	r3, r1
 8000c28:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000c2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	3318      	adds	r3, #24
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	4413      	add	r3, r2
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	6811      	ldr	r1, [r2, #0]
 8000c40:	f043 0201 	orr.w	r2, r3, #1
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3318      	adds	r3, #24
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	440b      	add	r3, r1
 8000c4c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e00e      	b.n	8000c70 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c56:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e006      	b.n	8000c70 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c66:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
  }
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3724      	adds	r7, #36	@ 0x24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c90:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c92:	7afb      	ldrb	r3, [r7, #11]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d002      	beq.n	8000c9e <HAL_CAN_IsTxMessagePending+0x22>
 8000c98:	7afb      	ldrb	r3, [r7, #11]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d10b      	bne.n	8000cb6 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	069b      	lsls	r3, r3, #26
 8000ca8:	401a      	ands	r2, r3
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	069b      	lsls	r3, r3, #26
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d001      	beq.n	8000cb6 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cda:	68ba      	ldr	r2, [r7, #8]
 8000cdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf6:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	60d3      	str	r3, [r2, #12]
}
 8000cfc:	bf00      	nop
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d06:	4770      	bx	lr
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d10:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <__NVIC_GetPriorityGrouping+0x18>)
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	f003 0307 	and.w	r3, r3, #7
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	@ (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	@ (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	@ 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	@ 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000df4:	d301      	bcc.n	8000dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00f      	b.n	8000e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <SysTick_Config+0x40>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e02:	210f      	movs	r1, #15
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f7ff ff8e 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <SysTick_Config+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <SysTick_Config+0x40>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff47 	bl	8000cc4 <__NVIC_SetPriorityGrouping>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff5c 	bl	8000d0c <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff8e 	bl	8000d7c <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5d 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f7ff ffb0 	bl	8000de4 <SysTick_Config>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b087      	sub	sp, #28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e9e:	e14e      	b.n	800113e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eac:	4013      	ands	r3, r2
 8000eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f000 8140 	beq.w	8001138 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d005      	beq.n	8000ed0 <HAL_GPIO_Init+0x40>
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d130      	bne.n	8000f32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f06:	2201      	movs	r2, #1
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	091b      	lsrs	r3, r3, #4
 8000f1c:	f003 0201 	and.w	r2, r3, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d017      	beq.n	8000f6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	689a      	ldr	r2, [r3, #8]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	f003 0303 	and.w	r3, r3, #3
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d123      	bne.n	8000fc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	691a      	ldr	r2, [r3, #16]
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	f003 0307 	and.w	r3, r3, #7
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	08da      	lsrs	r2, r3, #3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3208      	adds	r2, #8
 8000fbc:	6939      	ldr	r1, [r7, #16]
 8000fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	2203      	movs	r2, #3
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0203 	and.w	r2, r3, #3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 809a 	beq.w	8001138 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001004:	4b55      	ldr	r3, [pc, #340]	@ (800115c <HAL_GPIO_Init+0x2cc>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a54      	ldr	r2, [pc, #336]	@ (800115c <HAL_GPIO_Init+0x2cc>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b52      	ldr	r3, [pc, #328]	@ (800115c <HAL_GPIO_Init+0x2cc>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800101c:	4a50      	ldr	r2, [pc, #320]	@ (8001160 <HAL_GPIO_Init+0x2d0>)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001046:	d013      	beq.n	8001070 <HAL_GPIO_Init+0x1e0>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a46      	ldr	r2, [pc, #280]	@ (8001164 <HAL_GPIO_Init+0x2d4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d00d      	beq.n	800106c <HAL_GPIO_Init+0x1dc>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a45      	ldr	r2, [pc, #276]	@ (8001168 <HAL_GPIO_Init+0x2d8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d007      	beq.n	8001068 <HAL_GPIO_Init+0x1d8>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a44      	ldr	r2, [pc, #272]	@ (800116c <HAL_GPIO_Init+0x2dc>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d101      	bne.n	8001064 <HAL_GPIO_Init+0x1d4>
 8001060:	2303      	movs	r3, #3
 8001062:	e006      	b.n	8001072 <HAL_GPIO_Init+0x1e2>
 8001064:	2305      	movs	r3, #5
 8001066:	e004      	b.n	8001072 <HAL_GPIO_Init+0x1e2>
 8001068:	2302      	movs	r3, #2
 800106a:	e002      	b.n	8001072 <HAL_GPIO_Init+0x1e2>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <HAL_GPIO_Init+0x1e2>
 8001070:	2300      	movs	r3, #0
 8001072:	697a      	ldr	r2, [r7, #20]
 8001074:	f002 0203 	and.w	r2, r2, #3
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	4093      	lsls	r3, r2
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001082:	4937      	ldr	r1, [pc, #220]	@ (8001160 <HAL_GPIO_Init+0x2d0>)
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001090:	4b37      	ldr	r3, [pc, #220]	@ (8001170 <HAL_GPIO_Init+0x2e0>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001170 <HAL_GPIO_Init+0x2e0>)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <HAL_GPIO_Init+0x2e0>)
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010de:	4a24      	ldr	r2, [pc, #144]	@ (8001170 <HAL_GPIO_Init+0x2e0>)
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010e4:	4b22      	ldr	r3, [pc, #136]	@ (8001170 <HAL_GPIO_Init+0x2e0>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001108:	4a19      	ldr	r2, [pc, #100]	@ (8001170 <HAL_GPIO_Init+0x2e0>)
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800110e:	4b18      	ldr	r3, [pc, #96]	@ (8001170 <HAL_GPIO_Init+0x2e0>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d003      	beq.n	8001132 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001132:	4a0f      	ldr	r2, [pc, #60]	@ (8001170 <HAL_GPIO_Init+0x2e0>)
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	3301      	adds	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	fa22 f303 	lsr.w	r3, r2, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	f47f aea9 	bne.w	8000ea0 <HAL_GPIO_Init+0x10>
  }
}
 800114e:	bf00      	nop
 8001150:	bf00      	nop
 8001152:	371c      	adds	r7, #28
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	40021000 	.word	0x40021000
 8001160:	40010000 	.word	0x40010000
 8001164:	48000400 	.word	0x48000400
 8001168:	48000800 	.word	0x48000800
 800116c:	48000c00 	.word	0x48000c00
 8001170:	40010400 	.word	0x40010400

08001174 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800117a:	af00      	add	r7, sp, #0
 800117c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001180:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001184:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001186:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800118a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	f001 b823 	b.w	80021e0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800119e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 817d 	beq.w	80014aa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011b0:	4bbc      	ldr	r3, [pc, #752]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 030c 	and.w	r3, r3, #12
 80011b8:	2b04      	cmp	r3, #4
 80011ba:	d00c      	beq.n	80011d6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011bc:	4bb9      	ldr	r3, [pc, #740]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 030c 	and.w	r3, r3, #12
 80011c4:	2b08      	cmp	r3, #8
 80011c6:	d15c      	bne.n	8001282 <HAL_RCC_OscConfig+0x10e>
 80011c8:	4bb6      	ldr	r3, [pc, #728]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011d4:	d155      	bne.n	8001282 <HAL_RCC_OscConfig+0x10e>
 80011d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80011da:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011de:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80011ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ee:	fab3 f383 	clz	r3, r3
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	095b      	lsrs	r3, r3, #5
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d102      	bne.n	8001208 <HAL_RCC_OscConfig+0x94>
 8001202:	4ba8      	ldr	r3, [pc, #672]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	e015      	b.n	8001234 <HAL_RCC_OscConfig+0xc0>
 8001208:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800120c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001210:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001214:	fa93 f3a3 	rbit	r3, r3
 8001218:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800121c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001220:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001224:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001228:	fa93 f3a3 	rbit	r3, r3
 800122c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001230:	4b9c      	ldr	r3, [pc, #624]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 8001232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001234:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001238:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800123c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001240:	fa92 f2a2 	rbit	r2, r2
 8001244:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001248:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800124c:	fab2 f282 	clz	r2, r2
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	f042 0220 	orr.w	r2, r2, #32
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	f002 021f 	and.w	r2, r2, #31
 800125c:	2101      	movs	r1, #1
 800125e:	fa01 f202 	lsl.w	r2, r1, r2
 8001262:	4013      	ands	r3, r2
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 811f 	beq.w	80014a8 <HAL_RCC_OscConfig+0x334>
 800126a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800126e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f040 8116 	bne.w	80014a8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	f000 bfaf 	b.w	80021e0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001286:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001292:	d106      	bne.n	80012a2 <HAL_RCC_OscConfig+0x12e>
 8001294:	4b83      	ldr	r3, [pc, #524]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a82      	ldr	r2, [pc, #520]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 800129a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	e036      	b.n	8001310 <HAL_RCC_OscConfig+0x19c>
 80012a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x158>
 80012b2:	4b7c      	ldr	r3, [pc, #496]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a7b      	ldr	r2, [pc, #492]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 80012b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b79      	ldr	r3, [pc, #484]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a78      	ldr	r2, [pc, #480]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 80012c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e021      	b.n	8001310 <HAL_RCC_OscConfig+0x19c>
 80012cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x184>
 80012de:	4b71      	ldr	r3, [pc, #452]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a70      	ldr	r2, [pc, #448]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 80012e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b6e      	ldr	r3, [pc, #440]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a6d      	ldr	r2, [pc, #436]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 80012f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e00b      	b.n	8001310 <HAL_RCC_OscConfig+0x19c>
 80012f8:	4b6a      	ldr	r3, [pc, #424]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a69      	ldr	r2, [pc, #420]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 80012fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b67      	ldr	r3, [pc, #412]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a66      	ldr	r2, [pc, #408]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 800130a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800130e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001310:	4b64      	ldr	r3, [pc, #400]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 8001312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001314:	f023 020f 	bic.w	r2, r3, #15
 8001318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800131c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	495f      	ldr	r1, [pc, #380]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 8001326:	4313      	orrs	r3, r2
 8001328:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800132a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800132e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d059      	beq.n	80013ee <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff f977 	bl	800062c <HAL_GetTick>
 800133e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001342:	e00a      	b.n	800135a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff f972 	bl	800062c <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b64      	cmp	r3, #100	@ 0x64
 8001352:	d902      	bls.n	800135a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	f000 bf43 	b.w	80021e0 <HAL_RCC_OscConfig+0x106c>
 800135a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800135e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800136e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	095b      	lsrs	r3, r3, #5
 800137a:	b2db      	uxtb	r3, r3
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b01      	cmp	r3, #1
 8001384:	d102      	bne.n	800138c <HAL_RCC_OscConfig+0x218>
 8001386:	4b47      	ldr	r3, [pc, #284]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	e015      	b.n	80013b8 <HAL_RCC_OscConfig+0x244>
 800138c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001390:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001394:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001398:	fa93 f3a3 	rbit	r3, r3
 800139c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80013a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013a4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80013a8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80013ac:	fa93 f3a3 	rbit	r3, r3
 80013b0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80013b4:	4b3b      	ldr	r3, [pc, #236]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 80013b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013bc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80013c0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80013c4:	fa92 f2a2 	rbit	r2, r2
 80013c8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80013cc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80013d0:	fab2 f282 	clz	r2, r2
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	f042 0220 	orr.w	r2, r2, #32
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	f002 021f 	and.w	r2, r2, #31
 80013e0:	2101      	movs	r1, #1
 80013e2:	fa01 f202 	lsl.w	r2, r1, r2
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0ab      	beq.n	8001344 <HAL_RCC_OscConfig+0x1d0>
 80013ec:	e05d      	b.n	80014aa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ee:	f7ff f91d 	bl	800062c <HAL_GetTick>
 80013f2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f6:	e00a      	b.n	800140e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff f918 	bl	800062c <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b64      	cmp	r3, #100	@ 0x64
 8001406:	d902      	bls.n	800140e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	f000 bee9 	b.w	80021e0 <HAL_RCC_OscConfig+0x106c>
 800140e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001412:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001416:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001422:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	fab3 f383 	clz	r3, r3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	095b      	lsrs	r3, r3, #5
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b01      	cmp	r3, #1
 8001438:	d102      	bne.n	8001440 <HAL_RCC_OscConfig+0x2cc>
 800143a:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	e015      	b.n	800146c <HAL_RCC_OscConfig+0x2f8>
 8001440:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001444:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001448:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800144c:	fa93 f3a3 	rbit	r3, r3
 8001450:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001454:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001458:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800145c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001460:	fa93 f3a3 	rbit	r3, r3
 8001464:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001468:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <HAL_RCC_OscConfig+0x330>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001470:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001474:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001478:	fa92 f2a2 	rbit	r2, r2
 800147c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001480:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001484:	fab2 f282 	clz	r2, r2
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	f042 0220 	orr.w	r2, r2, #32
 800148e:	b2d2      	uxtb	r2, r2
 8001490:	f002 021f 	and.w	r2, r2, #31
 8001494:	2101      	movs	r1, #1
 8001496:	fa01 f202 	lsl.w	r2, r1, r2
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1ab      	bne.n	80013f8 <HAL_RCC_OscConfig+0x284>
 80014a0:	e003      	b.n	80014aa <HAL_RCC_OscConfig+0x336>
 80014a2:	bf00      	nop
 80014a4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	f000 817d 	beq.w	80017ba <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80014c0:	4ba6      	ldr	r3, [pc, #664]	@ (800175c <HAL_RCC_OscConfig+0x5e8>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 030c 	and.w	r3, r3, #12
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00b      	beq.n	80014e4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014cc:	4ba3      	ldr	r3, [pc, #652]	@ (800175c <HAL_RCC_OscConfig+0x5e8>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d172      	bne.n	80015be <HAL_RCC_OscConfig+0x44a>
 80014d8:	4ba0      	ldr	r3, [pc, #640]	@ (800175c <HAL_RCC_OscConfig+0x5e8>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d16c      	bne.n	80015be <HAL_RCC_OscConfig+0x44a>
 80014e4:	2302      	movs	r3, #2
 80014e6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ea:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80014ee:	fa93 f3a3 	rbit	r3, r3
 80014f2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80014f6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	095b      	lsrs	r3, r3, #5
 8001502:	b2db      	uxtb	r3, r3
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b01      	cmp	r3, #1
 800150c:	d102      	bne.n	8001514 <HAL_RCC_OscConfig+0x3a0>
 800150e:	4b93      	ldr	r3, [pc, #588]	@ (800175c <HAL_RCC_OscConfig+0x5e8>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	e013      	b.n	800153c <HAL_RCC_OscConfig+0x3c8>
 8001514:	2302      	movs	r3, #2
 8001516:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800151e:	fa93 f3a3 	rbit	r3, r3
 8001522:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001526:	2302      	movs	r3, #2
 8001528:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800152c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001530:	fa93 f3a3 	rbit	r3, r3
 8001534:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001538:	4b88      	ldr	r3, [pc, #544]	@ (800175c <HAL_RCC_OscConfig+0x5e8>)
 800153a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153c:	2202      	movs	r2, #2
 800153e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001542:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001546:	fa92 f2a2 	rbit	r2, r2
 800154a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800154e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001552:	fab2 f282 	clz	r2, r2
 8001556:	b2d2      	uxtb	r2, r2
 8001558:	f042 0220 	orr.w	r2, r2, #32
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	f002 021f 	and.w	r2, r2, #31
 8001562:	2101      	movs	r1, #1
 8001564:	fa01 f202 	lsl.w	r2, r1, r2
 8001568:	4013      	ands	r3, r2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00a      	beq.n	8001584 <HAL_RCC_OscConfig+0x410>
 800156e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001572:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d002      	beq.n	8001584 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	f000 be2e 	b.w	80021e0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001584:	4b75      	ldr	r3, [pc, #468]	@ (800175c <HAL_RCC_OscConfig+0x5e8>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800158c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001590:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	21f8      	movs	r1, #248	@ 0xf8
 800159a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800159e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80015a2:	fa91 f1a1 	rbit	r1, r1
 80015a6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80015aa:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80015ae:	fab1 f181 	clz	r1, r1
 80015b2:	b2c9      	uxtb	r1, r1
 80015b4:	408b      	lsls	r3, r1
 80015b6:	4969      	ldr	r1, [pc, #420]	@ (800175c <HAL_RCC_OscConfig+0x5e8>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015bc:	e0fd      	b.n	80017ba <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8088 	beq.w	80016e0 <HAL_RCC_OscConfig+0x56c>
 80015d0:	2301      	movs	r3, #1
 80015d2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80015e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e6:	fab3 f383 	clz	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80015f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	461a      	mov	r2, r3
 80015f8:	2301      	movs	r3, #1
 80015fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff f816 	bl	800062c <HAL_GetTick>
 8001600:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001606:	f7ff f811 	bl	800062c <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d902      	bls.n	800161c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	f000 bde2 	b.w	80021e0 <HAL_RCC_OscConfig+0x106c>
 800161c:	2302      	movs	r3, #2
 800161e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001622:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001626:	fa93 f3a3 	rbit	r3, r3
 800162a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800162e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001632:	fab3 f383 	clz	r3, r3
 8001636:	b2db      	uxtb	r3, r3
 8001638:	095b      	lsrs	r3, r3, #5
 800163a:	b2db      	uxtb	r3, r3
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b01      	cmp	r3, #1
 8001644:	d102      	bne.n	800164c <HAL_RCC_OscConfig+0x4d8>
 8001646:	4b45      	ldr	r3, [pc, #276]	@ (800175c <HAL_RCC_OscConfig+0x5e8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	e013      	b.n	8001674 <HAL_RCC_OscConfig+0x500>
 800164c:	2302      	movs	r3, #2
 800164e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001656:	fa93 f3a3 	rbit	r3, r3
 800165a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800165e:	2302      	movs	r3, #2
 8001660:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001664:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001668:	fa93 f3a3 	rbit	r3, r3
 800166c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001670:	4b3a      	ldr	r3, [pc, #232]	@ (800175c <HAL_RCC_OscConfig+0x5e8>)
 8001672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001674:	2202      	movs	r2, #2
 8001676:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800167a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800167e:	fa92 f2a2 	rbit	r2, r2
 8001682:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001686:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800168a:	fab2 f282 	clz	r2, r2
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	f042 0220 	orr.w	r2, r2, #32
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	f002 021f 	and.w	r2, r2, #31
 800169a:	2101      	movs	r1, #1
 800169c:	fa01 f202 	lsl.w	r2, r1, r2
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0af      	beq.n	8001606 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a6:	4b2d      	ldr	r3, [pc, #180]	@ (800175c <HAL_RCC_OscConfig+0x5e8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	21f8      	movs	r1, #248	@ 0xf8
 80016bc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80016c4:	fa91 f1a1 	rbit	r1, r1
 80016c8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80016cc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80016d0:	fab1 f181 	clz	r1, r1
 80016d4:	b2c9      	uxtb	r1, r1
 80016d6:	408b      	lsls	r3, r1
 80016d8:	4920      	ldr	r1, [pc, #128]	@ (800175c <HAL_RCC_OscConfig+0x5e8>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]
 80016de:	e06c      	b.n	80017ba <HAL_RCC_OscConfig+0x646>
 80016e0:	2301      	movs	r3, #1
 80016e2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80016f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f6:	fab3 f383 	clz	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001700:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	461a      	mov	r2, r3
 8001708:	2300      	movs	r3, #0
 800170a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7fe ff8e 	bl	800062c <HAL_GetTick>
 8001710:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001714:	e00a      	b.n	800172c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001716:	f7fe ff89 	bl	800062c <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d902      	bls.n	800172c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	f000 bd5a 	b.w	80021e0 <HAL_RCC_OscConfig+0x106c>
 800172c:	2302      	movs	r3, #2
 800172e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800173e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	fab3 f383 	clz	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	095b      	lsrs	r3, r3, #5
 800174a:	b2db      	uxtb	r3, r3
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b01      	cmp	r3, #1
 8001754:	d104      	bne.n	8001760 <HAL_RCC_OscConfig+0x5ec>
 8001756:	4b01      	ldr	r3, [pc, #4]	@ (800175c <HAL_RCC_OscConfig+0x5e8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	e015      	b.n	8001788 <HAL_RCC_OscConfig+0x614>
 800175c:	40021000 	.word	0x40021000
 8001760:	2302      	movs	r3, #2
 8001762:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800176a:	fa93 f3a3 	rbit	r3, r3
 800176e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001772:	2302      	movs	r3, #2
 8001774:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001778:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800177c:	fa93 f3a3 	rbit	r3, r3
 8001780:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001784:	4bc8      	ldr	r3, [pc, #800]	@ (8001aa8 <HAL_RCC_OscConfig+0x934>)
 8001786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001788:	2202      	movs	r2, #2
 800178a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800178e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001792:	fa92 f2a2 	rbit	r2, r2
 8001796:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800179a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800179e:	fab2 f282 	clz	r2, r2
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	f042 0220 	orr.w	r2, r2, #32
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	f002 021f 	and.w	r2, r2, #31
 80017ae:	2101      	movs	r1, #1
 80017b0:	fa01 f202 	lsl.w	r2, r1, r2
 80017b4:	4013      	ands	r3, r2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ad      	bne.n	8001716 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0308 	and.w	r3, r3, #8
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f000 8110 	beq.w	80019f0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d079      	beq.n	80018d4 <HAL_RCC_OscConfig+0x760>
 80017e0:	2301      	movs	r3, #1
 80017e2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80017ea:	fa93 f3a3 	rbit	r3, r3
 80017ee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80017f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f6:	fab3 f383 	clz	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	4bab      	ldr	r3, [pc, #684]	@ (8001aac <HAL_RCC_OscConfig+0x938>)
 8001800:	4413      	add	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	461a      	mov	r2, r3
 8001806:	2301      	movs	r3, #1
 8001808:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800180a:	f7fe ff0f 	bl	800062c <HAL_GetTick>
 800180e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001812:	e00a      	b.n	800182a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001814:	f7fe ff0a 	bl	800062c <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d902      	bls.n	800182a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	f000 bcdb 	b.w	80021e0 <HAL_RCC_OscConfig+0x106c>
 800182a:	2302      	movs	r3, #2
 800182c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001830:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001834:	fa93 f3a3 	rbit	r3, r3
 8001838:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800183c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001840:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001844:	2202      	movs	r2, #2
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800184c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	fa93 f2a3 	rbit	r2, r3
 8001856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800185a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001868:	2202      	movs	r2, #2
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	fa93 f2a3 	rbit	r2, r3
 800187a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800187e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001882:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001884:	4b88      	ldr	r3, [pc, #544]	@ (8001aa8 <HAL_RCC_OscConfig+0x934>)
 8001886:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001888:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001890:	2102      	movs	r1, #2
 8001892:	6019      	str	r1, [r3, #0]
 8001894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001898:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	fa93 f1a3 	rbit	r1, r3
 80018a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018aa:	6019      	str	r1, [r3, #0]
  return result;
 80018ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	fab3 f383 	clz	r3, r3
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f003 031f 	and.w	r3, r3, #31
 80018c6:	2101      	movs	r1, #1
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	4013      	ands	r3, r2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0a0      	beq.n	8001814 <HAL_RCC_OscConfig+0x6a0>
 80018d2:	e08d      	b.n	80019f0 <HAL_RCC_OscConfig+0x87c>
 80018d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	fa93 f2a3 	rbit	r2, r3
 80018ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80018f6:	601a      	str	r2, [r3, #0]
  return result;
 80018f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001900:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	461a      	mov	r2, r3
 800190a:	4b68      	ldr	r3, [pc, #416]	@ (8001aac <HAL_RCC_OscConfig+0x938>)
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	461a      	mov	r2, r3
 8001912:	2300      	movs	r3, #0
 8001914:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001916:	f7fe fe89 	bl	800062c <HAL_GetTick>
 800191a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800191e:	e00a      	b.n	8001936 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001920:	f7fe fe84 	bl	800062c <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d902      	bls.n	8001936 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	f000 bc55 	b.w	80021e0 <HAL_RCC_OscConfig+0x106c>
 8001936:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800193a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800193e:	2202      	movs	r2, #2
 8001940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001946:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fa93 f2a3 	rbit	r2, r3
 8001950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001954:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001962:	2202      	movs	r2, #2
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	fa93 f2a3 	rbit	r2, r3
 8001974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001978:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001982:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001986:	2202      	movs	r2, #2
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800198e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	fa93 f2a3 	rbit	r2, r3
 8001998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800199c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80019a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a2:	4b41      	ldr	r3, [pc, #260]	@ (8001aa8 <HAL_RCC_OscConfig+0x934>)
 80019a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019aa:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019ae:	2102      	movs	r1, #2
 80019b0:	6019      	str	r1, [r3, #0]
 80019b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f1a3 	rbit	r1, r3
 80019c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80019c8:	6019      	str	r1, [r3, #0]
  return result;
 80019ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	2101      	movs	r1, #1
 80019e6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d197      	bne.n	8001920 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	f000 81a1 	beq.w	8001d48 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a0c:	4b26      	ldr	r3, [pc, #152]	@ (8001aa8 <HAL_RCC_OscConfig+0x934>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d116      	bne.n	8001a46 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a18:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <HAL_RCC_OscConfig+0x934>)
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	4a22      	ldr	r2, [pc, #136]	@ (8001aa8 <HAL_RCC_OscConfig+0x934>)
 8001a1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a22:	61d3      	str	r3, [r2, #28]
 8001a24:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <HAL_RCC_OscConfig+0x934>)
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001a2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a30:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a3a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001a3e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a40:	2301      	movs	r3, #1
 8001a42:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a46:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab0 <HAL_RCC_OscConfig+0x93c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d11a      	bne.n	8001a88 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a52:	4b17      	ldr	r3, [pc, #92]	@ (8001ab0 <HAL_RCC_OscConfig+0x93c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a16      	ldr	r2, [pc, #88]	@ (8001ab0 <HAL_RCC_OscConfig+0x93c>)
 8001a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a5c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5e:	f7fe fde5 	bl	800062c <HAL_GetTick>
 8001a62:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a66:	e009      	b.n	8001a7c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a68:	f7fe fde0 	bl	800062c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b64      	cmp	r3, #100	@ 0x64
 8001a76:	d901      	bls.n	8001a7c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	e3b1      	b.n	80021e0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <HAL_RCC_OscConfig+0x93c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d0ef      	beq.n	8001a68 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a8c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d10d      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x940>
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <HAL_RCC_OscConfig+0x934>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4a02      	ldr	r2, [pc, #8]	@ (8001aa8 <HAL_RCC_OscConfig+0x934>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6213      	str	r3, [r2, #32]
 8001aa4:	e03c      	b.n	8001b20 <HAL_RCC_OscConfig+0x9ac>
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	10908120 	.word	0x10908120
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10c      	bne.n	8001ade <HAL_RCC_OscConfig+0x96a>
 8001ac4:	4bc1      	ldr	r3, [pc, #772]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	4ac0      	ldr	r2, [pc, #768]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	6213      	str	r3, [r2, #32]
 8001ad0:	4bbe      	ldr	r3, [pc, #760]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	4abd      	ldr	r2, [pc, #756]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001ad6:	f023 0304 	bic.w	r3, r3, #4
 8001ada:	6213      	str	r3, [r2, #32]
 8001adc:	e020      	b.n	8001b20 <HAL_RCC_OscConfig+0x9ac>
 8001ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	2b05      	cmp	r3, #5
 8001aec:	d10c      	bne.n	8001b08 <HAL_RCC_OscConfig+0x994>
 8001aee:	4bb7      	ldr	r3, [pc, #732]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	4ab6      	ldr	r2, [pc, #728]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	6213      	str	r3, [r2, #32]
 8001afa:	4bb4      	ldr	r3, [pc, #720]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001afc:	6a1b      	ldr	r3, [r3, #32]
 8001afe:	4ab3      	ldr	r2, [pc, #716]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6213      	str	r3, [r2, #32]
 8001b06:	e00b      	b.n	8001b20 <HAL_RCC_OscConfig+0x9ac>
 8001b08:	4bb0      	ldr	r3, [pc, #704]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4aaf      	ldr	r2, [pc, #700]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001b0e:	f023 0301 	bic.w	r3, r3, #1
 8001b12:	6213      	str	r3, [r2, #32]
 8001b14:	4bad      	ldr	r3, [pc, #692]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4aac      	ldr	r2, [pc, #688]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001b1a:	f023 0304 	bic.w	r3, r3, #4
 8001b1e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 8081 	beq.w	8001c34 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b32:	f7fe fd7b 	bl	800062c <HAL_GetTick>
 8001b36:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3a:	e00b      	b.n	8001b54 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7fe fd76 	bl	800062c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e345      	b.n	80021e0 <HAL_RCC_OscConfig+0x106c>
 8001b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b58:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b64:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	fa93 f2a3 	rbit	r2, r3
 8001b6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b72:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001b80:	2202      	movs	r2, #2
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b88:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	fa93 f2a3 	rbit	r2, r3
 8001b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b96:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001b9a:	601a      	str	r2, [r3, #0]
  return result;
 8001b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ba4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba6:	fab3 f383 	clz	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	095b      	lsrs	r3, r3, #5
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f043 0302 	orr.w	r3, r3, #2
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d102      	bne.n	8001bc0 <HAL_RCC_OscConfig+0xa4c>
 8001bba:	4b84      	ldr	r3, [pc, #528]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	e013      	b.n	8001be8 <HAL_RCC_OscConfig+0xa74>
 8001bc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001bc8:	2202      	movs	r2, #2
 8001bca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	fa93 f2a3 	rbit	r2, r3
 8001bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bde:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	4b79      	ldr	r3, [pc, #484]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bec:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001bf0:	2102      	movs	r1, #2
 8001bf2:	6011      	str	r1, [r2, #0]
 8001bf4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001bf8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	fa92 f1a2 	rbit	r1, r2
 8001c02:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c06:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c0a:	6011      	str	r1, [r2, #0]
  return result;
 8001c0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c10:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	fab2 f282 	clz	r2, r2
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	f002 021f 	and.w	r2, r2, #31
 8001c26:	2101      	movs	r1, #1
 8001c28:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d084      	beq.n	8001b3c <HAL_RCC_OscConfig+0x9c8>
 8001c32:	e07f      	b.n	8001d34 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c34:	f7fe fcfa 	bl	800062c <HAL_GetTick>
 8001c38:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3c:	e00b      	b.n	8001c56 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c3e:	f7fe fcf5 	bl	800062c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e2c4      	b.n	80021e0 <HAL_RCC_OscConfig+0x106c>
 8001c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001c5e:	2202      	movs	r2, #2
 8001c60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c66:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	fa93 f2a3 	rbit	r2, r3
 8001c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c74:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001c82:	2202      	movs	r2, #2
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	fa93 f2a3 	rbit	r2, r3
 8001c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c98:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001c9c:	601a      	str	r2, [r3, #0]
  return result;
 8001c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001ca6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca8:	fab3 f383 	clz	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	f043 0302 	orr.w	r3, r3, #2
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d102      	bne.n	8001cc2 <HAL_RCC_OscConfig+0xb4e>
 8001cbc:	4b43      	ldr	r3, [pc, #268]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	e013      	b.n	8001cea <HAL_RCC_OscConfig+0xb76>
 8001cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001cca:	2202      	movs	r2, #2
 8001ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	fa93 f2a3 	rbit	r2, r3
 8001cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	4b39      	ldr	r3, [pc, #228]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cee:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001cf2:	2102      	movs	r1, #2
 8001cf4:	6011      	str	r1, [r2, #0]
 8001cf6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001cfa:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	fa92 f1a2 	rbit	r1, r2
 8001d04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d08:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d0c:	6011      	str	r1, [r2, #0]
  return result;
 8001d0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d12:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	fab2 f282 	clz	r2, r2
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	f002 021f 	and.w	r2, r2, #31
 8001d28:	2101      	movs	r1, #1
 8001d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d184      	bne.n	8001c3e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d34:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d105      	bne.n	8001d48 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d3c:	4b23      	ldr	r3, [pc, #140]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	4a22      	ldr	r2, [pc, #136]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d46:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 8242 	beq.w	80021de <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dcc <HAL_RCC_OscConfig+0xc58>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	f000 8213 	beq.w	800218e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	f040 8162 	bne.w	800203e <HAL_RCC_OscConfig+0xeca>
 8001d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001d82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d8c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	fa93 f2a3 	rbit	r2, r3
 8001d96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001d9e:	601a      	str	r2, [r3, #0]
  return result;
 8001da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001da8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001db4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	461a      	mov	r2, r3
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7fe fc34 	bl	800062c <HAL_GetTick>
 8001dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc8:	e00c      	b.n	8001de4 <HAL_RCC_OscConfig+0xc70>
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dd0:	f7fe fc2c 	bl	800062c <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e1fd      	b.n	80021e0 <HAL_RCC_OscConfig+0x106c>
 8001de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001dec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fa93 f2a3 	rbit	r2, r3
 8001e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e04:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e08:	601a      	str	r2, [r3, #0]
  return result;
 8001e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e0e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d102      	bne.n	8001e2e <HAL_RCC_OscConfig+0xcba>
 8001e28:	4bb0      	ldr	r3, [pc, #704]	@ (80020ec <HAL_RCC_OscConfig+0xf78>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	e027      	b.n	8001e7e <HAL_RCC_OscConfig+0xd0a>
 8001e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e32:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e3a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e40:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	fa93 f2a3 	rbit	r2, r3
 8001e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e58:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001e5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e66:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	fa93 f2a3 	rbit	r2, r3
 8001e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e74:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	4b9c      	ldr	r3, [pc, #624]	@ (80020ec <HAL_RCC_OscConfig+0xf78>)
 8001e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e82:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001e86:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e8a:	6011      	str	r1, [r2, #0]
 8001e8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e90:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	fa92 f1a2 	rbit	r1, r2
 8001e9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001e9e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001ea2:	6011      	str	r1, [r2, #0]
  return result;
 8001ea4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ea8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	fab2 f282 	clz	r2, r2
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f042 0220 	orr.w	r2, r2, #32
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	f002 021f 	and.w	r2, r2, #31
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d182      	bne.n	8001dd0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eca:	4b88      	ldr	r3, [pc, #544]	@ (80020ec <HAL_RCC_OscConfig+0xf78>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ed2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	430b      	orrs	r3, r1
 8001eec:	497f      	ldr	r1, [pc, #508]	@ (80020ec <HAL_RCC_OscConfig+0xf78>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
 8001ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001efa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001efe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f04:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	fa93 f2a3 	rbit	r2, r3
 8001f0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f12:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f16:	601a      	str	r2, [r3, #0]
  return result;
 8001f18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f1c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f20:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f2c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	461a      	mov	r2, r3
 8001f34:	2301      	movs	r3, #1
 8001f36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7fe fb78 	bl	800062c <HAL_GetTick>
 8001f3c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f40:	e009      	b.n	8001f56 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f42:	f7fe fb73 	bl	800062c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e144      	b.n	80021e0 <HAL_RCC_OscConfig+0x106c>
 8001f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f5a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f68:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fa93 f2a3 	rbit	r2, r3
 8001f72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f76:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001f7a:	601a      	str	r2, [r3, #0]
  return result;
 8001f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f80:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001f84:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	095b      	lsrs	r3, r3, #5
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d102      	bne.n	8001fa0 <HAL_RCC_OscConfig+0xe2c>
 8001f9a:	4b54      	ldr	r3, [pc, #336]	@ (80020ec <HAL_RCC_OscConfig+0xf78>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	e027      	b.n	8001ff0 <HAL_RCC_OscConfig+0xe7c>
 8001fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001fa8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	fa93 f2a3 	rbit	r2, r3
 8001fbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fca:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001fce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fa93 f2a3 	rbit	r2, r3
 8001fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	4b3f      	ldr	r3, [pc, #252]	@ (80020ec <HAL_RCC_OscConfig+0xf78>)
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ff4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001ff8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ffc:	6011      	str	r1, [r2, #0]
 8001ffe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002002:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	fa92 f1a2 	rbit	r1, r2
 800200c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002010:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002014:	6011      	str	r1, [r2, #0]
  return result;
 8002016:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800201a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	fab2 f282 	clz	r2, r2
 8002024:	b2d2      	uxtb	r2, r2
 8002026:	f042 0220 	orr.w	r2, r2, #32
 800202a:	b2d2      	uxtb	r2, r2
 800202c:	f002 021f 	and.w	r2, r2, #31
 8002030:	2101      	movs	r1, #1
 8002032:	fa01 f202 	lsl.w	r2, r1, r2
 8002036:	4013      	ands	r3, r2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d082      	beq.n	8001f42 <HAL_RCC_OscConfig+0xdce>
 800203c:	e0cf      	b.n	80021de <HAL_RCC_OscConfig+0x106a>
 800203e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002042:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002046:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800204a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002050:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	fa93 f2a3 	rbit	r2, r3
 800205a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800205e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002062:	601a      	str	r2, [r3, #0]
  return result;
 8002064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002068:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800206c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002078:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	461a      	mov	r2, r3
 8002080:	2300      	movs	r3, #0
 8002082:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7fe fad2 	bl	800062c <HAL_GetTick>
 8002088:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208c:	e009      	b.n	80020a2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208e:	f7fe facd 	bl	800062c <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e09e      	b.n	80021e0 <HAL_RCC_OscConfig+0x106c>
 80020a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80020aa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	fa93 f2a3 	rbit	r2, r3
 80020be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80020c6:	601a      	str	r2, [r3, #0]
  return result;
 80020c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020cc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80020d0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	095b      	lsrs	r3, r3, #5
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d104      	bne.n	80020f0 <HAL_RCC_OscConfig+0xf7c>
 80020e6:	4b01      	ldr	r3, [pc, #4]	@ (80020ec <HAL_RCC_OscConfig+0xf78>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	e029      	b.n	8002140 <HAL_RCC_OscConfig+0xfcc>
 80020ec:	40021000 	.word	0x40021000
 80020f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80020f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002102:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa93 f2a3 	rbit	r2, r3
 800210c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002110:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800211e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002128:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	fa93 f2a3 	rbit	r2, r3
 8002132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002136:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <HAL_RCC_OscConfig+0x1078>)
 800213e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002140:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002144:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002148:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800214c:	6011      	str	r1, [r2, #0]
 800214e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002152:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	fa92 f1a2 	rbit	r1, r2
 800215c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002160:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002164:	6011      	str	r1, [r2, #0]
  return result;
 8002166:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800216a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	fab2 f282 	clz	r2, r2
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	f042 0220 	orr.w	r2, r2, #32
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	f002 021f 	and.w	r2, r2, #31
 8002180:	2101      	movs	r1, #1
 8002182:	fa01 f202 	lsl.w	r2, r1, r2
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d180      	bne.n	800208e <HAL_RCC_OscConfig+0xf1a>
 800218c:	e027      	b.n	80021de <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e01e      	b.n	80021e0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021a2:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <HAL_RCC_OscConfig+0x1078>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021aa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80021ae:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80021b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d10b      	bne.n	80021da <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80021c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80021c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80021ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d001      	beq.n	80021de <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000

080021f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b09e      	sub	sp, #120	@ 0x78
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e162      	b.n	80024ce <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b90      	ldr	r3, [pc, #576]	@ (800244c <HAL_RCC_ClockConfig+0x25c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d910      	bls.n	8002238 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b8d      	ldr	r3, [pc, #564]	@ (800244c <HAL_RCC_ClockConfig+0x25c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 0207 	bic.w	r2, r3, #7
 800221e:	498b      	ldr	r1, [pc, #556]	@ (800244c <HAL_RCC_ClockConfig+0x25c>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b89      	ldr	r3, [pc, #548]	@ (800244c <HAL_RCC_ClockConfig+0x25c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e14a      	b.n	80024ce <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002244:	4b82      	ldr	r3, [pc, #520]	@ (8002450 <HAL_RCC_ClockConfig+0x260>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	497f      	ldr	r1, [pc, #508]	@ (8002450 <HAL_RCC_ClockConfig+0x260>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 80dc 	beq.w	800241c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d13c      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xf6>
 800226c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002270:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002274:	fa93 f3a3 	rbit	r3, r3
 8002278:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800227a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	b2db      	uxtb	r3, r3
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b01      	cmp	r3, #1
 800228e:	d102      	bne.n	8002296 <HAL_RCC_ClockConfig+0xa6>
 8002290:	4b6f      	ldr	r3, [pc, #444]	@ (8002450 <HAL_RCC_ClockConfig+0x260>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	e00f      	b.n	80022b6 <HAL_RCC_ClockConfig+0xc6>
 8002296:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800229a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80022a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80022aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022b2:	4b67      	ldr	r3, [pc, #412]	@ (8002450 <HAL_RCC_ClockConfig+0x260>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022ba:	65ba      	str	r2, [r7, #88]	@ 0x58
 80022bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80022be:	fa92 f2a2 	rbit	r2, r2
 80022c2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80022c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80022c6:	fab2 f282 	clz	r2, r2
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	f042 0220 	orr.w	r2, r2, #32
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	f002 021f 	and.w	r2, r2, #31
 80022d6:	2101      	movs	r1, #1
 80022d8:	fa01 f202 	lsl.w	r2, r1, r2
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d17b      	bne.n	80023da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0f3      	b.n	80024ce <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d13c      	bne.n	8002368 <HAL_RCC_ClockConfig+0x178>
 80022ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80022fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fe:	fab3 f383 	clz	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	095b      	lsrs	r3, r3, #5
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f043 0301 	orr.w	r3, r3, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b01      	cmp	r3, #1
 8002310:	d102      	bne.n	8002318 <HAL_RCC_ClockConfig+0x128>
 8002312:	4b4f      	ldr	r3, [pc, #316]	@ (8002450 <HAL_RCC_ClockConfig+0x260>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	e00f      	b.n	8002338 <HAL_RCC_ClockConfig+0x148>
 8002318:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800231c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	647b      	str	r3, [r7, #68]	@ 0x44
 8002326:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800232a:	643b      	str	r3, [r7, #64]	@ 0x40
 800232c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002334:	4b46      	ldr	r3, [pc, #280]	@ (8002450 <HAL_RCC_ClockConfig+0x260>)
 8002336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002338:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800233c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800233e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002340:	fa92 f2a2 	rbit	r2, r2
 8002344:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002346:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002348:	fab2 f282 	clz	r2, r2
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	f042 0220 	orr.w	r2, r2, #32
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	f002 021f 	and.w	r2, r2, #31
 8002358:	2101      	movs	r1, #1
 800235a:	fa01 f202 	lsl.w	r2, r1, r2
 800235e:	4013      	ands	r3, r2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d13a      	bne.n	80023da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e0b2      	b.n	80024ce <HAL_RCC_ClockConfig+0x2de>
 8002368:	2302      	movs	r3, #2
 800236a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002376:	fab3 f383 	clz	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	095b      	lsrs	r3, r3, #5
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f043 0301 	orr.w	r3, r3, #1
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d102      	bne.n	8002390 <HAL_RCC_ClockConfig+0x1a0>
 800238a:	4b31      	ldr	r3, [pc, #196]	@ (8002450 <HAL_RCC_ClockConfig+0x260>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	e00d      	b.n	80023ac <HAL_RCC_ClockConfig+0x1bc>
 8002390:	2302      	movs	r3, #2
 8002392:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
 800239c:	2302      	movs	r3, #2
 800239e:	623b      	str	r3, [r7, #32]
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	4b29      	ldr	r3, [pc, #164]	@ (8002450 <HAL_RCC_ClockConfig+0x260>)
 80023aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ac:	2202      	movs	r2, #2
 80023ae:	61ba      	str	r2, [r7, #24]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	fa92 f2a2 	rbit	r2, r2
 80023b6:	617a      	str	r2, [r7, #20]
  return result;
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	fab2 f282 	clz	r2, r2
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	f042 0220 	orr.w	r2, r2, #32
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	f002 021f 	and.w	r2, r2, #31
 80023ca:	2101      	movs	r1, #1
 80023cc:	fa01 f202 	lsl.w	r2, r1, r2
 80023d0:	4013      	ands	r3, r2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e079      	b.n	80024ce <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4b1d      	ldr	r3, [pc, #116]	@ (8002450 <HAL_RCC_ClockConfig+0x260>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	491a      	ldr	r1, [pc, #104]	@ (8002450 <HAL_RCC_ClockConfig+0x260>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ec:	f7fe f91e 	bl	800062c <HAL_GetTick>
 80023f0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7fe f91a 	bl	800062c <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e061      	b.n	80024ce <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <HAL_RCC_ClockConfig+0x260>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 020c 	and.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d1eb      	bne.n	80023f4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b0b      	ldr	r3, [pc, #44]	@ (800244c <HAL_RCC_ClockConfig+0x25c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d214      	bcs.n	8002454 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b08      	ldr	r3, [pc, #32]	@ (800244c <HAL_RCC_ClockConfig+0x25c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 0207 	bic.w	r2, r3, #7
 8002432:	4906      	ldr	r1, [pc, #24]	@ (800244c <HAL_RCC_ClockConfig+0x25c>)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b04      	ldr	r3, [pc, #16]	@ (800244c <HAL_RCC_ClockConfig+0x25c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d005      	beq.n	8002454 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e040      	b.n	80024ce <HAL_RCC_ClockConfig+0x2de>
 800244c:	40022000 	.word	0x40022000
 8002450:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002460:	4b1d      	ldr	r3, [pc, #116]	@ (80024d8 <HAL_RCC_ClockConfig+0x2e8>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	491a      	ldr	r1, [pc, #104]	@ (80024d8 <HAL_RCC_ClockConfig+0x2e8>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247e:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <HAL_RCC_ClockConfig+0x2e8>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	4912      	ldr	r1, [pc, #72]	@ (80024d8 <HAL_RCC_ClockConfig+0x2e8>)
 800248e:	4313      	orrs	r3, r2
 8002490:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002492:	f000 f829 	bl	80024e8 <HAL_RCC_GetSysClockFreq>
 8002496:	4601      	mov	r1, r0
 8002498:	4b0f      	ldr	r3, [pc, #60]	@ (80024d8 <HAL_RCC_ClockConfig+0x2e8>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024a0:	22f0      	movs	r2, #240	@ 0xf0
 80024a2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	fa92 f2a2 	rbit	r2, r2
 80024aa:	60fa      	str	r2, [r7, #12]
  return result;
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	fab2 f282 	clz	r2, r2
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	40d3      	lsrs	r3, r2
 80024b6:	4a09      	ldr	r2, [pc, #36]	@ (80024dc <HAL_RCC_ClockConfig+0x2ec>)
 80024b8:	5cd3      	ldrb	r3, [r2, r3]
 80024ba:	fa21 f303 	lsr.w	r3, r1, r3
 80024be:	4a08      	ldr	r2, [pc, #32]	@ (80024e0 <HAL_RCC_ClockConfig+0x2f0>)
 80024c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024c2:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <HAL_RCC_ClockConfig+0x2f4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe f86c 	bl	80005a4 <HAL_InitTick>
  
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3778      	adds	r7, #120	@ 0x78
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	0800262c 	.word	0x0800262c
 80024e0:	20000008 	.word	0x20000008
 80024e4:	2000000c 	.word	0x2000000c

080024e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b08b      	sub	sp, #44	@ 0x2c
 80024ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ee:	2300      	movs	r3, #0
 80024f0:	61fb      	str	r3, [r7, #28]
 80024f2:	2300      	movs	r3, #0
 80024f4:	61bb      	str	r3, [r7, #24]
 80024f6:	2300      	movs	r3, #0
 80024f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002502:	4b29      	ldr	r3, [pc, #164]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b04      	cmp	r3, #4
 8002510:	d002      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x30>
 8002512:	2b08      	cmp	r3, #8
 8002514:	d003      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0x36>
 8002516:	e03c      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002518:	4b24      	ldr	r3, [pc, #144]	@ (80025ac <HAL_RCC_GetSysClockFreq+0xc4>)
 800251a:	623b      	str	r3, [r7, #32]
      break;
 800251c:	e03c      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002524:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002528:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	fa92 f2a2 	rbit	r2, r2
 8002530:	607a      	str	r2, [r7, #4]
  return result;
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	fab2 f282 	clz	r2, r2
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	40d3      	lsrs	r3, r2
 800253c:	4a1c      	ldr	r2, [pc, #112]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800253e:	5cd3      	ldrb	r3, [r2, r3]
 8002540:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002542:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	220f      	movs	r2, #15
 800254c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	fa92 f2a2 	rbit	r2, r2
 8002554:	60fa      	str	r2, [r7, #12]
  return result;
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	fab2 f282 	clz	r2, r2
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	40d3      	lsrs	r3, r2
 8002560:	4a14      	ldr	r2, [pc, #80]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002562:	5cd3      	ldrb	r3, [r2, r3]
 8002564:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002570:	4a0e      	ldr	r2, [pc, #56]	@ (80025ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	fbb2 f2f3 	udiv	r2, r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	fb02 f303 	mul.w	r3, r2, r3
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002580:	e004      	b.n	800258c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	4a0c      	ldr	r2, [pc, #48]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258e:	623b      	str	r3, [r7, #32]
      break;
 8002590:	e002      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8002594:	623b      	str	r3, [r7, #32]
      break;
 8002596:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002598:	6a3b      	ldr	r3, [r7, #32]
}
 800259a:	4618      	mov	r0, r3
 800259c:	372c      	adds	r7, #44	@ 0x2c
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	007a1200 	.word	0x007a1200
 80025b0:	0800263c 	.word	0x0800263c
 80025b4:	0800264c 	.word	0x0800264c
 80025b8:	003d0900 	.word	0x003d0900

080025bc <memset>:
 80025bc:	4402      	add	r2, r0
 80025be:	4603      	mov	r3, r0
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d100      	bne.n	80025c6 <memset+0xa>
 80025c4:	4770      	bx	lr
 80025c6:	f803 1b01 	strb.w	r1, [r3], #1
 80025ca:	e7f9      	b.n	80025c0 <memset+0x4>

080025cc <__libc_init_array>:
 80025cc:	b570      	push	{r4, r5, r6, lr}
 80025ce:	4d0d      	ldr	r5, [pc, #52]	@ (8002604 <__libc_init_array+0x38>)
 80025d0:	4c0d      	ldr	r4, [pc, #52]	@ (8002608 <__libc_init_array+0x3c>)
 80025d2:	1b64      	subs	r4, r4, r5
 80025d4:	10a4      	asrs	r4, r4, #2
 80025d6:	2600      	movs	r6, #0
 80025d8:	42a6      	cmp	r6, r4
 80025da:	d109      	bne.n	80025f0 <__libc_init_array+0x24>
 80025dc:	4d0b      	ldr	r5, [pc, #44]	@ (800260c <__libc_init_array+0x40>)
 80025de:	4c0c      	ldr	r4, [pc, #48]	@ (8002610 <__libc_init_array+0x44>)
 80025e0:	f000 f818 	bl	8002614 <_init>
 80025e4:	1b64      	subs	r4, r4, r5
 80025e6:	10a4      	asrs	r4, r4, #2
 80025e8:	2600      	movs	r6, #0
 80025ea:	42a6      	cmp	r6, r4
 80025ec:	d105      	bne.n	80025fa <__libc_init_array+0x2e>
 80025ee:	bd70      	pop	{r4, r5, r6, pc}
 80025f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025f4:	4798      	blx	r3
 80025f6:	3601      	adds	r6, #1
 80025f8:	e7ee      	b.n	80025d8 <__libc_init_array+0xc>
 80025fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80025fe:	4798      	blx	r3
 8002600:	3601      	adds	r6, #1
 8002602:	e7f2      	b.n	80025ea <__libc_init_array+0x1e>
 8002604:	0800265c 	.word	0x0800265c
 8002608:	0800265c 	.word	0x0800265c
 800260c:	0800265c 	.word	0x0800265c
 8002610:	08002660 	.word	0x08002660

08002614 <_init>:
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	bf00      	nop
 8002618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261a:	bc08      	pop	{r3}
 800261c:	469e      	mov	lr, r3
 800261e:	4770      	bx	lr

08002620 <_fini>:
 8002620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002622:	bf00      	nop
 8002624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002626:	bc08      	pop	{r3}
 8002628:	469e      	mov	lr, r3
 800262a:	4770      	bx	lr

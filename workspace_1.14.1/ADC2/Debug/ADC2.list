
ADC2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800365c  0800365c  0001365c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003694  08003694  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003694  08003694  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003694  08003694  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003698  08003698  00013698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800369c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a654  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000175c  00000000  00000000  0002a6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007c8  00000000  00000000  0002be30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000607  00000000  00000000  0002c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f15f  00000000  00000000  0002cbff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b3b8  00000000  00000000  0004bd5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bca1e  00000000  00000000  00057116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001ee8  00000000  00000000  00113b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00115a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003644 	.word	0x08003644

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003644 	.word	0x08003644

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 80001cc:	f000 fa78 	bl	80006c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f807 	bl	80001e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f900 	bl	80003d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f8ce 	bl	8000378 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001dc:	f000 f85c 	bl	8000298 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e0:	e7fe      	b.n	80001e0 <main+0x18>

080001e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b096      	sub	sp, #88	; 0x58
 80001e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80001ec:	2228      	movs	r2, #40	; 0x28
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f003 f9fa 	bl	80035ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f6:	f107 031c 	add.w	r3, r7, #28
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]
 8000204:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000206:	463b      	mov	r3, r7
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
 8000214:	615a      	str	r2, [r3, #20]
 8000216:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000218:	2302      	movs	r3, #2
 800021a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021c:	2301      	movs	r3, #1
 800021e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000220:	2310      	movs	r3, #16
 8000222:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000224:	2302      	movs	r3, #2
 8000226:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000228:	2300      	movs	r3, #0
 800022a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800022c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000230:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000232:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000236:	4618      	mov	r0, r3
 8000238:	f001 fa94 	bl	8001764 <HAL_RCC_OscConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000242:	f000 f92f 	bl	80004a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000246:	230f      	movs	r3, #15
 8000248:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024a:	2302      	movs	r3, #2
 800024c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024e:	2300      	movs	r3, #0
 8000250:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000256:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025c:	f107 031c 	add.w	r3, r7, #28
 8000260:	2102      	movs	r1, #2
 8000262:	4618      	mov	r0, r3
 8000264:	f002 fabc 	bl	80027e0 <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800026e:	f000 f919 	bl	80004a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000272:	2380      	movs	r3, #128	; 0x80
 8000274:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800027a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800027c:	463b      	mov	r3, r7
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fce4 	bl	8002c4c <HAL_RCCEx_PeriphCLKConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0xac>
  {
    Error_Handler();
 800028a:	f000 f90b 	bl	80004a4 <Error_Handler>
  }
}
 800028e:	bf00      	nop
 8000290:	3758      	adds	r7, #88	; 0x58
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
	...

08000298 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b08a      	sub	sp, #40	; 0x28
 800029c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800029e:	f107 031c 	add.w	r3, r7, #28
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	611a      	str	r2, [r3, #16]
 80002b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002ba:	4b2e      	ldr	r3, [pc, #184]	; (8000374 <MX_ADC1_Init+0xdc>)
 80002bc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002c2:	4b2c      	ldr	r3, [pc, #176]	; (8000374 <MX_ADC1_Init+0xdc>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002c8:	4b2a      	ldr	r3, [pc, #168]	; (8000374 <MX_ADC1_Init+0xdc>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ce:	4b29      	ldr	r3, [pc, #164]	; (8000374 <MX_ADC1_Init+0xdc>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002d4:	4b27      	ldr	r3, [pc, #156]	; (8000374 <MX_ADC1_Init+0xdc>)
 80002d6:	2201      	movs	r2, #1
 80002d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002da:	4b26      	ldr	r3, [pc, #152]	; (8000374 <MX_ADC1_Init+0xdc>)
 80002dc:	2200      	movs	r2, #0
 80002de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002e2:	4b24      	ldr	r3, [pc, #144]	; (8000374 <MX_ADC1_Init+0xdc>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002e8:	4b22      	ldr	r3, [pc, #136]	; (8000374 <MX_ADC1_Init+0xdc>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002ee:	4b21      	ldr	r3, [pc, #132]	; (8000374 <MX_ADC1_Init+0xdc>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80002f4:	4b1f      	ldr	r3, [pc, #124]	; (8000374 <MX_ADC1_Init+0xdc>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002fa:	4b1e      	ldr	r3, [pc, #120]	; (8000374 <MX_ADC1_Init+0xdc>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000302:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <MX_ADC1_Init+0xdc>)
 8000304:	2204      	movs	r2, #4
 8000306:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000308:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <MX_ADC1_Init+0xdc>)
 800030a:	2200      	movs	r2, #0
 800030c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800030e:	4b19      	ldr	r3, [pc, #100]	; (8000374 <MX_ADC1_Init+0xdc>)
 8000310:	2200      	movs	r2, #0
 8000312:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000314:	4817      	ldr	r0, [pc, #92]	; (8000374 <MX_ADC1_Init+0xdc>)
 8000316:	f000 fa39 	bl	800078c <HAL_ADC_Init>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000320:	f000 f8c0 	bl	80004a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000324:	2300      	movs	r3, #0
 8000326:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000328:	f107 031c 	add.w	r3, r7, #28
 800032c:	4619      	mov	r1, r3
 800032e:	4811      	ldr	r0, [pc, #68]	; (8000374 <MX_ADC1_Init+0xdc>)
 8000330:	f000 fe7c 	bl	800102c <HAL_ADCEx_MultiModeConfigChannel>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800033a:	f000 f8b3 	bl	80004a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800033e:	2301      	movs	r3, #1
 8000340:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000342:	2301      	movs	r3, #1
 8000344:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800034a:	2300      	movs	r3, #0
 800034c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000352:	2300      	movs	r3, #0
 8000354:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4619      	mov	r1, r3
 800035a:	4806      	ldr	r0, [pc, #24]	; (8000374 <MX_ADC1_Init+0xdc>)
 800035c:	f000 fba8 	bl	8000ab0 <HAL_ADC_ConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000366:	f000 f89d 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800036a:	bf00      	nop
 800036c:	3728      	adds	r7, #40	; 0x28
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000028 	.word	0x20000028

08000378 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800037c:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 800037e:	4a15      	ldr	r2, [pc, #84]	; (80003d4 <MX_USART2_UART_Init+0x5c>)
 8000380:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000382:	4b13      	ldr	r3, [pc, #76]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 8000384:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000388:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 800039e:	220c      	movs	r2, #12
 80003a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_USART2_UART_Init+0x58>)
 80003bc:	f002 fd7c 	bl	8002eb8 <HAL_UART_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003c6:	f000 f86d 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	20000078 	.word	0x20000078
 80003d4:	40004400 	.word	0x40004400

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b08a      	sub	sp, #40	; 0x28
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 0314 	add.w	r3, r7, #20
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]
 80003ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ee:	4b2b      	ldr	r3, [pc, #172]	; (800049c <MX_GPIO_Init+0xc4>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	4a2a      	ldr	r2, [pc, #168]	; (800049c <MX_GPIO_Init+0xc4>)
 80003f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003f8:	6153      	str	r3, [r2, #20]
 80003fa:	4b28      	ldr	r3, [pc, #160]	; (800049c <MX_GPIO_Init+0xc4>)
 80003fc:	695b      	ldr	r3, [r3, #20]
 80003fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000402:	613b      	str	r3, [r7, #16]
 8000404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000406:	4b25      	ldr	r3, [pc, #148]	; (800049c <MX_GPIO_Init+0xc4>)
 8000408:	695b      	ldr	r3, [r3, #20]
 800040a:	4a24      	ldr	r2, [pc, #144]	; (800049c <MX_GPIO_Init+0xc4>)
 800040c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000410:	6153      	str	r3, [r2, #20]
 8000412:	4b22      	ldr	r3, [pc, #136]	; (800049c <MX_GPIO_Init+0xc4>)
 8000414:	695b      	ldr	r3, [r3, #20]
 8000416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b1f      	ldr	r3, [pc, #124]	; (800049c <MX_GPIO_Init+0xc4>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a1e      	ldr	r2, [pc, #120]	; (800049c <MX_GPIO_Init+0xc4>)
 8000424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000428:	6153      	str	r3, [r2, #20]
 800042a:	4b1c      	ldr	r3, [pc, #112]	; (800049c <MX_GPIO_Init+0xc4>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000436:	4b19      	ldr	r3, [pc, #100]	; (800049c <MX_GPIO_Init+0xc4>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a18      	ldr	r2, [pc, #96]	; (800049c <MX_GPIO_Init+0xc4>)
 800043c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b16      	ldr	r3, [pc, #88]	; (800049c <MX_GPIO_Init+0xc4>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2120      	movs	r1, #32
 8000452:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000456:	f001 f96d 	bl	8001734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800045a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000460:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	2300      	movs	r3, #0
 8000468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	4619      	mov	r1, r3
 8000470:	480b      	ldr	r0, [pc, #44]	; (80004a0 <MX_GPIO_Init+0xc8>)
 8000472:	f000 ffed 	bl	8001450 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000476:	2320      	movs	r3, #32
 8000478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047a:	2301      	movs	r3, #1
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047e:	2300      	movs	r3, #0
 8000480:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000482:	2300      	movs	r3, #0
 8000484:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000486:	f107 0314 	add.w	r3, r7, #20
 800048a:	4619      	mov	r1, r3
 800048c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000490:	f000 ffde 	bl	8001450 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000494:	bf00      	nop
 8000496:	3728      	adds	r7, #40	; 0x28
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40021000 	.word	0x40021000
 80004a0:	48000800 	.word	0x48000800

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
}
 80004aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ac:	e7fe      	b.n	80004ac <Error_Handler+0x8>
	...

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <HAL_MspInit+0x44>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a0e      	ldr	r2, [pc, #56]	; (80004f4 <HAL_MspInit+0x44>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <HAL_MspInit+0x44>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <HAL_MspInit+0x44>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a08      	ldr	r2, [pc, #32]	; (80004f4 <HAL_MspInit+0x44>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_MspInit+0x44>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004e6:	2007      	movs	r0, #7
 80004e8:	f000 ff7e 	bl	80013e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ec:	bf00      	nop
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40021000 	.word	0x40021000

080004f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	; 0x28
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000518:	d124      	bne.n	8000564 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800051a:	4b14      	ldr	r3, [pc, #80]	; (800056c <HAL_ADC_MspInit+0x74>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a13      	ldr	r2, [pc, #76]	; (800056c <HAL_ADC_MspInit+0x74>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b11      	ldr	r3, [pc, #68]	; (800056c <HAL_ADC_MspInit+0x74>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b0e      	ldr	r3, [pc, #56]	; (800056c <HAL_ADC_MspInit+0x74>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a0d      	ldr	r2, [pc, #52]	; (800056c <HAL_ADC_MspInit+0x74>)
 8000538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <HAL_ADC_MspInit+0x74>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800054a:	2301      	movs	r3, #1
 800054c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054e:	2303      	movs	r3, #3
 8000550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4619      	mov	r1, r3
 800055c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000560:	f000 ff76 	bl	8001450 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000564:	bf00      	nop
 8000566:	3728      	adds	r7, #40	; 0x28
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000

08000570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08a      	sub	sp, #40	; 0x28
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0314 	add.w	r3, r7, #20
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a17      	ldr	r2, [pc, #92]	; (80005ec <HAL_UART_MspInit+0x7c>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d128      	bne.n	80005e4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000592:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <HAL_UART_MspInit+0x80>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	4a16      	ldr	r2, [pc, #88]	; (80005f0 <HAL_UART_MspInit+0x80>)
 8000598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800059c:	61d3      	str	r3, [r2, #28]
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <HAL_UART_MspInit+0x80>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005aa:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <HAL_UART_MspInit+0x80>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a10      	ldr	r2, [pc, #64]	; (80005f0 <HAL_UART_MspInit+0x80>)
 80005b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_UART_MspInit+0x80>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005c2:	230c      	movs	r3, #12
 80005c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c6:	2302      	movs	r3, #2
 80005c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ce:	2303      	movs	r3, #3
 80005d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80005d2:	2307      	movs	r3, #7
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f000 ff36 	bl	8001450 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80005e4:	bf00      	nop
 80005e6:	3728      	adds	r7, #40	; 0x28
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40004400 	.word	0x40004400
 80005f0:	40021000 	.word	0x40021000

080005f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f8:	e7fe      	b.n	80005f8 <NMI_Handler+0x4>

080005fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fa:	b480      	push	{r7}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fe:	e7fe      	b.n	80005fe <HardFault_Handler+0x4>

08000600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000604:	e7fe      	b.n	8000604 <MemManage_Handler+0x4>

08000606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000606:	b480      	push	{r7}
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060a:	e7fe      	b.n	800060a <BusFault_Handler+0x4>

0800060c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <UsageFault_Handler+0x4>

08000612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062e:	b480      	push	{r7}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000632:	bf00      	nop
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr

0800063c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000640:	f000 f884 	bl	800074c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}

08000648 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <SystemInit+0x20>)
 800064e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000652:	4a05      	ldr	r2, [pc, #20]	; (8000668 <SystemInit+0x20>)
 8000654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800066c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006a4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000670:	f7ff ffea 	bl	8000648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000676:	490d      	ldr	r1, [pc, #52]	; (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <LoopForever+0xe>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800068c:	4c0a      	ldr	r4, [pc, #40]	; (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800069a:	f002 ffaf 	bl	80035fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800069e:	f7ff fd93 	bl	80001c8 <main>

080006a2 <LoopForever>:

LoopForever:
    b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006a4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b0:	0800369c 	.word	0x0800369c
  ldr r2, =_sbss
 80006b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006b8:	20000104 	.word	0x20000104

080006bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_2_IRQHandler>
	...

080006c0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <HAL_Init+0x28>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <HAL_Init+0x28>)
 80006ca:	f043 0310 	orr.w	r3, r3, #16
 80006ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 fe89 	bl	80013e8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f000 f808 	bl	80006ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006dc:	f7ff fee8 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e0:	2300      	movs	r3, #0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40022000 	.word	0x40022000

080006ec <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_InitTick+0x54>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_InitTick+0x58>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000702:	fbb3 f3f1 	udiv	r3, r3, r1
 8000706:	fbb2 f3f3 	udiv	r3, r2, r3
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fe93 	bl	8001436 <HAL_SYSTICK_Config>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	e00e      	b.n	8000738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b0f      	cmp	r3, #15
 800071e:	d80a      	bhi.n	8000736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000720:	2200      	movs	r2, #0
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	f04f 30ff 	mov.w	r0, #4294967295
 8000728:	f000 fe69 	bl	80013fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800072c:	4a06      	ldr	r2, [pc, #24]	; (8000748 <HAL_InitTick+0x5c>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000732:	2300      	movs	r3, #0
 8000734:	e000      	b.n	8000738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000736:	2301      	movs	r3, #1
}
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000000 	.word	0x20000000
 8000744:	20000008 	.word	0x20000008
 8000748:	20000004 	.word	0x20000004

0800074c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_IncTick+0x20>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <HAL_IncTick+0x24>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4413      	add	r3, r2
 800075c:	4a04      	ldr	r2, [pc, #16]	; (8000770 <HAL_IncTick+0x24>)
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000008 	.word	0x20000008
 8000770:	20000100 	.word	0x20000100

08000774 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;  
 8000778:	4b03      	ldr	r3, [pc, #12]	; (8000788 <HAL_GetTick+0x14>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	4618      	mov	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000100 	.word	0x20000100

0800078c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b09a      	sub	sp, #104	; 0x68
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000794:	2300      	movs	r3, #0
 8000796:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800079a:	2300      	movs	r3, #0
 800079c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80007a8:	2301      	movs	r3, #1
 80007aa:	e172      	b.n	8000a92 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	691b      	ldr	r3, [r3, #16]
 80007b0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b6:	f003 0310 	and.w	r3, r3, #16
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d176      	bne.n	80008ac <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d152      	bne.n	800086c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2200      	movs	r2, #0
 80007ca:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff fe89 	bl	80004f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d13b      	bne.n	800086c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 fcdf 	bl	80011b8 <ADC_Disable>
 80007fa:	4603      	mov	r3, r0
 80007fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	f003 0310 	and.w	r3, r3, #16
 8000808:	2b00      	cmp	r3, #0
 800080a:	d12f      	bne.n	800086c <HAL_ADC_Init+0xe0>
 800080c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000810:	2b00      	cmp	r3, #0
 8000812:	d12b      	bne.n	800086c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800081c:	f023 0302 	bic.w	r3, r3, #2
 8000820:	f043 0202 	orr.w	r2, r3, #2
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	689a      	ldr	r2, [r3, #8]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000836:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000846:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000848:	4b94      	ldr	r3, [pc, #592]	; (8000a9c <HAL_ADC_Init+0x310>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a94      	ldr	r2, [pc, #592]	; (8000aa0 <HAL_ADC_Init+0x314>)
 800084e:	fba2 2303 	umull	r2, r3, r2, r3
 8000852:	0c9a      	lsrs	r2, r3, #18
 8000854:	4613      	mov	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4413      	add	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800085e:	e002      	b.n	8000866 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	3b01      	subs	r3, #1
 8000864:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1f9      	bne.n	8000860 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	2b00      	cmp	r3, #0
 8000878:	d007      	beq.n	800088a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000888:	d110      	bne.n	80008ac <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f023 0312 	bic.w	r3, r3, #18
 8000892:	f043 0210 	orr.w	r2, r3, #16
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	f043 0201 	orr.w	r2, r3, #1
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	f003 0310 	and.w	r3, r3, #16
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	f040 80df 	bne.w	8000a78 <HAL_ADC_Init+0x2ec>
 80008ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80008be:	2b00      	cmp	r3, #0
 80008c0:	f040 80da 	bne.w	8000a78 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	f040 80d2 	bne.w	8000a78 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80008dc:	f043 0202 	orr.w	r2, r3, #2
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80008e4:	4b6f      	ldr	r3, [pc, #444]	; (8000aa4 <HAL_ADC_Init+0x318>)
 80008e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008f0:	d102      	bne.n	80008f8 <HAL_ADC_Init+0x16c>
 80008f2:	4b6d      	ldr	r3, [pc, #436]	; (8000aa8 <HAL_ADC_Init+0x31c>)
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	e002      	b.n	80008fe <HAL_ADC_Init+0x172>
 80008f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80008fc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	f003 0303 	and.w	r3, r3, #3
 8000908:	2b01      	cmp	r3, #1
 800090a:	d108      	bne.n	800091e <HAL_ADC_Init+0x192>
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	2b01      	cmp	r3, #1
 8000918:	d101      	bne.n	800091e <HAL_ADC_Init+0x192>
 800091a:	2301      	movs	r3, #1
 800091c:	e000      	b.n	8000920 <HAL_ADC_Init+0x194>
 800091e:	2300      	movs	r3, #0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d11c      	bne.n	800095e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000924:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000926:	2b00      	cmp	r3, #0
 8000928:	d010      	beq.n	800094c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f003 0303 	and.w	r3, r3, #3
 8000932:	2b01      	cmp	r3, #1
 8000934:	d107      	bne.n	8000946 <HAL_ADC_Init+0x1ba>
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f003 0301 	and.w	r3, r3, #1
 800093e:	2b01      	cmp	r3, #1
 8000940:	d101      	bne.n	8000946 <HAL_ADC_Init+0x1ba>
 8000942:	2301      	movs	r3, #1
 8000944:	e000      	b.n	8000948 <HAL_ADC_Init+0x1bc>
 8000946:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000948:	2b00      	cmp	r3, #0
 800094a:	d108      	bne.n	800095e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 800094c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	431a      	orrs	r2, r3
 800095a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800095c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7e5b      	ldrb	r3, [r3, #25]
 8000962:	035b      	lsls	r3, r3, #13
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000968:	2a01      	cmp	r2, #1
 800096a:	d002      	beq.n	8000972 <HAL_ADC_Init+0x1e6>
 800096c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000970:	e000      	b.n	8000974 <HAL_ADC_Init+0x1e8>
 8000972:	2200      	movs	r2, #0
 8000974:	431a      	orrs	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	431a      	orrs	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	4313      	orrs	r3, r2
 8000982:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000984:	4313      	orrs	r3, r2
 8000986:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d11b      	bne.n	80009ca <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	7e5b      	ldrb	r3, [r3, #25]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d109      	bne.n	80009ae <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099e:	3b01      	subs	r3, #1
 80009a0:	045a      	lsls	r2, r3, #17
 80009a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80009a4:	4313      	orrs	r3, r2
 80009a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009aa:	663b      	str	r3, [r7, #96]	; 0x60
 80009ac:	e00d      	b.n	80009ca <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80009b6:	f043 0220 	orr.w	r2, r3, #32
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f043 0201 	orr.w	r2, r3, #1
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d007      	beq.n	80009e2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009da:	4313      	orrs	r3, r2
 80009dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80009de:	4313      	orrs	r3, r2
 80009e0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f003 030c 	and.w	r3, r3, #12
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d114      	bne.n	8000a1a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	6812      	ldr	r2, [r2, #0]
 80009fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009fe:	f023 0302 	bic.w	r3, r3, #2
 8000a02:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	7e1b      	ldrb	r3, [r3, #24]
 8000a08:	039a      	lsls	r2, r3, #14
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4313      	orrs	r3, r2
 8000a14:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a16:	4313      	orrs	r3, r2
 8000a18:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	68da      	ldr	r2, [r3, #12]
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <HAL_ADC_Init+0x320>)
 8000a22:	4013      	ands	r3, r2
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	6812      	ldr	r2, [r2, #0]
 8000a28:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000a2a:	430b      	orrs	r3, r1
 8000a2c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	691b      	ldr	r3, [r3, #16]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d10c      	bne.n	8000a50 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3c:	f023 010f 	bic.w	r1, r3, #15
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	1e5a      	subs	r2, r3, #1
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	631a      	str	r2, [r3, #48]	; 0x30
 8000a4e:	e007      	b.n	8000a60 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f022 020f 	bic.w	r2, r2, #15
 8000a5e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2200      	movs	r2, #0
 8000a64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f023 0303 	bic.w	r3, r3, #3
 8000a6e:	f043 0201 	orr.w	r2, r3, #1
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	641a      	str	r2, [r3, #64]	; 0x40
 8000a76:	e00a      	b.n	8000a8e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	f023 0312 	bic.w	r3, r3, #18
 8000a80:	f043 0210 	orr.w	r2, r3, #16
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000a8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3768      	adds	r7, #104	; 0x68
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	431bde83 	.word	0x431bde83
 8000aa4:	50000300 	.word	0x50000300
 8000aa8:	50000100 	.word	0x50000100
 8000aac:	fff0c007 	.word	0xfff0c007

08000ab0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b09b      	sub	sp, #108	; 0x6c
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d101      	bne.n	8000ad2 <HAL_ADC_ConfigChannel+0x22>
 8000ace:	2302      	movs	r3, #2
 8000ad0:	e2a1      	b.n	8001016 <HAL_ADC_ConfigChannel+0x566>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	f040 8285 	bne.w	8000ff4 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	d81c      	bhi.n	8000b2c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	4613      	mov	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	4413      	add	r3, r2
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	461a      	mov	r2, r3
 8000b06:	231f      	movs	r3, #31
 8000b08:	4093      	lsls	r3, r2
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	4019      	ands	r1, r3
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	6818      	ldr	r0, [r3, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685a      	ldr	r2, [r3, #4]
 8000b16:	4613      	mov	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	4413      	add	r3, r2
 8000b1c:	005b      	lsls	r3, r3, #1
 8000b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	430a      	orrs	r2, r1
 8000b28:	631a      	str	r2, [r3, #48]	; 0x30
 8000b2a:	e063      	b.n	8000bf4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	2b09      	cmp	r3, #9
 8000b32:	d81e      	bhi.n	8000b72 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4413      	add	r3, r2
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	3b1e      	subs	r3, #30
 8000b48:	221f      	movs	r2, #31
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43db      	mvns	r3, r3
 8000b50:	4019      	ands	r1, r3
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	6818      	ldr	r0, [r3, #0]
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	3b1e      	subs	r3, #30
 8000b64:	fa00 f203 	lsl.w	r2, r0, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	635a      	str	r2, [r3, #52]	; 0x34
 8000b70:	e040      	b.n	8000bf4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	2b0e      	cmp	r3, #14
 8000b78:	d81e      	bhi.n	8000bb8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	4613      	mov	r3, r2
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	4413      	add	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	3b3c      	subs	r3, #60	; 0x3c
 8000b8e:	221f      	movs	r2, #31
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	4019      	ands	r1, r3
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	6818      	ldr	r0, [r3, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685a      	ldr	r2, [r3, #4]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	3b3c      	subs	r3, #60	; 0x3c
 8000baa:	fa00 f203 	lsl.w	r2, r0, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	639a      	str	r2, [r3, #56]	; 0x38
 8000bb6:	e01d      	b.n	8000bf4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	3b5a      	subs	r3, #90	; 0x5a
 8000bcc:	221f      	movs	r2, #31
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	4019      	ands	r1, r3
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	4613      	mov	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	3b5a      	subs	r3, #90	; 0x5a
 8000be8:	fa00 f203 	lsl.w	r2, r0, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	430a      	orrs	r2, r1
 8000bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	f003 030c 	and.w	r3, r3, #12
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f040 80e5 	bne.w	8000dce <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2b09      	cmp	r3, #9
 8000c0a:	d91c      	bls.n	8000c46 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	6999      	ldr	r1, [r3, #24]
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	3b1e      	subs	r3, #30
 8000c1e:	2207      	movs	r2, #7
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	4019      	ands	r1, r3
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	6898      	ldr	r0, [r3, #8]
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4613      	mov	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	4413      	add	r3, r2
 8000c36:	3b1e      	subs	r3, #30
 8000c38:	fa00 f203 	lsl.w	r2, r0, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	430a      	orrs	r2, r1
 8000c42:	619a      	str	r2, [r3, #24]
 8000c44:	e019      	b.n	8000c7a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6959      	ldr	r1, [r3, #20]
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4613      	mov	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4413      	add	r3, r2
 8000c56:	2207      	movs	r2, #7
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	4019      	ands	r1, r3
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	6898      	ldr	r0, [r3, #8]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	fa00 f203 	lsl.w	r2, r0, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	430a      	orrs	r2, r1
 8000c78:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	695a      	ldr	r2, [r3, #20]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	f003 0303 	and.w	r3, r3, #3
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	2b03      	cmp	r3, #3
 8000c9a:	d84f      	bhi.n	8000d3c <HAL_ADC_ConfigChannel+0x28c>
 8000c9c:	a201      	add	r2, pc, #4	; (adr r2, 8000ca4 <HAL_ADC_ConfigChannel+0x1f4>)
 8000c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca2:	bf00      	nop
 8000ca4:	08000cb5 	.word	0x08000cb5
 8000ca8:	08000cd7 	.word	0x08000cd7
 8000cac:	08000cf9 	.word	0x08000cf9
 8000cb0:	08000d1b 	.word	0x08000d1b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cba:	4b9c      	ldr	r3, [pc, #624]	; (8000f2c <HAL_ADC_ConfigChannel+0x47c>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	6812      	ldr	r2, [r2, #0]
 8000cc2:	0691      	lsls	r1, r2, #26
 8000cc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000cd2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000cd4:	e07b      	b.n	8000dce <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000cdc:	4b93      	ldr	r3, [pc, #588]	; (8000f2c <HAL_ADC_ConfigChannel+0x47c>)
 8000cde:	4013      	ands	r3, r2
 8000ce0:	683a      	ldr	r2, [r7, #0]
 8000ce2:	6812      	ldr	r2, [r2, #0]
 8000ce4:	0691      	lsls	r1, r2, #26
 8000ce6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	431a      	orrs	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000cf4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000cf6:	e06a      	b.n	8000dce <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000cfe:	4b8b      	ldr	r3, [pc, #556]	; (8000f2c <HAL_ADC_ConfigChannel+0x47c>)
 8000d00:	4013      	ands	r3, r2
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	6812      	ldr	r2, [r2, #0]
 8000d06:	0691      	lsls	r1, r2, #26
 8000d08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000d16:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000d18:	e059      	b.n	8000dce <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000d20:	4b82      	ldr	r3, [pc, #520]	; (8000f2c <HAL_ADC_ConfigChannel+0x47c>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	683a      	ldr	r2, [r7, #0]
 8000d26:	6812      	ldr	r2, [r2, #0]
 8000d28:	0691      	lsls	r1, r2, #26
 8000d2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000d38:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000d3a:	e048      	b.n	8000dce <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	069b      	lsls	r3, r3, #26
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d107      	bne.n	8000d60 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000d5e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000d66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	069b      	lsls	r3, r3, #26
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d107      	bne.n	8000d84 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000d82:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000d8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	069b      	lsls	r3, r3, #26
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d107      	bne.n	8000da8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000da6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000dae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	069b      	lsls	r3, r3, #26
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d107      	bne.n	8000dcc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000dca:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000dcc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d108      	bne.n	8000dee <HAL_ADC_ConfigChannel+0x33e>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d101      	bne.n	8000dee <HAL_ADC_ConfigChannel+0x33e>
 8000dea:	2301      	movs	r3, #1
 8000dec:	e000      	b.n	8000df0 <HAL_ADC_ConfigChannel+0x340>
 8000dee:	2300      	movs	r3, #0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	f040 810a 	bne.w	800100a <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d00f      	beq.n	8000e1e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43da      	mvns	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	400a      	ands	r2, r1
 8000e18:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000e1c:	e049      	b.n	8000eb2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	430a      	orrs	r2, r1
 8000e34:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b09      	cmp	r3, #9
 8000e3e:	d91c      	bls.n	8000e7a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6999      	ldr	r1, [r3, #24]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	3b1b      	subs	r3, #27
 8000e52:	2207      	movs	r2, #7
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	4019      	ands	r1, r3
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	6898      	ldr	r0, [r3, #8]
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4613      	mov	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	4413      	add	r3, r2
 8000e6a:	3b1b      	subs	r3, #27
 8000e6c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	430a      	orrs	r2, r1
 8000e76:	619a      	str	r2, [r3, #24]
 8000e78:	e01b      	b.n	8000eb2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	6959      	ldr	r1, [r3, #20]
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	1c5a      	adds	r2, r3, #1
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	4019      	ands	r1, r3
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	6898      	ldr	r0, [r3, #8]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000eb2:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <HAL_ADC_ConfigChannel+0x480>)
 8000eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b10      	cmp	r3, #16
 8000ebc:	d105      	bne.n	8000eca <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000ebe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d015      	beq.n	8000ef6 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000ece:	2b11      	cmp	r3, #17
 8000ed0:	d105      	bne.n	8000ede <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00b      	beq.n	8000ef6 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000ee2:	2b12      	cmp	r3, #18
 8000ee4:	f040 8091 	bne.w	800100a <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f040 808a 	bne.w	800100a <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000efe:	d102      	bne.n	8000f06 <HAL_ADC_ConfigChannel+0x456>
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_ADC_ConfigChannel+0x484>)
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	e002      	b.n	8000f0c <HAL_ADC_ConfigChannel+0x45c>
 8000f06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f0a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d10e      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x488>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d107      	bne.n	8000f38 <HAL_ADC_ConfigChannel+0x488>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e006      	b.n	8000f3a <HAL_ADC_ConfigChannel+0x48a>
 8000f2c:	83fff000 	.word	0x83fff000
 8000f30:	50000300 	.word	0x50000300
 8000f34:	50000100 	.word	0x50000100
 8000f38:	2300      	movs	r3, #0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d150      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f3e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d010      	beq.n	8000f66 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d107      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x4b0>
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0301 	and.w	r3, r3, #1
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x4b0>
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e000      	b.n	8000f62 <HAL_ADC_ConfigChannel+0x4b2>
 8000f60:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d13c      	bne.n	8000fe0 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b10      	cmp	r3, #16
 8000f6c:	d11d      	bne.n	8000faa <HAL_ADC_ConfigChannel+0x4fa>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f76:	d118      	bne.n	8000faa <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000f80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f82:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f84:	4b27      	ldr	r3, [pc, #156]	; (8001024 <HAL_ADC_ConfigChannel+0x574>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a27      	ldr	r2, [pc, #156]	; (8001028 <HAL_ADC_ConfigChannel+0x578>)
 8000f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8e:	0c9a      	lsrs	r2, r3, #18
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f9a:	e002      	b.n	8000fa2 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1f9      	bne.n	8000f9c <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000fa8:	e02e      	b.n	8001008 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b11      	cmp	r3, #17
 8000fb0:	d10b      	bne.n	8000fca <HAL_ADC_ConfigChannel+0x51a>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fba:	d106      	bne.n	8000fca <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000fc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fc6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000fc8:	e01e      	b.n	8001008 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b12      	cmp	r3, #18
 8000fd0:	d11a      	bne.n	8001008 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fdc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000fde:	e013      	b.n	8001008 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f043 0220 	orr.w	r2, r3, #32
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000ff2:	e00a      	b.n	800100a <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f043 0220 	orr.w	r2, r3, #32
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001000:	2301      	movs	r3, #1
 8001002:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001006:	e000      	b.n	800100a <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001008:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001012:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001016:	4618      	mov	r0, r3
 8001018:	376c      	adds	r7, #108	; 0x6c
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000000 	.word	0x20000000
 8001028:	431bde83 	.word	0x431bde83

0800102c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800102c:	b480      	push	{r7}
 800102e:	b099      	sub	sp, #100	; 0x64
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001044:	d102      	bne.n	800104c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001046:	4b5a      	ldr	r3, [pc, #360]	; (80011b0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	e002      	b.n	8001052 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800104c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001050:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e0a2      	b.n	80011a2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001066:	2302      	movs	r3, #2
 8001068:	e09b      	b.n	80011a2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b00      	cmp	r3, #0
 800107e:	d17f      	bne.n	8001180 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	2b00      	cmp	r3, #0
 800108a:	d179      	bne.n	8001180 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800108c:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800108e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d040      	beq.n	800111a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001098:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	6859      	ldr	r1, [r3, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010aa:	035b      	lsls	r3, r3, #13
 80010ac:	430b      	orrs	r3, r1
 80010ae:	431a      	orrs	r2, r3
 80010b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010b2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d108      	bne.n	80010d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d101      	bne.n	80010d4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e000      	b.n	80010d6 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80010d4:	2300      	movs	r3, #0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d15c      	bne.n	8001194 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d107      	bne.n	80010f6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d101      	bne.n	80010f6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80010f6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d14b      	bne.n	8001194 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80010fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001104:	f023 030f 	bic.w	r3, r3, #15
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	6811      	ldr	r1, [r2, #0]
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	6892      	ldr	r2, [r2, #8]
 8001110:	430a      	orrs	r2, r1
 8001112:	431a      	orrs	r2, r3
 8001114:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001116:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001118:	e03c      	b.n	8001194 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800111a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001122:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001124:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 0303 	and.w	r3, r3, #3
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b01      	cmp	r3, #1
 8001140:	d101      	bne.n	8001146 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001146:	2300      	movs	r3, #0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d123      	bne.n	8001194 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	2b01      	cmp	r3, #1
 8001156:	d107      	bne.n	8001168 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001164:	2301      	movs	r3, #1
 8001166:	e000      	b.n	800116a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001168:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800116a:	2b00      	cmp	r3, #0
 800116c:	d112      	bne.n	8001194 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800116e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001176:	f023 030f 	bic.w	r3, r3, #15
 800117a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800117c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800117e:	e009      	b.n	8001194 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f043 0220 	orr.w	r2, r3, #32
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001192:	e000      	b.n	8001196 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001194:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800119e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80011a2:	4618      	mov	r0, r3
 80011a4:	3764      	adds	r7, #100	; 0x64
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	50000100 	.word	0x50000100
 80011b4:	50000300 	.word	0x50000300

080011b8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d108      	bne.n	80011e4 <ADC_Disable+0x2c>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d101      	bne.n	80011e4 <ADC_Disable+0x2c>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <ADC_Disable+0x2e>
 80011e4:	2300      	movs	r3, #0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d047      	beq.n	800127a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 030d 	and.w	r3, r3, #13
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d10f      	bne.n	8001218 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0202 	orr.w	r2, r2, #2
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2203      	movs	r2, #3
 800120e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001210:	f7ff fab0 	bl	8000774 <HAL_GetTick>
 8001214:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001216:	e029      	b.n	800126c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f043 0210 	orr.w	r2, r3, #16
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001228:	f043 0201 	orr.w	r2, r3, #1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e023      	b.n	800127c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001234:	f7ff fa9e 	bl	8000774 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d914      	bls.n	800126c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b01      	cmp	r3, #1
 800124e:	d10d      	bne.n	800126c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f043 0210 	orr.w	r2, r3, #16
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001260:	f043 0201 	orr.w	r2, r3, #1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e007      	b.n	800127c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b01      	cmp	r3, #1
 8001278:	d0dc      	beq.n	8001234 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	; (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b4:	d301      	bcc.n	80013ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00f      	b.n	80013da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ba:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <SysTick_Config+0x40>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013c2:	210f      	movs	r1, #15
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f7ff ff8e 	bl	80012e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <SysTick_Config+0x40>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <SysTick_Config+0x40>)
 80013d4:	2207      	movs	r2, #7
 80013d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	e000e010 	.word	0xe000e010

080013e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff47 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b086      	sub	sp, #24
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001410:	f7ff ff5c 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001414:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	6978      	ldr	r0, [r7, #20]
 800141c:	f7ff ff8e 	bl	800133c <NVIC_EncodePriority>
 8001420:	4602      	mov	r2, r0
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff5d 	bl	80012e8 <__NVIC_SetPriority>
}
 800142e:	bf00      	nop
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffb0 	bl	80013a4 <SysTick_Config>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001450:	b480      	push	{r7}
 8001452:	b087      	sub	sp, #28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145e:	e14e      	b.n	80016fe <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2101      	movs	r1, #1
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	4013      	ands	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 8140 	beq.w	80016f8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b01      	cmp	r3, #1
 8001482:	d005      	beq.n	8001490 <HAL_GPIO_Init+0x40>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d130      	bne.n	80014f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	2203      	movs	r2, #3
 800149c:	fa02 f303 	lsl.w	r3, r2, r3
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c6:	2201      	movs	r2, #1
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	f003 0201 	and.w	r2, r3, #1
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d017      	beq.n	800152e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d123      	bne.n	8001582 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	08da      	lsrs	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3208      	adds	r2, #8
 8001542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001546:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	691a      	ldr	r2, [r3, #16]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	08da      	lsrs	r2, r3, #3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3208      	adds	r2, #8
 800157c:	6939      	ldr	r1, [r7, #16]
 800157e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	2203      	movs	r2, #3
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 0203 	and.w	r2, r3, #3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 809a 	beq.w	80016f8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c4:	4b55      	ldr	r3, [pc, #340]	; (800171c <HAL_GPIO_Init+0x2cc>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a54      	ldr	r2, [pc, #336]	; (800171c <HAL_GPIO_Init+0x2cc>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b52      	ldr	r3, [pc, #328]	; (800171c <HAL_GPIO_Init+0x2cc>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015dc:	4a50      	ldr	r2, [pc, #320]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	089b      	lsrs	r3, r3, #2
 80015e2:	3302      	adds	r3, #2
 80015e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	220f      	movs	r2, #15
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001606:	d013      	beq.n	8001630 <HAL_GPIO_Init+0x1e0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a46      	ldr	r2, [pc, #280]	; (8001724 <HAL_GPIO_Init+0x2d4>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d00d      	beq.n	800162c <HAL_GPIO_Init+0x1dc>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4a45      	ldr	r2, [pc, #276]	; (8001728 <HAL_GPIO_Init+0x2d8>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d007      	beq.n	8001628 <HAL_GPIO_Init+0x1d8>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a44      	ldr	r2, [pc, #272]	; (800172c <HAL_GPIO_Init+0x2dc>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d101      	bne.n	8001624 <HAL_GPIO_Init+0x1d4>
 8001620:	2303      	movs	r3, #3
 8001622:	e006      	b.n	8001632 <HAL_GPIO_Init+0x1e2>
 8001624:	2305      	movs	r3, #5
 8001626:	e004      	b.n	8001632 <HAL_GPIO_Init+0x1e2>
 8001628:	2302      	movs	r3, #2
 800162a:	e002      	b.n	8001632 <HAL_GPIO_Init+0x1e2>
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_GPIO_Init+0x1e2>
 8001630:	2300      	movs	r3, #0
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	f002 0203 	and.w	r2, r2, #3
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	4093      	lsls	r3, r2
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001642:	4937      	ldr	r1, [pc, #220]	; (8001720 <HAL_GPIO_Init+0x2d0>)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	089b      	lsrs	r3, r3, #2
 8001648:	3302      	adds	r3, #2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001650:	4b37      	ldr	r3, [pc, #220]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001674:	4a2e      	ldr	r2, [pc, #184]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800167a:	4b2d      	ldr	r3, [pc, #180]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800169e:	4a24      	ldr	r2, [pc, #144]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016c8:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <HAL_GPIO_Init+0x2e0>)
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	3301      	adds	r3, #1
 80016fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	fa22 f303 	lsr.w	r3, r2, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	f47f aea9 	bne.w	8001460 <HAL_GPIO_Init+0x10>
  }
}
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	40021000 	.word	0x40021000
 8001720:	40010000 	.word	0x40010000
 8001724:	48000400 	.word	0x48000400
 8001728:	48000800 	.word	0x48000800
 800172c:	48000c00 	.word	0x48000c00
 8001730:	40010400 	.word	0x40010400

08001734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	807b      	strh	r3, [r7, #2]
 8001740:	4613      	mov	r3, r2
 8001742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001744:	787b      	ldrb	r3, [r7, #1]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800174a:	887a      	ldrh	r2, [r7, #2]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001750:	e002      	b.n	8001758 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800176a:	af00      	add	r7, sp, #0
 800176c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001770:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001774:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800177a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	f001 b823 	b.w	80027d0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800178a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 817d 	beq.w	8001a9a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017a0:	4bbc      	ldr	r3, [pc, #752]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d00c      	beq.n	80017c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017ac:	4bb9      	ldr	r3, [pc, #740]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f003 030c 	and.w	r3, r3, #12
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d15c      	bne.n	8001872 <HAL_RCC_OscConfig+0x10e>
 80017b8:	4bb6      	ldr	r3, [pc, #728]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c4:	d155      	bne.n	8001872 <HAL_RCC_OscConfig+0x10e>
 80017c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ca:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80017d2:	fa93 f3a3 	rbit	r3, r3
 80017d6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017de:	fab3 f383 	clz	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	095b      	lsrs	r3, r3, #5
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d102      	bne.n	80017f8 <HAL_RCC_OscConfig+0x94>
 80017f2:	4ba8      	ldr	r3, [pc, #672]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	e015      	b.n	8001824 <HAL_RCC_OscConfig+0xc0>
 80017f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017fc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001800:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001804:	fa93 f3a3 	rbit	r3, r3
 8001808:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800180c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001810:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001814:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001818:	fa93 f3a3 	rbit	r3, r3
 800181c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001820:	4b9c      	ldr	r3, [pc, #624]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001828:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800182c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001830:	fa92 f2a2 	rbit	r2, r2
 8001834:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001838:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800183c:	fab2 f282 	clz	r2, r2
 8001840:	b2d2      	uxtb	r2, r2
 8001842:	f042 0220 	orr.w	r2, r2, #32
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	f002 021f 	and.w	r2, r2, #31
 800184c:	2101      	movs	r1, #1
 800184e:	fa01 f202 	lsl.w	r2, r1, r2
 8001852:	4013      	ands	r3, r2
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 811f 	beq.w	8001a98 <HAL_RCC_OscConfig+0x334>
 800185a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f040 8116 	bne.w	8001a98 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	f000 bfaf 	b.w	80027d0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001876:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001882:	d106      	bne.n	8001892 <HAL_RCC_OscConfig+0x12e>
 8001884:	4b83      	ldr	r3, [pc, #524]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a82      	ldr	r2, [pc, #520]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 800188a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e036      	b.n	8001900 <HAL_RCC_OscConfig+0x19c>
 8001892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001896:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x158>
 80018a2:	4b7c      	ldr	r3, [pc, #496]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a7b      	ldr	r2, [pc, #492]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a78      	ldr	r2, [pc, #480]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e021      	b.n	8001900 <HAL_RCC_OscConfig+0x19c>
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018cc:	d10c      	bne.n	80018e8 <HAL_RCC_OscConfig+0x184>
 80018ce:	4b71      	ldr	r3, [pc, #452]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a70      	ldr	r2, [pc, #448]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	4b6e      	ldr	r3, [pc, #440]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a6d      	ldr	r2, [pc, #436]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	e00b      	b.n	8001900 <HAL_RCC_OscConfig+0x19c>
 80018e8:	4b6a      	ldr	r3, [pc, #424]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a69      	ldr	r2, [pc, #420]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b67      	ldr	r3, [pc, #412]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a66      	ldr	r2, [pc, #408]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80018fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001900:	4b64      	ldr	r3, [pc, #400]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	f023 020f 	bic.w	r2, r3, #15
 8001908:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	495f      	ldr	r1, [pc, #380]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001916:	4313      	orrs	r3, r2
 8001918:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800191a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d059      	beq.n	80019de <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192a:	f7fe ff23 	bl	8000774 <HAL_GetTick>
 800192e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	e00a      	b.n	800194a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001934:	f7fe ff1e 	bl	8000774 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b64      	cmp	r3, #100	; 0x64
 8001942:	d902      	bls.n	800194a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	f000 bf43 	b.w	80027d0 <HAL_RCC_OscConfig+0x106c>
 800194a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800194e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001952:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800195e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	095b      	lsrs	r3, r3, #5
 800196a:	b2db      	uxtb	r3, r3
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b01      	cmp	r3, #1
 8001974:	d102      	bne.n	800197c <HAL_RCC_OscConfig+0x218>
 8001976:	4b47      	ldr	r3, [pc, #284]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	e015      	b.n	80019a8 <HAL_RCC_OscConfig+0x244>
 800197c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001980:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001988:	fa93 f3a3 	rbit	r3, r3
 800198c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001994:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001998:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80019a4:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ac:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80019b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019b4:	fa92 f2a2 	rbit	r2, r2
 80019b8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80019bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80019c0:	fab2 f282 	clz	r2, r2
 80019c4:	b2d2      	uxtb	r2, r2
 80019c6:	f042 0220 	orr.w	r2, r2, #32
 80019ca:	b2d2      	uxtb	r2, r2
 80019cc:	f002 021f 	and.w	r2, r2, #31
 80019d0:	2101      	movs	r1, #1
 80019d2:	fa01 f202 	lsl.w	r2, r1, r2
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0ab      	beq.n	8001934 <HAL_RCC_OscConfig+0x1d0>
 80019dc:	e05d      	b.n	8001a9a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7fe fec9 	bl	8000774 <HAL_GetTick>
 80019e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e6:	e00a      	b.n	80019fe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e8:	f7fe fec4 	bl	8000774 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b64      	cmp	r3, #100	; 0x64
 80019f6:	d902      	bls.n	80019fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	f000 bee9 	b.w	80027d0 <HAL_RCC_OscConfig+0x106c>
 80019fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a02:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001a12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	095b      	lsrs	r3, r3, #5
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d102      	bne.n	8001a30 <HAL_RCC_OscConfig+0x2cc>
 8001a2a:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	e015      	b.n	8001a5c <HAL_RCC_OscConfig+0x2f8>
 8001a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a34:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a38:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001a3c:	fa93 f3a3 	rbit	r3, r3
 8001a40:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a48:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a4c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001a50:	fa93 f3a3 	rbit	r3, r3
 8001a54:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001a58:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_RCC_OscConfig+0x330>)
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a60:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001a64:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a68:	fa92 f2a2 	rbit	r2, r2
 8001a6c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001a70:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001a74:	fab2 f282 	clz	r2, r2
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	f042 0220 	orr.w	r2, r2, #32
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	f002 021f 	and.w	r2, r2, #31
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ab      	bne.n	80019e8 <HAL_RCC_OscConfig+0x284>
 8001a90:	e003      	b.n	8001a9a <HAL_RCC_OscConfig+0x336>
 8001a92:	bf00      	nop
 8001a94:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 817d 	beq.w	8001daa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ab0:	4ba6      	ldr	r3, [pc, #664]	; (8001d4c <HAL_RCC_OscConfig+0x5e8>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d00b      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001abc:	4ba3      	ldr	r3, [pc, #652]	; (8001d4c <HAL_RCC_OscConfig+0x5e8>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d172      	bne.n	8001bae <HAL_RCC_OscConfig+0x44a>
 8001ac8:	4ba0      	ldr	r3, [pc, #640]	; (8001d4c <HAL_RCC_OscConfig+0x5e8>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d16c      	bne.n	8001bae <HAL_RCC_OscConfig+0x44a>
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001ae6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aea:	fab3 f383 	clz	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	095b      	lsrs	r3, r3, #5
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d102      	bne.n	8001b04 <HAL_RCC_OscConfig+0x3a0>
 8001afe:	4b93      	ldr	r3, [pc, #588]	; (8001d4c <HAL_RCC_OscConfig+0x5e8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	e013      	b.n	8001b2c <HAL_RCC_OscConfig+0x3c8>
 8001b04:	2302      	movs	r3, #2
 8001b06:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b16:	2302      	movs	r3, #2
 8001b18:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b1c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b20:	fa93 f3a3 	rbit	r3, r3
 8001b24:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b28:	4b88      	ldr	r3, [pc, #544]	; (8001d4c <HAL_RCC_OscConfig+0x5e8>)
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b32:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b36:	fa92 f2a2 	rbit	r2, r2
 8001b3a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001b3e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001b42:	fab2 f282 	clz	r2, r2
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	f042 0220 	orr.w	r2, r2, #32
 8001b4c:	b2d2      	uxtb	r2, r2
 8001b4e:	f002 021f 	and.w	r2, r2, #31
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f202 	lsl.w	r2, r1, r2
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00a      	beq.n	8001b74 <HAL_RCC_OscConfig+0x410>
 8001b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d002      	beq.n	8001b74 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f000 be2e 	b.w	80027d0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b74:	4b75      	ldr	r3, [pc, #468]	; (8001d4c <HAL_RCC_OscConfig+0x5e8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	21f8      	movs	r1, #248	; 0xf8
 8001b8a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b92:	fa91 f1a1 	rbit	r1, r1
 8001b96:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001b9a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001b9e:	fab1 f181 	clz	r1, r1
 8001ba2:	b2c9      	uxtb	r1, r1
 8001ba4:	408b      	lsls	r3, r1
 8001ba6:	4969      	ldr	r1, [pc, #420]	; (8001d4c <HAL_RCC_OscConfig+0x5e8>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bac:	e0fd      	b.n	8001daa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 8088 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x56c>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001bd2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd6:	fab3 f383 	clz	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001be0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	461a      	mov	r2, r3
 8001be8:	2301      	movs	r3, #1
 8001bea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7fe fdc2 	bl	8000774 <HAL_GetTick>
 8001bf0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bf6:	f7fe fdbd 	bl	8000774 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d902      	bls.n	8001c0c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	f000 bde2 	b.w	80027d0 <HAL_RCC_OscConfig+0x106c>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001c1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	095b      	lsrs	r3, r3, #5
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d102      	bne.n	8001c3c <HAL_RCC_OscConfig+0x4d8>
 8001c36:	4b45      	ldr	r3, [pc, #276]	; (8001d4c <HAL_RCC_OscConfig+0x5e8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	e013      	b.n	8001c64 <HAL_RCC_OscConfig+0x500>
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c46:	fa93 f3a3 	rbit	r3, r3
 8001c4a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c4e:	2302      	movs	r3, #2
 8001c50:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c54:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001c60:	4b3a      	ldr	r3, [pc, #232]	; (8001d4c <HAL_RCC_OscConfig+0x5e8>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	2202      	movs	r2, #2
 8001c66:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001c6a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c6e:	fa92 f2a2 	rbit	r2, r2
 8001c72:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001c76:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001c7a:	fab2 f282 	clz	r2, r2
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f042 0220 	orr.w	r2, r2, #32
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	f002 021f 	and.w	r2, r2, #31
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0af      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_RCC_OscConfig+0x5e8>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	21f8      	movs	r1, #248	; 0xf8
 8001cac:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001cb4:	fa91 f1a1 	rbit	r1, r1
 8001cb8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001cbc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001cc0:	fab1 f181 	clz	r1, r1
 8001cc4:	b2c9      	uxtb	r1, r1
 8001cc6:	408b      	lsls	r3, r1
 8001cc8:	4920      	ldr	r1, [pc, #128]	; (8001d4c <HAL_RCC_OscConfig+0x5e8>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]
 8001cce:	e06c      	b.n	8001daa <HAL_RCC_OscConfig+0x646>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001cda:	fa93 f3a3 	rbit	r3, r3
 8001cde:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001ce2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cf0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7fe fd3a 	bl	8000774 <HAL_GetTick>
 8001d00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d04:	e00a      	b.n	8001d1c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d06:	f7fe fd35 	bl	8000774 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d902      	bls.n	8001d1c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	f000 bd5a 	b.w	80027d0 <HAL_RCC_OscConfig+0x106c>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	095b      	lsrs	r3, r3, #5
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d104      	bne.n	8001d50 <HAL_RCC_OscConfig+0x5ec>
 8001d46:	4b01      	ldr	r3, [pc, #4]	; (8001d4c <HAL_RCC_OscConfig+0x5e8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	e015      	b.n	8001d78 <HAL_RCC_OscConfig+0x614>
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	2302      	movs	r3, #2
 8001d52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d62:	2302      	movs	r3, #2
 8001d64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d6c:	fa93 f3a3 	rbit	r3, r3
 8001d70:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001d74:	4bc8      	ldr	r3, [pc, #800]	; (8002098 <HAL_RCC_OscConfig+0x934>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d78:	2202      	movs	r2, #2
 8001d7a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001d7e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d82:	fa92 f2a2 	rbit	r2, r2
 8001d86:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001d8a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d8e:	fab2 f282 	clz	r2, r2
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	f042 0220 	orr.w	r2, r2, #32
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	f002 021f 	and.w	r2, r2, #31
 8001d9e:	2101      	movs	r1, #1
 8001da0:	fa01 f202 	lsl.w	r2, r1, r2
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1ad      	bne.n	8001d06 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0308 	and.w	r3, r3, #8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 8110 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d079      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x760>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001de2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	461a      	mov	r2, r3
 8001dee:	4bab      	ldr	r3, [pc, #684]	; (800209c <HAL_RCC_OscConfig+0x938>)
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	461a      	mov	r2, r3
 8001df6:	2301      	movs	r3, #1
 8001df8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfa:	f7fe fcbb 	bl	8000774 <HAL_GetTick>
 8001dfe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e02:	e00a      	b.n	8001e1a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e04:	f7fe fcb6 	bl	8000774 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d902      	bls.n	8001e1a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	f000 bcdb 	b.w	80027d0 <HAL_RCC_OscConfig+0x106c>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e24:	fa93 f3a3 	rbit	r3, r3
 8001e28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e30:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e34:	2202      	movs	r2, #2
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e3c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	fa93 f2a3 	rbit	r2, r3
 8001e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e58:	2202      	movs	r2, #2
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	fa93 f2a3 	rbit	r2, r3
 8001e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e74:	4b88      	ldr	r3, [pc, #544]	; (8002098 <HAL_RCC_OscConfig+0x934>)
 8001e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e80:	2102      	movs	r1, #2
 8001e82:	6019      	str	r1, [r3, #0]
 8001e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f1a3 	rbit	r1, r3
 8001e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e96:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e9a:	6019      	str	r1, [r3, #0]
  return result;
 8001e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	fab3 f383 	clz	r3, r3
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f003 031f 	and.w	r3, r3, #31
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0a0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x6a0>
 8001ec2:	e08d      	b.n	8001fe0 <HAL_RCC_OscConfig+0x87c>
 8001ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	fa93 f2a3 	rbit	r2, r3
 8001ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ee2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ee6:	601a      	str	r2, [r3, #0]
  return result;
 8001ee8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ef0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b68      	ldr	r3, [pc, #416]	; (800209c <HAL_RCC_OscConfig+0x938>)
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	461a      	mov	r2, r3
 8001f02:	2300      	movs	r3, #0
 8001f04:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f06:	f7fe fc35 	bl	8000774 <HAL_GetTick>
 8001f0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f10:	f7fe fc30 	bl	8000774 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d902      	bls.n	8001f26 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	f000 bc55 	b.w	80027d0 <HAL_RCC_OscConfig+0x106c>
 8001f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f2e:	2202      	movs	r2, #2
 8001f30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f36:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	fa93 f2a3 	rbit	r2, r3
 8001f40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f44:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f48:	601a      	str	r2, [r3, #0]
 8001f4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f4e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f52:	2202      	movs	r2, #2
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f5a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	fa93 f2a3 	rbit	r2, r3
 8001f64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f76:	2202      	movs	r2, #2
 8001f78:	601a      	str	r2, [r3, #0]
 8001f7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	fa93 f2a3 	rbit	r2, r3
 8001f88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f8c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f92:	4b41      	ldr	r3, [pc, #260]	; (8002098 <HAL_RCC_OscConfig+0x934>)
 8001f94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f9a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	6019      	str	r1, [r3, #0]
 8001fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fa6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	fa93 f1a3 	rbit	r1, r3
 8001fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fb4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001fb8:	6019      	str	r1, [r3, #0]
  return result;
 8001fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fbe:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	fab3 f383 	clz	r3, r3
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d197      	bne.n	8001f10 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fe4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 81a1 	beq.w	8002338 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ffc:	4b26      	ldr	r3, [pc, #152]	; (8002098 <HAL_RCC_OscConfig+0x934>)
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d116      	bne.n	8002036 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	4b23      	ldr	r3, [pc, #140]	; (8002098 <HAL_RCC_OscConfig+0x934>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	4a22      	ldr	r2, [pc, #136]	; (8002098 <HAL_RCC_OscConfig+0x934>)
 800200e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002012:	61d3      	str	r3, [r2, #28]
 8002014:	4b20      	ldr	r3, [pc, #128]	; (8002098 <HAL_RCC_OscConfig+0x934>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800201c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002020:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800202e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002030:	2301      	movs	r3, #1
 8002032:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002036:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <HAL_RCC_OscConfig+0x93c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d11a      	bne.n	8002078 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <HAL_RCC_OscConfig+0x93c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <HAL_RCC_OscConfig+0x93c>)
 8002048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204e:	f7fe fb91 	bl	8000774 <HAL_GetTick>
 8002052:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002056:	e009      	b.n	800206c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002058:	f7fe fb8c 	bl	8000774 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b64      	cmp	r3, #100	; 0x64
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e3b1      	b.n	80027d0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <HAL_RCC_OscConfig+0x93c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0ef      	beq.n	8002058 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002078:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d10d      	bne.n	80020a4 <HAL_RCC_OscConfig+0x940>
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <HAL_RCC_OscConfig+0x934>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	4a02      	ldr	r2, [pc, #8]	; (8002098 <HAL_RCC_OscConfig+0x934>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6213      	str	r3, [r2, #32]
 8002094:	e03c      	b.n	8002110 <HAL_RCC_OscConfig+0x9ac>
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	10908120 	.word	0x10908120
 80020a0:	40007000 	.word	0x40007000
 80020a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10c      	bne.n	80020ce <HAL_RCC_OscConfig+0x96a>
 80020b4:	4bc1      	ldr	r3, [pc, #772]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4ac0      	ldr	r2, [pc, #768]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6213      	str	r3, [r2, #32]
 80020c0:	4bbe      	ldr	r3, [pc, #760]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4abd      	ldr	r2, [pc, #756]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 80020c6:	f023 0304 	bic.w	r3, r3, #4
 80020ca:	6213      	str	r3, [r2, #32]
 80020cc:	e020      	b.n	8002110 <HAL_RCC_OscConfig+0x9ac>
 80020ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d10c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x994>
 80020de:	4bb7      	ldr	r3, [pc, #732]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	4ab6      	ldr	r2, [pc, #728]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	6213      	str	r3, [r2, #32]
 80020ea:	4bb4      	ldr	r3, [pc, #720]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	4ab3      	ldr	r2, [pc, #716]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6213      	str	r3, [r2, #32]
 80020f6:	e00b      	b.n	8002110 <HAL_RCC_OscConfig+0x9ac>
 80020f8:	4bb0      	ldr	r3, [pc, #704]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4aaf      	ldr	r2, [pc, #700]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	4bad      	ldr	r3, [pc, #692]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4aac      	ldr	r2, [pc, #688]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 800210a:	f023 0304 	bic.w	r3, r3, #4
 800210e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002110:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002114:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 8081 	beq.w	8002224 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7fe fb27 	bl	8000774 <HAL_GetTick>
 8002126:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7fe fb22 	bl	8000774 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	; 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e345      	b.n	80027d0 <HAL_RCC_OscConfig+0x106c>
 8002144:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002148:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800214c:	2202      	movs	r2, #2
 800214e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002154:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	fa93 f2a3 	rbit	r2, r3
 800215e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002162:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002170:	2202      	movs	r2, #2
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002178:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	fa93 f2a3 	rbit	r2, r3
 8002182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002186:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800218a:	601a      	str	r2, [r3, #0]
  return result;
 800218c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002190:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002194:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	f043 0302 	orr.w	r3, r3, #2
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d102      	bne.n	80021b0 <HAL_RCC_OscConfig+0xa4c>
 80021aa:	4b84      	ldr	r3, [pc, #528]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	e013      	b.n	80021d8 <HAL_RCC_OscConfig+0xa74>
 80021b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80021b8:	2202      	movs	r2, #2
 80021ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fa93 f2a3 	rbit	r2, r3
 80021ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ce:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	4b79      	ldr	r3, [pc, #484]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021dc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80021e0:	2102      	movs	r1, #2
 80021e2:	6011      	str	r1, [r2, #0]
 80021e4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021e8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80021ec:	6812      	ldr	r2, [r2, #0]
 80021ee:	fa92 f1a2 	rbit	r1, r2
 80021f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80021f6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021fa:	6011      	str	r1, [r2, #0]
  return result;
 80021fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002200:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002204:	6812      	ldr	r2, [r2, #0]
 8002206:	fab2 f282 	clz	r2, r2
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	f002 021f 	and.w	r2, r2, #31
 8002216:	2101      	movs	r1, #1
 8002218:	fa01 f202 	lsl.w	r2, r1, r2
 800221c:	4013      	ands	r3, r2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d084      	beq.n	800212c <HAL_RCC_OscConfig+0x9c8>
 8002222:	e07f      	b.n	8002324 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7fe faa6 	bl	8000774 <HAL_GetTick>
 8002228:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222c:	e00b      	b.n	8002246 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7fe faa1 	bl	8000774 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	f241 3288 	movw	r2, #5000	; 0x1388
 800223e:	4293      	cmp	r3, r2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e2c4      	b.n	80027d0 <HAL_RCC_OscConfig+0x106c>
 8002246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800224e:	2202      	movs	r2, #2
 8002250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002256:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	fa93 f2a3 	rbit	r2, r3
 8002260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002264:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002272:	2202      	movs	r2, #2
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fa93 f2a3 	rbit	r2, r3
 8002284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002288:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800228c:	601a      	str	r2, [r3, #0]
  return result;
 800228e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002292:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002296:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002298:	fab3 f383 	clz	r3, r3
 800229c:	b2db      	uxtb	r3, r3
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f043 0302 	orr.w	r3, r3, #2
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d102      	bne.n	80022b2 <HAL_RCC_OscConfig+0xb4e>
 80022ac:	4b43      	ldr	r3, [pc, #268]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	e013      	b.n	80022da <HAL_RCC_OscConfig+0xb76>
 80022b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022b6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80022ba:	2202      	movs	r2, #2
 80022bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	fa93 f2a3 	rbit	r2, r3
 80022cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	4b39      	ldr	r3, [pc, #228]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 80022d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022de:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80022e2:	2102      	movs	r1, #2
 80022e4:	6011      	str	r1, [r2, #0]
 80022e6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022ea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	fa92 f1a2 	rbit	r1, r2
 80022f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80022f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022fc:	6011      	str	r1, [r2, #0]
  return result;
 80022fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002302:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	fab2 f282 	clz	r2, r2
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	f002 021f 	and.w	r2, r2, #31
 8002318:	2101      	movs	r1, #1
 800231a:	fa01 f202 	lsl.w	r2, r1, r2
 800231e:	4013      	ands	r3, r2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d184      	bne.n	800222e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002324:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002328:	2b01      	cmp	r3, #1
 800232a:	d105      	bne.n	8002338 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 800232e:	69db      	ldr	r3, [r3, #28]
 8002330:	4a22      	ldr	r2, [pc, #136]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 8002332:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002336:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002338:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 8242 	beq.w	80027ce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800234a:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <HAL_RCC_OscConfig+0xc58>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b08      	cmp	r3, #8
 8002354:	f000 8213 	beq.w	800277e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002358:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800235c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b02      	cmp	r3, #2
 8002366:	f040 8162 	bne.w	800262e <HAL_RCC_OscConfig+0xeca>
 800236a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002372:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002376:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800237c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	fa93 f2a3 	rbit	r2, r3
 8002386:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800238a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800238e:	601a      	str	r2, [r3, #0]
  return result;
 8002390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002394:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002398:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	461a      	mov	r2, r3
 80023ac:	2300      	movs	r3, #0
 80023ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7fe f9e0 	bl	8000774 <HAL_GetTick>
 80023b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023b8:	e00c      	b.n	80023d4 <HAL_RCC_OscConfig+0xc70>
 80023ba:	bf00      	nop
 80023bc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023c0:	f7fe f9d8 	bl	8000774 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e1fd      	b.n	80027d0 <HAL_RCC_OscConfig+0x106c>
 80023d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023e6:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	fa93 f2a3 	rbit	r2, r3
 80023f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023f8:	601a      	str	r2, [r3, #0]
  return result;
 80023fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fe:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002402:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002404:	fab3 f383 	clz	r3, r3
 8002408:	b2db      	uxtb	r3, r3
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	b2db      	uxtb	r3, r3
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	b2db      	uxtb	r3, r3
 8002414:	2b01      	cmp	r3, #1
 8002416:	d102      	bne.n	800241e <HAL_RCC_OscConfig+0xcba>
 8002418:	4bb0      	ldr	r3, [pc, #704]	; (80026dc <HAL_RCC_OscConfig+0xf78>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	e027      	b.n	800246e <HAL_RCC_OscConfig+0xd0a>
 800241e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002422:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002426:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800242a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002430:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	fa93 f2a3 	rbit	r2, r3
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002448:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800244c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002456:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	fa93 f2a3 	rbit	r2, r3
 8002460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002464:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	4b9c      	ldr	r3, [pc, #624]	; (80026dc <HAL_RCC_OscConfig+0xf78>)
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002472:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002476:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800247a:	6011      	str	r1, [r2, #0]
 800247c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002480:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	fa92 f1a2 	rbit	r1, r2
 800248a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800248e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002492:	6011      	str	r1, [r2, #0]
  return result;
 8002494:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002498:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	fab2 f282 	clz	r2, r2
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	f042 0220 	orr.w	r2, r2, #32
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	f002 021f 	and.w	r2, r2, #31
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d182      	bne.n	80023c0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ba:	4b88      	ldr	r3, [pc, #544]	; (80026dc <HAL_RCC_OscConfig+0xf78>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024c6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	430b      	orrs	r3, r1
 80024dc:	497f      	ldr	r1, [pc, #508]	; (80026dc <HAL_RCC_OscConfig+0xf78>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
 80024e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e6:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80024ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	fa93 f2a3 	rbit	r2, r3
 80024fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002502:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002506:	601a      	str	r2, [r3, #0]
  return result;
 8002508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002510:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002512:	fab3 f383 	clz	r3, r3
 8002516:	b2db      	uxtb	r3, r3
 8002518:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800251c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	461a      	mov	r2, r3
 8002524:	2301      	movs	r3, #1
 8002526:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7fe f924 	bl	8000774 <HAL_GetTick>
 800252c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002530:	e009      	b.n	8002546 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002532:	f7fe f91f 	bl	8000774 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e144      	b.n	80027d0 <HAL_RCC_OscConfig+0x106c>
 8002546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800254a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800254e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002558:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	fa93 f2a3 	rbit	r2, r3
 8002562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002566:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800256a:	601a      	str	r2, [r3, #0]
  return result;
 800256c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002570:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002574:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002576:	fab3 f383 	clz	r3, r3
 800257a:	b2db      	uxtb	r3, r3
 800257c:	095b      	lsrs	r3, r3, #5
 800257e:	b2db      	uxtb	r3, r3
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d102      	bne.n	8002590 <HAL_RCC_OscConfig+0xe2c>
 800258a:	4b54      	ldr	r3, [pc, #336]	; (80026dc <HAL_RCC_OscConfig+0xf78>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	e027      	b.n	80025e0 <HAL_RCC_OscConfig+0xe7c>
 8002590:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002594:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002598:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800259c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025ba:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80025be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025c8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	fa93 f2a3 	rbit	r2, r3
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <HAL_RCC_OscConfig+0xf78>)
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025e4:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80025e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025ec:	6011      	str	r1, [r2, #0]
 80025ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025f2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80025f6:	6812      	ldr	r2, [r2, #0]
 80025f8:	fa92 f1a2 	rbit	r1, r2
 80025fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002600:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002604:	6011      	str	r1, [r2, #0]
  return result;
 8002606:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800260a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	fab2 f282 	clz	r2, r2
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f042 0220 	orr.w	r2, r2, #32
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	f002 021f 	and.w	r2, r2, #31
 8002620:	2101      	movs	r1, #1
 8002622:	fa01 f202 	lsl.w	r2, r1, r2
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d082      	beq.n	8002532 <HAL_RCC_OscConfig+0xdce>
 800262c:	e0cf      	b.n	80027ce <HAL_RCC_OscConfig+0x106a>
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002636:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800263a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002640:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	fa93 f2a3 	rbit	r2, r3
 800264a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800264e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002652:	601a      	str	r2, [r3, #0]
  return result;
 8002654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002658:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800265c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265e:	fab3 f383 	clz	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002668:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	461a      	mov	r2, r3
 8002670:	2300      	movs	r3, #0
 8002672:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7fe f87e 	bl	8000774 <HAL_GetTick>
 8002678:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267c:	e009      	b.n	8002692 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800267e:	f7fe f879 	bl	8000774 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e09e      	b.n	80027d0 <HAL_RCC_OscConfig+0x106c>
 8002692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002696:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800269a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800269e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	fa93 f2a3 	rbit	r2, r3
 80026ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026b6:	601a      	str	r2, [r3, #0]
  return result;
 80026b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026bc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	095b      	lsrs	r3, r3, #5
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	f043 0301 	orr.w	r3, r3, #1
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d104      	bne.n	80026e0 <HAL_RCC_OscConfig+0xf7c>
 80026d6:	4b01      	ldr	r3, [pc, #4]	; (80026dc <HAL_RCC_OscConfig+0xf78>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	e029      	b.n	8002730 <HAL_RCC_OscConfig+0xfcc>
 80026dc:	40021000 	.word	0x40021000
 80026e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e4:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	fa93 f2a3 	rbit	r2, r3
 80026fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002700:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800270a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800270e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002718:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	fa93 f2a3 	rbit	r2, r3
 8002722:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002726:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	4b2b      	ldr	r3, [pc, #172]	; (80027dc <HAL_RCC_OscConfig+0x1078>)
 800272e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002730:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002734:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002738:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800273c:	6011      	str	r1, [r2, #0]
 800273e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002742:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002746:	6812      	ldr	r2, [r2, #0]
 8002748:	fa92 f1a2 	rbit	r1, r2
 800274c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002750:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002754:	6011      	str	r1, [r2, #0]
  return result;
 8002756:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800275a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	fab2 f282 	clz	r2, r2
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	f042 0220 	orr.w	r2, r2, #32
 800276a:	b2d2      	uxtb	r2, r2
 800276c:	f002 021f 	and.w	r2, r2, #31
 8002770:	2101      	movs	r1, #1
 8002772:	fa01 f202 	lsl.w	r2, r1, r2
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d180      	bne.n	800267e <HAL_RCC_OscConfig+0xf1a>
 800277c:	e027      	b.n	80027ce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800277e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002782:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e01e      	b.n	80027d0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_RCC_OscConfig+0x1078>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800279a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800279e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d10b      	bne.n	80027ca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80027b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80027b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d001      	beq.n	80027ce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e000      	b.n	80027d0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40021000 	.word	0x40021000

080027e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b09e      	sub	sp, #120	; 0x78
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e162      	b.n	8002abe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b90      	ldr	r3, [pc, #576]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d910      	bls.n	8002828 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b8d      	ldr	r3, [pc, #564]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 0207 	bic.w	r2, r3, #7
 800280e:	498b      	ldr	r1, [pc, #556]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b89      	ldr	r3, [pc, #548]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e14a      	b.n	8002abe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b82      	ldr	r3, [pc, #520]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	497f      	ldr	r1, [pc, #508]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80dc 	beq.w	8002a0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d13c      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xf6>
 800285c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002860:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800286a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d102      	bne.n	8002886 <HAL_RCC_ClockConfig+0xa6>
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	e00f      	b.n	80028a6 <HAL_RCC_ClockConfig+0xc6>
 8002886:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800288a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	667b      	str	r3, [r7, #100]	; 0x64
 8002894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002898:	663b      	str	r3, [r7, #96]	; 0x60
 800289a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028a2:	4b67      	ldr	r3, [pc, #412]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80028ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028ae:	fa92 f2a2 	rbit	r2, r2
 80028b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80028b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028b6:	fab2 f282 	clz	r2, r2
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	f042 0220 	orr.w	r2, r2, #32
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	f002 021f 	and.w	r2, r2, #31
 80028c6:	2101      	movs	r1, #1
 80028c8:	fa01 f202 	lsl.w	r2, r1, r2
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d17b      	bne.n	80029ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e0f3      	b.n	8002abe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d13c      	bne.n	8002958 <HAL_RCC_ClockConfig+0x178>
 80028de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d102      	bne.n	8002908 <HAL_RCC_ClockConfig+0x128>
 8002902:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	e00f      	b.n	8002928 <HAL_RCC_ClockConfig+0x148>
 8002908:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	647b      	str	r3, [r7, #68]	; 0x44
 8002916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291a:	643b      	str	r3, [r7, #64]	; 0x40
 800291c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002924:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800292c:	63ba      	str	r2, [r7, #56]	; 0x38
 800292e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002930:	fa92 f2a2 	rbit	r2, r2
 8002934:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002938:	fab2 f282 	clz	r2, r2
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	f042 0220 	orr.w	r2, r2, #32
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	f002 021f 	and.w	r2, r2, #31
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f202 	lsl.w	r2, r1, r2
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d13a      	bne.n	80029ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0b2      	b.n	8002abe <HAL_RCC_ClockConfig+0x2de>
 8002958:	2302      	movs	r3, #2
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <HAL_RCC_ClockConfig+0x1a0>
 800297a:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	e00d      	b.n	800299c <HAL_RCC_ClockConfig+0x1bc>
 8002980:	2302      	movs	r3, #2
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
 800298c:	2302      	movs	r3, #2
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	2202      	movs	r2, #2
 800299e:	61ba      	str	r2, [r7, #24]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	fa92 f2a2 	rbit	r2, r2
 80029a6:	617a      	str	r2, [r7, #20]
  return result;
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	fab2 f282 	clz	r2, r2
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f042 0220 	orr.w	r2, r2, #32
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f002 021f 	and.w	r2, r2, #31
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f202 	lsl.w	r2, r1, r2
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e079      	b.n	8002abe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f023 0203 	bic.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	491a      	ldr	r1, [pc, #104]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029dc:	f7fd feca 	bl	8000774 <HAL_GetTick>
 80029e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e4:	f7fd fec6 	bl	8000774 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e061      	b.n	8002abe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 020c 	and.w	r2, r3, #12
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d1eb      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d214      	bcs.n	8002a44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 0207 	bic.w	r2, r3, #7
 8002a22:	4906      	ldr	r1, [pc, #24]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e040      	b.n	8002abe <HAL_RCC_ClockConfig+0x2de>
 8002a3c:	40022000 	.word	0x40022000
 8002a40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a50:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	491a      	ldr	r1, [pc, #104]	; (8002ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a6e:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4912      	ldr	r1, [pc, #72]	; (8002ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a82:	f000 f829 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002a86:	4601      	mov	r1, r0
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a90:	22f0      	movs	r2, #240	; 0xf0
 8002a92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	fa92 f2a2 	rbit	r2, r2
 8002a9a:	60fa      	str	r2, [r7, #12]
  return result;
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	fab2 f282 	clz	r2, r2
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	40d3      	lsrs	r3, r2
 8002aa6:	4a09      	ldr	r2, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x2ec>)
 8002aa8:	5cd3      	ldrb	r3, [r2, r3]
 8002aaa:	fa21 f303 	lsr.w	r3, r1, r3
 8002aae:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <HAL_RCC_ClockConfig+0x2f0>)
 8002ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <HAL_RCC_ClockConfig+0x2f4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fe18 	bl	80006ec <HAL_InitTick>
  
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3778      	adds	r7, #120	; 0x78
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	0800365c 	.word	0x0800365c
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b08b      	sub	sp, #44	; 0x2c
 8002adc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002af2:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d002      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x30>
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0x36>
 8002b06:	e03c      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b08:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b0a:	623b      	str	r3, [r7, #32]
      break;
 8002b0c:	e03c      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	fa92 f2a2 	rbit	r2, r2
 8002b20:	607a      	str	r2, [r7, #4]
  return result;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	fab2 f282 	clz	r2, r2
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	40d3      	lsrs	r3, r2
 8002b2c:	4a1c      	ldr	r2, [pc, #112]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b32:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	fa92 f2a2 	rbit	r2, r2
 8002b44:	60fa      	str	r2, [r7, #12]
  return result;
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	fab2 f282 	clz	r2, r2
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	40d3      	lsrs	r3, r2
 8002b50:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b52:	5cd3      	ldrb	r3, [r2, r3]
 8002b54:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b60:	4a0e      	ldr	r2, [pc, #56]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b70:	e004      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	4a0c      	ldr	r2, [pc, #48]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	623b      	str	r3, [r7, #32]
      break;
 8002b80:	e002      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b84:	623b      	str	r3, [r7, #32]
      break;
 8002b86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b88:	6a3b      	ldr	r3, [r7, #32]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	372c      	adds	r7, #44	; 0x2c
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	007a1200 	.word	0x007a1200
 8002ba0:	08003674 	.word	0x08003674
 8002ba4:	08003684 	.word	0x08003684
 8002ba8:	003d0900 	.word	0x003d0900

08002bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000000 	.word	0x20000000

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002bca:	f7ff ffef 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bce:	4601      	mov	r1, r0
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	fa92 f2a2 	rbit	r2, r2
 8002be4:	603a      	str	r2, [r7, #0]
  return result;
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	fab2 f282 	clz	r2, r2
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	40d3      	lsrs	r3, r2
 8002bf0:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002bf2:	5cd3      	ldrb	r3, [r2, r3]
 8002bf4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	0800366c 	.word	0x0800366c

08002c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c0e:	f7ff ffcd 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002c12:	4601      	mov	r1, r0
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	fa92 f2a2 	rbit	r2, r2
 8002c28:	603a      	str	r2, [r7, #0]
  return result;
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	fab2 f282 	clz	r2, r2
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	40d3      	lsrs	r3, r2
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000
 8002c48:	0800366c 	.word	0x0800366c

08002c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b092      	sub	sp, #72	; 0x48
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80cd 	beq.w	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c70:	4b8e      	ldr	r3, [pc, #568]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10e      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7c:	4b8b      	ldr	r3, [pc, #556]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	4a8a      	ldr	r2, [pc, #552]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c86:	61d3      	str	r3, [r2, #28]
 8002c88:	4b88      	ldr	r3, [pc, #544]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c94:	2301      	movs	r3, #1
 8002c96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b85      	ldr	r3, [pc, #532]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d118      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca6:	4b82      	ldr	r3, [pc, #520]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a81      	ldr	r2, [pc, #516]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb2:	f7fd fd5f 	bl	8000774 <HAL_GetTick>
 8002cb6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	e008      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cba:	f7fd fd5b 	bl	8000774 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b64      	cmp	r3, #100	; 0x64
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e0ea      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	4b78      	ldr	r3, [pc, #480]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cd8:	4b74      	ldr	r3, [pc, #464]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d07d      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d076      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cf6:	4b6d      	ldr	r3, [pc, #436]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf8:	6a1b      	ldr	r3, [r3, #32]
 8002cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d04:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d10:	fab3 f383 	clz	r3, r3
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2301      	movs	r3, #1
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2c:	fa93 f3a3 	rbit	r3, r3
 8002d30:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4b5d      	ldr	r3, [pc, #372]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	461a      	mov	r2, r3
 8002d44:	2300      	movs	r3, #0
 8002d46:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d48:	4a58      	ldr	r2, [pc, #352]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d045      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d58:	f7fd fd0c 	bl	8000774 <HAL_GetTick>
 8002d5c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d5e:	e00a      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d60:	f7fd fd08 	bl	8000774 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d901      	bls.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e095      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8002d76:	2302      	movs	r3, #2
 8002d78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7c:	fa93 f3a3 	rbit	r3, r3
 8002d80:	627b      	str	r3, [r7, #36]	; 0x24
 8002d82:	2302      	movs	r3, #2
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	fa93 f3a3 	rbit	r3, r3
 8002d8c:	61fb      	str	r3, [r7, #28]
  return result;
 8002d8e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d90:	fab3 f383 	clz	r3, r3
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f043 0302 	orr.w	r3, r3, #2
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d102      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002da4:	4b41      	ldr	r3, [pc, #260]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	e007      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002daa:	2302      	movs	r3, #2
 8002dac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	4b3d      	ldr	r3, [pc, #244]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	2202      	movs	r2, #2
 8002dbc:	613a      	str	r2, [r7, #16]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	fa92 f2a2 	rbit	r2, r2
 8002dc4:	60fa      	str	r2, [r7, #12]
  return result;
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	fab2 f282 	clz	r2, r2
 8002dcc:	b2d2      	uxtb	r2, r2
 8002dce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	f002 021f 	and.w	r2, r2, #31
 8002dd8:	2101      	movs	r1, #1
 8002dda:	fa01 f202 	lsl.w	r2, r1, r2
 8002dde:	4013      	ands	r3, r2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0bd      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002de4:	4b31      	ldr	r3, [pc, #196]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	492e      	ldr	r1, [pc, #184]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002df6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d105      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfe:	4b2b      	ldr	r3, [pc, #172]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	4a2a      	ldr	r2, [pc, #168]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e08:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e16:	4b25      	ldr	r3, [pc, #148]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f023 0203 	bic.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	4922      	ldr	r1, [pc, #136]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0320 	and.w	r3, r3, #32
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e34:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e38:	f023 0210 	bic.w	r2, r3, #16
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	491a      	ldr	r1, [pc, #104]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d008      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e52:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	4913      	ldr	r1, [pc, #76]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d008      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002e70:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	490b      	ldr	r1, [pc, #44]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002e8e:	4b07      	ldr	r3, [pc, #28]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	4904      	ldr	r1, [pc, #16]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3748      	adds	r7, #72	; 0x48
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	40007000 	.word	0x40007000
 8002eb4:	10908100 	.word	0x10908100

08002eb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e040      	b.n	8002f4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fd fb48 	bl	8000570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2224      	movs	r2, #36	; 0x24
 8002ee4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0201 	bic.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f82c 	bl	8002f54 <UART_SetConfig>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e022      	b.n	8002f4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f956 	bl	80031c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f9dd 	bl	8003304 <UART_CheckIdleState>
 8002f4a:	4603      	mov	r3, r0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	4b8a      	ldr	r3, [pc, #552]	; (80031a8 <UART_SetConfig+0x254>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	6979      	ldr	r1, [r7, #20]
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a78      	ldr	r2, [pc, #480]	; (80031ac <UART_SetConfig+0x258>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d120      	bne.n	8003012 <UART_SetConfig+0xbe>
 8002fd0:	4b77      	ldr	r3, [pc, #476]	; (80031b0 <UART_SetConfig+0x25c>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d817      	bhi.n	800300c <UART_SetConfig+0xb8>
 8002fdc:	a201      	add	r2, pc, #4	; (adr r2, 8002fe4 <UART_SetConfig+0x90>)
 8002fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe2:	bf00      	nop
 8002fe4:	08002ff5 	.word	0x08002ff5
 8002fe8:	08003001 	.word	0x08003001
 8002fec:	08003007 	.word	0x08003007
 8002ff0:	08002ffb 	.word	0x08002ffb
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	77fb      	strb	r3, [r7, #31]
 8002ff8:	e01d      	b.n	8003036 <UART_SetConfig+0xe2>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	77fb      	strb	r3, [r7, #31]
 8002ffe:	e01a      	b.n	8003036 <UART_SetConfig+0xe2>
 8003000:	2304      	movs	r3, #4
 8003002:	77fb      	strb	r3, [r7, #31]
 8003004:	e017      	b.n	8003036 <UART_SetConfig+0xe2>
 8003006:	2308      	movs	r3, #8
 8003008:	77fb      	strb	r3, [r7, #31]
 800300a:	e014      	b.n	8003036 <UART_SetConfig+0xe2>
 800300c:	2310      	movs	r3, #16
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	e011      	b.n	8003036 <UART_SetConfig+0xe2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a67      	ldr	r2, [pc, #412]	; (80031b4 <UART_SetConfig+0x260>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d102      	bne.n	8003022 <UART_SetConfig+0xce>
 800301c:	2300      	movs	r3, #0
 800301e:	77fb      	strb	r3, [r7, #31]
 8003020:	e009      	b.n	8003036 <UART_SetConfig+0xe2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a64      	ldr	r2, [pc, #400]	; (80031b8 <UART_SetConfig+0x264>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d102      	bne.n	8003032 <UART_SetConfig+0xde>
 800302c:	2300      	movs	r3, #0
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e001      	b.n	8003036 <UART_SetConfig+0xe2>
 8003032:	2310      	movs	r3, #16
 8003034:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800303e:	d15a      	bne.n	80030f6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003040:	7ffb      	ldrb	r3, [r7, #31]
 8003042:	2b08      	cmp	r3, #8
 8003044:	d827      	bhi.n	8003096 <UART_SetConfig+0x142>
 8003046:	a201      	add	r2, pc, #4	; (adr r2, 800304c <UART_SetConfig+0xf8>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	08003071 	.word	0x08003071
 8003050:	08003079 	.word	0x08003079
 8003054:	08003081 	.word	0x08003081
 8003058:	08003097 	.word	0x08003097
 800305c:	08003087 	.word	0x08003087
 8003060:	08003097 	.word	0x08003097
 8003064:	08003097 	.word	0x08003097
 8003068:	08003097 	.word	0x08003097
 800306c:	0800308f 	.word	0x0800308f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003070:	f7ff fda8 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8003074:	61b8      	str	r0, [r7, #24]
        break;
 8003076:	e013      	b.n	80030a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003078:	f7ff fdc6 	bl	8002c08 <HAL_RCC_GetPCLK2Freq>
 800307c:	61b8      	str	r0, [r7, #24]
        break;
 800307e:	e00f      	b.n	80030a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003080:	4b4e      	ldr	r3, [pc, #312]	; (80031bc <UART_SetConfig+0x268>)
 8003082:	61bb      	str	r3, [r7, #24]
        break;
 8003084:	e00c      	b.n	80030a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003086:	f7ff fd27 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 800308a:	61b8      	str	r0, [r7, #24]
        break;
 800308c:	e008      	b.n	80030a0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800308e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003092:	61bb      	str	r3, [r7, #24]
        break;
 8003094:	e004      	b.n	80030a0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	77bb      	strb	r3, [r7, #30]
        break;
 800309e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d074      	beq.n	8003190 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	005a      	lsls	r2, r3, #1
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	441a      	add	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	2b0f      	cmp	r3, #15
 80030c0:	d916      	bls.n	80030f0 <UART_SetConfig+0x19c>
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c8:	d212      	bcs.n	80030f0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f023 030f 	bic.w	r3, r3, #15
 80030d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	085b      	lsrs	r3, r3, #1
 80030d8:	b29b      	uxth	r3, r3
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	b29a      	uxth	r2, r3
 80030e0:	89fb      	ldrh	r3, [r7, #14]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	89fa      	ldrh	r2, [r7, #14]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	e04f      	b.n	8003190 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	77bb      	strb	r3, [r7, #30]
 80030f4:	e04c      	b.n	8003190 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030f6:	7ffb      	ldrb	r3, [r7, #31]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d828      	bhi.n	800314e <UART_SetConfig+0x1fa>
 80030fc:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <UART_SetConfig+0x1b0>)
 80030fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003102:	bf00      	nop
 8003104:	08003129 	.word	0x08003129
 8003108:	08003131 	.word	0x08003131
 800310c:	08003139 	.word	0x08003139
 8003110:	0800314f 	.word	0x0800314f
 8003114:	0800313f 	.word	0x0800313f
 8003118:	0800314f 	.word	0x0800314f
 800311c:	0800314f 	.word	0x0800314f
 8003120:	0800314f 	.word	0x0800314f
 8003124:	08003147 	.word	0x08003147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003128:	f7ff fd4c 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 800312c:	61b8      	str	r0, [r7, #24]
        break;
 800312e:	e013      	b.n	8003158 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003130:	f7ff fd6a 	bl	8002c08 <HAL_RCC_GetPCLK2Freq>
 8003134:	61b8      	str	r0, [r7, #24]
        break;
 8003136:	e00f      	b.n	8003158 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003138:	4b20      	ldr	r3, [pc, #128]	; (80031bc <UART_SetConfig+0x268>)
 800313a:	61bb      	str	r3, [r7, #24]
        break;
 800313c:	e00c      	b.n	8003158 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800313e:	f7ff fccb 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8003142:	61b8      	str	r0, [r7, #24]
        break;
 8003144:	e008      	b.n	8003158 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800314a:	61bb      	str	r3, [r7, #24]
        break;
 800314c:	e004      	b.n	8003158 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	77bb      	strb	r3, [r7, #30]
        break;
 8003156:	bf00      	nop
    }

    if (pclk != 0U)
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d018      	beq.n	8003190 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	085a      	lsrs	r2, r3, #1
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	441a      	add	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	2b0f      	cmp	r3, #15
 8003176:	d909      	bls.n	800318c <UART_SetConfig+0x238>
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800317e:	d205      	bcs.n	800318c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	b29a      	uxth	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	60da      	str	r2, [r3, #12]
 800318a:	e001      	b.n	8003190 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800319c:	7fbb      	ldrb	r3, [r7, #30]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	efff69f3 	.word	0xefff69f3
 80031ac:	40013800 	.word	0x40013800
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40004400 	.word	0x40004400
 80031b8:	40004800 	.word	0x40004800
 80031bc:	007a1200 	.word	0x007a1200

080031c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00a      	beq.n	80031ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	f003 0304 	and.w	r3, r3, #4
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00a      	beq.n	8003272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	f003 0320 	and.w	r3, r3, #32
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00a      	beq.n	8003294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01a      	beq.n	80032d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032be:	d10a      	bne.n	80032d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]
  }
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b098      	sub	sp, #96	; 0x60
 8003308:	af02      	add	r7, sp, #8
 800330a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003314:	f7fd fa2e 	bl	8000774 <HAL_GetTick>
 8003318:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b08      	cmp	r3, #8
 8003326:	d12e      	bne.n	8003386 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003330:	2200      	movs	r2, #0
 8003332:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f88c 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d021      	beq.n	8003386 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334a:	e853 3f00 	ldrex	r3, [r3]
 800334e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003356:	653b      	str	r3, [r7, #80]	; 0x50
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003360:	647b      	str	r3, [r7, #68]	; 0x44
 8003362:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003364:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003368:	e841 2300 	strex	r3, r2, [r1]
 800336c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800336e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e6      	bne.n	8003342 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e062      	b.n	800344c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0304 	and.w	r3, r3, #4
 8003390:	2b04      	cmp	r3, #4
 8003392:	d149      	bne.n	8003428 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003394:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003398:	9300      	str	r3, [sp, #0]
 800339a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800339c:	2200      	movs	r2, #0
 800339e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f856 	bl	8003454 <UART_WaitOnFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d03c      	beq.n	8003428 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	623b      	str	r3, [r7, #32]
   return(result);
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033cc:	633b      	str	r3, [r7, #48]	; 0x30
 80033ce:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e6      	bne.n	80033ae <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3308      	adds	r3, #8
 80033e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	3308      	adds	r3, #8
 80033fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003400:	61fa      	str	r2, [r7, #28]
 8003402:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	69b9      	ldr	r1, [r7, #24]
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	617b      	str	r3, [r7, #20]
   return(result);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e5      	bne.n	80033e0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e011      	b.n	800344c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2220      	movs	r2, #32
 800342c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3758      	adds	r7, #88	; 0x58
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003464:	e049      	b.n	80034fa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d045      	beq.n	80034fa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346e:	f7fd f981 	bl	8000774 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <UART_WaitOnFlagUntilTimeout+0x30>
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e048      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0304 	and.w	r3, r3, #4
 8003492:	2b00      	cmp	r3, #0
 8003494:	d031      	beq.n	80034fa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d110      	bne.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2208      	movs	r2, #8
 80034aa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f838 	bl	8003522 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2208      	movs	r2, #8
 80034b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e029      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034d4:	d111      	bne.n	80034fa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f81e 	bl	8003522 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e00f      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4013      	ands	r3, r2
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	429a      	cmp	r2, r3
 8003508:	bf0c      	ite	eq
 800350a:	2301      	moveq	r3, #1
 800350c:	2300      	movne	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	429a      	cmp	r2, r3
 8003516:	d0a6      	beq.n	8003466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003522:	b480      	push	{r7}
 8003524:	b095      	sub	sp, #84	; 0x54
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003532:	e853 3f00 	ldrex	r3, [r3]
 8003536:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800353e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003548:	643b      	str	r3, [r7, #64]	; 0x40
 800354a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800354e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003550:	e841 2300 	strex	r3, r2, [r1]
 8003554:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e6      	bne.n	800352a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3308      	adds	r3, #8
 8003562:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	61fb      	str	r3, [r7, #28]
   return(result);
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	64bb      	str	r3, [r7, #72]	; 0x48
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3308      	adds	r3, #8
 800357a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800357c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003580:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003584:	e841 2300 	strex	r3, r2, [r1]
 8003588:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e5      	bne.n	800355c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003594:	2b01      	cmp	r3, #1
 8003596:	d118      	bne.n	80035ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f023 0310 	bic.w	r3, r3, #16
 80035ac:	647b      	str	r3, [r7, #68]	; 0x44
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035b6:	61bb      	str	r3, [r7, #24]
 80035b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	6979      	ldr	r1, [r7, #20]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	613b      	str	r3, [r7, #16]
   return(result);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e6      	bne.n	8003598 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80035de:	bf00      	nop
 80035e0:	3754      	adds	r7, #84	; 0x54
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <memset>:
 80035ea:	4402      	add	r2, r0
 80035ec:	4603      	mov	r3, r0
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d100      	bne.n	80035f4 <memset+0xa>
 80035f2:	4770      	bx	lr
 80035f4:	f803 1b01 	strb.w	r1, [r3], #1
 80035f8:	e7f9      	b.n	80035ee <memset+0x4>
	...

080035fc <__libc_init_array>:
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	4d0d      	ldr	r5, [pc, #52]	; (8003634 <__libc_init_array+0x38>)
 8003600:	4c0d      	ldr	r4, [pc, #52]	; (8003638 <__libc_init_array+0x3c>)
 8003602:	1b64      	subs	r4, r4, r5
 8003604:	10a4      	asrs	r4, r4, #2
 8003606:	2600      	movs	r6, #0
 8003608:	42a6      	cmp	r6, r4
 800360a:	d109      	bne.n	8003620 <__libc_init_array+0x24>
 800360c:	4d0b      	ldr	r5, [pc, #44]	; (800363c <__libc_init_array+0x40>)
 800360e:	4c0c      	ldr	r4, [pc, #48]	; (8003640 <__libc_init_array+0x44>)
 8003610:	f000 f818 	bl	8003644 <_init>
 8003614:	1b64      	subs	r4, r4, r5
 8003616:	10a4      	asrs	r4, r4, #2
 8003618:	2600      	movs	r6, #0
 800361a:	42a6      	cmp	r6, r4
 800361c:	d105      	bne.n	800362a <__libc_init_array+0x2e>
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	f855 3b04 	ldr.w	r3, [r5], #4
 8003624:	4798      	blx	r3
 8003626:	3601      	adds	r6, #1
 8003628:	e7ee      	b.n	8003608 <__libc_init_array+0xc>
 800362a:	f855 3b04 	ldr.w	r3, [r5], #4
 800362e:	4798      	blx	r3
 8003630:	3601      	adds	r6, #1
 8003632:	e7f2      	b.n	800361a <__libc_init_array+0x1e>
 8003634:	08003694 	.word	0x08003694
 8003638:	08003694 	.word	0x08003694
 800363c:	08003694 	.word	0x08003694
 8003640:	08003698 	.word	0x08003698

08003644 <_init>:
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	bf00      	nop
 8003648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364a:	bc08      	pop	{r3}
 800364c:	469e      	mov	lr, r3
 800364e:	4770      	bx	lr

08003650 <_fini>:
 8003650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003652:	bf00      	nop
 8003654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003656:	bc08      	pop	{r3}
 8003658:	469e      	mov	lr, r3
 800365a:	4770      	bx	lr

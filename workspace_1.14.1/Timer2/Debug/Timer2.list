
Timer2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000224  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003ac  080003ac  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003ac  080003ac  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003ac  080003ac  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003ac  080003ac  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003ac  080003ac  000103ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003b0  080003b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003b4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000fe1  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000468  00000000  00000000  00021058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000001b0  00000000  00000000  000214c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000012d  00000000  00000000  00021670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001dab8  00000000  00000000  0002179d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000216c  00000000  00000000  0003f255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b3f3e  00000000  00000000  000413c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000004e4  00000000  00000000  000f5300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  000f57e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000394 	.word	0x08000394

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000394 	.word	0x08000394

080001c8 <main>:
#include"stm32f3xx.h"
int main()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->AHBENR |=(1<<17);
 80001cc:	4b21      	ldr	r3, [pc, #132]	; (8000254 <main+0x8c>)
 80001ce:	695b      	ldr	r3, [r3, #20]
 80001d0:	4a20      	ldr	r2, [pc, #128]	; (8000254 <main+0x8c>)
 80001d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001d6:	6153      	str	r3, [r2, #20]
	GPIOA->MODER |=(1<<10);
 80001d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001e6:	6013      	str	r3, [r2, #0]
	GPIOA ->MODER &=~(1U<<11);
 80001e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80001f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001f6:	6013      	str	r3, [r2, #0]


	RCC ->APB1ENR =(1U<<0);
 80001f8:	4b16      	ldr	r3, [pc, #88]	; (8000254 <main+0x8c>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	61da      	str	r2, [r3, #28]
	TIM2->PSC=79;
 80001fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000202:	224f      	movs	r2, #79	; 0x4f
 8000204:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR=1000;
 8000206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800020a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800020e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CNT=0;
 8000210:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000214:	2200      	movs	r2, #0
 8000216:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CR1=(1U<<0);
 8000218:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800021c:	2201      	movs	r2, #1
 800021e:	601a      	str	r2, [r3, #0]

	while(1)
	{

		while(!(TIM2->SR&(1U<<0)));
 8000220:	bf00      	nop
 8000222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	f003 0301 	and.w	r3, r3, #1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d0f8      	beq.n	8000222 <main+0x5a>
		TIM2->SR&=~(1U<<0);
 8000230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000234:	691b      	ldr	r3, [r3, #16]
 8000236:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800023a:	f023 0301 	bic.w	r3, r3, #1
 800023e:	6113      	str	r3, [r2, #16]
		GPIOA->ODR^=(1U<<5);
 8000240:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800024a:	f083 0320 	eor.w	r3, r3, #32
 800024e:	6153      	str	r3, [r2, #20]
		while(!(TIM2->SR&(1U<<0)));
 8000250:	e7e6      	b.n	8000220 <main+0x58>
 8000252:	bf00      	nop
 8000254:	40021000 	.word	0x40021000

08000258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800025c:	e7fe      	b.n	800025c <NMI_Handler+0x4>

0800025e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800025e:	b480      	push	{r7}
 8000260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000262:	e7fe      	b.n	8000262 <HardFault_Handler+0x4>

08000264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000268:	e7fe      	b.n	8000268 <MemManage_Handler+0x4>

0800026a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800026a:	b480      	push	{r7}
 800026c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800026e:	e7fe      	b.n	800026e <BusFault_Handler+0x4>

08000270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000274:	e7fe      	b.n	8000274 <UsageFault_Handler+0x4>

08000276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000276:	b480      	push	{r7}
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800027a:	bf00      	nop
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr

08000284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000292:	b480      	push	{r7}
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000296:	bf00      	nop
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr

080002a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002a4:	f000 f83e 	bl	8000324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002a8:	bf00      	nop
 80002aa:	bd80      	pop	{r7, pc}

080002ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <SystemInit+0x20>)
 80002b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002b6:	4a05      	ldr	r2, [pc, #20]	; (80002cc <SystemInit+0x20>)
 80002b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	e000ed00 	.word	0xe000ed00

080002d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80002d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000308 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80002d4:	f7ff ffea 	bl	80002ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002fe:	f000 f825 	bl	800034c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000302:	f7ff ff61 	bl	80001c8 <main>

08000306 <LoopForever>:

LoopForever:
    b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000308:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000314:	080003b4 	.word	0x080003b4
  ldr r2, =_sbss
 8000318:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800031c:	20000024 	.word	0x20000024

08000320 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC1_2_IRQHandler>
	...

08000324 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <HAL_IncTick+0x20>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	461a      	mov	r2, r3
 800032e:	4b06      	ldr	r3, [pc, #24]	; (8000348 <HAL_IncTick+0x24>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4413      	add	r3, r2
 8000334:	4a04      	ldr	r2, [pc, #16]	; (8000348 <HAL_IncTick+0x24>)
 8000336:	6013      	str	r3, [r2, #0]
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	20000000 	.word	0x20000000
 8000348:	20000020 	.word	0x20000020

0800034c <__libc_init_array>:
 800034c:	b570      	push	{r4, r5, r6, lr}
 800034e:	4d0d      	ldr	r5, [pc, #52]	; (8000384 <__libc_init_array+0x38>)
 8000350:	4c0d      	ldr	r4, [pc, #52]	; (8000388 <__libc_init_array+0x3c>)
 8000352:	1b64      	subs	r4, r4, r5
 8000354:	10a4      	asrs	r4, r4, #2
 8000356:	2600      	movs	r6, #0
 8000358:	42a6      	cmp	r6, r4
 800035a:	d109      	bne.n	8000370 <__libc_init_array+0x24>
 800035c:	4d0b      	ldr	r5, [pc, #44]	; (800038c <__libc_init_array+0x40>)
 800035e:	4c0c      	ldr	r4, [pc, #48]	; (8000390 <__libc_init_array+0x44>)
 8000360:	f000 f818 	bl	8000394 <_init>
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	10a4      	asrs	r4, r4, #2
 8000368:	2600      	movs	r6, #0
 800036a:	42a6      	cmp	r6, r4
 800036c:	d105      	bne.n	800037a <__libc_init_array+0x2e>
 800036e:	bd70      	pop	{r4, r5, r6, pc}
 8000370:	f855 3b04 	ldr.w	r3, [r5], #4
 8000374:	4798      	blx	r3
 8000376:	3601      	adds	r6, #1
 8000378:	e7ee      	b.n	8000358 <__libc_init_array+0xc>
 800037a:	f855 3b04 	ldr.w	r3, [r5], #4
 800037e:	4798      	blx	r3
 8000380:	3601      	adds	r6, #1
 8000382:	e7f2      	b.n	800036a <__libc_init_array+0x1e>
 8000384:	080003ac 	.word	0x080003ac
 8000388:	080003ac 	.word	0x080003ac
 800038c:	080003ac 	.word	0x080003ac
 8000390:	080003b0 	.word	0x080003b0

08000394 <_init>:
 8000394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000396:	bf00      	nop
 8000398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039a:	bc08      	pop	{r3}
 800039c:	469e      	mov	lr, r3
 800039e:	4770      	bx	lr

080003a0 <_fini>:
 80003a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a2:	bf00      	nop
 80003a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003a6:	bc08      	pop	{r3}
 80003a8:	469e      	mov	lr, r3
 80003aa:	4770      	bx	lr

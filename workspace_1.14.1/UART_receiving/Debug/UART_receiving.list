
UART_receiving.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003458  08003458  00004458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003490  08003490  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003490  08003490  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003490  08003490  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003490  08003490  00004490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003494  08003494  00004494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003498  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          000000b8  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009ae8  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001800  00000000  00000000  0000eb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000710  00000000  00000000  00010328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000568  00000000  00000000  00010a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e70e  00000000  00000000  00010fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d98  00000000  00000000  0002f6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b57fe  00000000  00000000  00039446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eec44  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b8c  00000000  00000000  000eec88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  000f0814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003440 	.word	0x08003440

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003440 	.word	0x08003440

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f992 	bl	80004f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f810 	bl	80001f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f880 	bl	80002d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001d8:	f000 f84e 	bl	8000278 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)txdata, 15);
 80001dc:	220f      	movs	r2, #15
 80001de:	4903      	ldr	r1, [pc, #12]	@ (80001ec <main+0x24>)
 80001e0:	4803      	ldr	r0, [pc, #12]	@ (80001f0 <main+0x28>)
 80001e2:	f001 ffa9 	bl	8002138 <HAL_UART_Receive_IT>
  while (1)
 80001e6:	bf00      	nop
 80001e8:	e7fd      	b.n	80001e6 <main+0x1e>
 80001ea:	bf00      	nop
 80001ec:	200000b0 	.word	0x200000b0
 80001f0:	20000028 	.word	0x20000028

080001f4 <SystemClock_Config>:

  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b090      	sub	sp, #64	@ 0x40
 80001f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fa:	f107 0318 	add.w	r3, r7, #24
 80001fe:	2228      	movs	r2, #40	@ 0x28
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f003 f8f0 	bl	80033e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000208:	1d3b      	adds	r3, r7, #4
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800021a:	2301      	movs	r3, #1
 800021c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021e:	2310      	movs	r3, #16
 8000220:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000222:	2302      	movs	r3, #2
 8000224:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000226:	2300      	movs	r3, #0
 8000228:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800022a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800022e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0318 	add.w	r3, r7, #24
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fcbd 	bl	8000bb4 <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000240:	f000 f86e 	bl	8000320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000244:	230f      	movs	r3, #15
 8000246:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000248:	2302      	movs	r3, #2
 800024a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000250:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	2102      	movs	r1, #2
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fce6 	bl	8001c30 <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800026a:	f000 f859 	bl	8000320 <Error_Handler>
  }
}
 800026e:	bf00      	nop
 8000270:	3740      	adds	r7, #64	@ 0x40
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
	...

08000278 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800027c:	4b14      	ldr	r3, [pc, #80]	@ (80002d0 <MX_USART2_UART_Init+0x58>)
 800027e:	4a15      	ldr	r2, [pc, #84]	@ (80002d4 <MX_USART2_UART_Init+0x5c>)
 8000280:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000282:	4b13      	ldr	r3, [pc, #76]	@ (80002d0 <MX_USART2_UART_Init+0x58>)
 8000284:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000288:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800028a:	4b11      	ldr	r3, [pc, #68]	@ (80002d0 <MX_USART2_UART_Init+0x58>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000290:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <MX_USART2_UART_Init+0x58>)
 8000292:	2200      	movs	r2, #0
 8000294:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000296:	4b0e      	ldr	r3, [pc, #56]	@ (80002d0 <MX_USART2_UART_Init+0x58>)
 8000298:	2200      	movs	r2, #0
 800029a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800029c:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <MX_USART2_UART_Init+0x58>)
 800029e:	220c      	movs	r2, #12
 80002a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002a2:	4b0b      	ldr	r3, [pc, #44]	@ (80002d0 <MX_USART2_UART_Init+0x58>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002a8:	4b09      	ldr	r3, [pc, #36]	@ (80002d0 <MX_USART2_UART_Init+0x58>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002ae:	4b08      	ldr	r3, [pc, #32]	@ (80002d0 <MX_USART2_UART_Init+0x58>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002b4:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <MX_USART2_UART_Init+0x58>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ba:	4805      	ldr	r0, [pc, #20]	@ (80002d0 <MX_USART2_UART_Init+0x58>)
 80002bc:	f001 feee 	bl	800209c <HAL_UART_Init>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80002c6:	f000 f82b 	bl	8000320 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	20000028 	.word	0x20000028
 80002d4:	40004400 	.word	0x40004400

080002d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80002de:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <MX_GPIO_Init+0x44>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a0e      	ldr	r2, [pc, #56]	@ (800031c <MX_GPIO_Init+0x44>)
 80002e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002e8:	6153      	str	r3, [r2, #20]
 80002ea:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <MX_GPIO_Init+0x44>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f6:	4b09      	ldr	r3, [pc, #36]	@ (800031c <MX_GPIO_Init+0x44>)
 80002f8:	695b      	ldr	r3, [r3, #20]
 80002fa:	4a08      	ldr	r2, [pc, #32]	@ (800031c <MX_GPIO_Init+0x44>)
 80002fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000300:	6153      	str	r3, [r2, #20]
 8000302:	4b06      	ldr	r3, [pc, #24]	@ (800031c <MX_GPIO_Init+0x44>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800030a:	603b      	str	r3, [r7, #0]
 800030c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000

08000320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000324:	b672      	cpsid	i
}
 8000326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000328:	bf00      	nop
 800032a:	e7fd      	b.n	8000328 <Error_Handler+0x8>

0800032c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b082      	sub	sp, #8
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000332:	4b0f      	ldr	r3, [pc, #60]	@ (8000370 <HAL_MspInit+0x44>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	4a0e      	ldr	r2, [pc, #56]	@ (8000370 <HAL_MspInit+0x44>)
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6193      	str	r3, [r2, #24]
 800033e:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <HAL_MspInit+0x44>)
 8000340:	699b      	ldr	r3, [r3, #24]
 8000342:	f003 0301 	and.w	r3, r3, #1
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800034a:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <HAL_MspInit+0x44>)
 800034c:	69db      	ldr	r3, [r3, #28]
 800034e:	4a08      	ldr	r2, [pc, #32]	@ (8000370 <HAL_MspInit+0x44>)
 8000350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000354:	61d3      	str	r3, [r2, #28]
 8000356:	4b06      	ldr	r3, [pc, #24]	@ (8000370 <HAL_MspInit+0x44>)
 8000358:	69db      	ldr	r3, [r3, #28]
 800035a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800035e:	603b      	str	r3, [r7, #0]
 8000360:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000362:	2007      	movs	r0, #7
 8000364:	f000 f9fc 	bl	8000760 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000368:	bf00      	nop
 800036a:	3708      	adds	r7, #8
 800036c:	46bd      	mov	sp, r7
 800036e:	bd80      	pop	{r7, pc}
 8000370:	40021000 	.word	0x40021000

08000374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b08a      	sub	sp, #40	@ 0x28
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800037c:	f107 0314 	add.w	r3, r7, #20
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
 8000388:	60da      	str	r2, [r3, #12]
 800038a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a1b      	ldr	r2, [pc, #108]	@ (8000400 <HAL_UART_MspInit+0x8c>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d130      	bne.n	80003f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000396:	4b1b      	ldr	r3, [pc, #108]	@ (8000404 <HAL_UART_MspInit+0x90>)
 8000398:	69db      	ldr	r3, [r3, #28]
 800039a:	4a1a      	ldr	r2, [pc, #104]	@ (8000404 <HAL_UART_MspInit+0x90>)
 800039c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003a0:	61d3      	str	r3, [r2, #28]
 80003a2:	4b18      	ldr	r3, [pc, #96]	@ (8000404 <HAL_UART_MspInit+0x90>)
 80003a4:	69db      	ldr	r3, [r3, #28]
 80003a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003aa:	613b      	str	r3, [r7, #16]
 80003ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <HAL_UART_MspInit+0x90>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a14      	ldr	r2, [pc, #80]	@ (8000404 <HAL_UART_MspInit+0x90>)
 80003b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003b8:	6153      	str	r3, [r2, #20]
 80003ba:	4b12      	ldr	r3, [pc, #72]	@ (8000404 <HAL_UART_MspInit+0x90>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80003c6:	230c      	movs	r3, #12
 80003c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003d2:	2303      	movs	r3, #3
 80003d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80003d6:	2307      	movs	r3, #7
 80003d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003da:	f107 0314 	add.w	r3, r7, #20
 80003de:	4619      	mov	r1, r3
 80003e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003e4:	f000 fa74 	bl	80008d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2100      	movs	r1, #0
 80003ec:	2026      	movs	r0, #38	@ 0x26
 80003ee:	f000 f9c2 	bl	8000776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80003f2:	2026      	movs	r0, #38	@ 0x26
 80003f4:	f000 f9db 	bl	80007ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80003f8:	bf00      	nop
 80003fa:	3728      	adds	r7, #40	@ 0x28
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40004400 	.word	0x40004400
 8000404:	40021000 	.word	0x40021000

08000408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800040c:	bf00      	nop
 800040e:	e7fd      	b.n	800040c <NMI_Handler+0x4>

08000410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <HardFault_Handler+0x4>

08000418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800041c:	bf00      	nop
 800041e:	e7fd      	b.n	800041c <MemManage_Handler+0x4>

08000420 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <BusFault_Handler+0x4>

08000428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <UsageFault_Handler+0x4>

08000430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr

0800043e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800043e:	b480      	push	{r7}
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr

0800044c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr

0800045a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800045a:	b580      	push	{r7, lr}
 800045c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800045e:	f000 f88f 	bl	8000580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800046c:	4802      	ldr	r0, [pc, #8]	@ (8000478 <USART2_IRQHandler+0x10>)
 800046e:	f001 fea7 	bl	80021c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	20000028 	.word	0x20000028

0800047c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000480:	4b06      	ldr	r3, [pc, #24]	@ (800049c <SystemInit+0x20>)
 8000482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000486:	4a05      	ldr	r2, [pc, #20]	@ (800049c <SystemInit+0x20>)
 8000488:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800048c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	e000ed00 	.word	0xe000ed00

080004a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004d8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80004a4:	f7ff ffea 	bl	800047c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004a8:	480c      	ldr	r0, [pc, #48]	@ (80004dc <LoopForever+0x6>)
  ldr r1, =_edata
 80004aa:	490d      	ldr	r1, [pc, #52]	@ (80004e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ac:	4a0d      	ldr	r2, [pc, #52]	@ (80004e4 <LoopForever+0xe>)
  movs r3, #0
 80004ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b0:	e002      	b.n	80004b8 <LoopCopyDataInit>

080004b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004b6:	3304      	adds	r3, #4

080004b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004bc:	d3f9      	bcc.n	80004b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004be:	4a0a      	ldr	r2, [pc, #40]	@ (80004e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c0:	4c0a      	ldr	r4, [pc, #40]	@ (80004ec <LoopForever+0x16>)
  movs r3, #0
 80004c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004c4:	e001      	b.n	80004ca <LoopFillZerobss>

080004c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004c8:	3204      	adds	r2, #4

080004ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004cc:	d3fb      	bcc.n	80004c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004ce:	f002 ff93 	bl	80033f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80004d2:	f7ff fe79 	bl	80001c8 <main>

080004d6 <LoopForever>:

LoopForever:
    b LoopForever
 80004d6:	e7fe      	b.n	80004d6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80004d8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80004dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004e4:	08003498 	.word	0x08003498
  ldr r2, =_sbss
 80004e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004ec:	200000c4 	.word	0x200000c4

080004f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80004f0:	e7fe      	b.n	80004f0 <ADC1_2_IRQHandler>
	...

080004f4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f8:	4b08      	ldr	r3, [pc, #32]	@ (800051c <HAL_Init+0x28>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a07      	ldr	r2, [pc, #28]	@ (800051c <HAL_Init+0x28>)
 80004fe:	f043 0310 	orr.w	r3, r3, #16
 8000502:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000504:	2003      	movs	r0, #3
 8000506:	f000 f92b 	bl	8000760 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050a:	2000      	movs	r0, #0
 800050c:	f000 f808 	bl	8000520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000510:	f7ff ff0c 	bl	800032c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000514:	2300      	movs	r3, #0
}
 8000516:	4618      	mov	r0, r3
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40022000 	.word	0x40022000

08000520 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000528:	4b12      	ldr	r3, [pc, #72]	@ (8000574 <HAL_InitTick+0x54>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	4b12      	ldr	r3, [pc, #72]	@ (8000578 <HAL_InitTick+0x58>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	4619      	mov	r1, r3
 8000532:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000536:	fbb3 f3f1 	udiv	r3, r3, r1
 800053a:	fbb2 f3f3 	udiv	r3, r2, r3
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f943 	bl	80007ca <HAL_SYSTICK_Config>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800054a:	2301      	movs	r3, #1
 800054c:	e00e      	b.n	800056c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0f      	cmp	r3, #15
 8000552:	d80a      	bhi.n	800056a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000554:	2200      	movs	r2, #0
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	f04f 30ff 	mov.w	r0, #4294967295
 800055c:	f000 f90b 	bl	8000776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000560:	4a06      	ldr	r2, [pc, #24]	@ (800057c <HAL_InitTick+0x5c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000566:	2300      	movs	r3, #0
 8000568:	e000      	b.n	800056c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
}
 800056c:	4618      	mov	r0, r3
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000000 	.word	0x20000000
 8000578:	20000008 	.word	0x20000008
 800057c:	20000004 	.word	0x20000004

08000580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000584:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <HAL_IncTick+0x20>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	461a      	mov	r2, r3
 800058a:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <HAL_IncTick+0x24>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4413      	add	r3, r2
 8000590:	4a04      	ldr	r2, [pc, #16]	@ (80005a4 <HAL_IncTick+0x24>)
 8000592:	6013      	str	r3, [r2, #0]
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000008 	.word	0x20000008
 80005a4:	200000c0 	.word	0x200000c0

080005a8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return uwTick;  
 80005ac:	4b03      	ldr	r3, [pc, #12]	@ (80005bc <HAL_GetTick+0x14>)
 80005ae:	681b      	ldr	r3, [r3, #0]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200000c0 	.word	0x200000c0

080005c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f003 0307 	and.w	r3, r3, #7
 80005ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <__NVIC_SetPriorityGrouping+0x44>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80005dc:	4013      	ands	r3, r2
 80005de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80005ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005f2:	4a04      	ldr	r2, [pc, #16]	@ (8000604 <__NVIC_SetPriorityGrouping+0x44>)
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	60d3      	str	r3, [r2, #12]
}
 80005f8:	bf00      	nop
 80005fa:	3714      	adds	r7, #20
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800060c:	4b04      	ldr	r3, [pc, #16]	@ (8000620 <__NVIC_GetPriorityGrouping+0x18>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	0a1b      	lsrs	r3, r3, #8
 8000612:	f003 0307 	and.w	r3, r3, #7
}
 8000616:	4618      	mov	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	2b00      	cmp	r3, #0
 8000634:	db0b      	blt.n	800064e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	f003 021f 	and.w	r2, r3, #31
 800063c:	4907      	ldr	r1, [pc, #28]	@ (800065c <__NVIC_EnableIRQ+0x38>)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	095b      	lsrs	r3, r3, #5
 8000644:	2001      	movs	r0, #1
 8000646:	fa00 f202 	lsl.w	r2, r0, r2
 800064a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000e100 	.word	0xe000e100

08000660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000670:	2b00      	cmp	r3, #0
 8000672:	db0a      	blt.n	800068a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	b2da      	uxtb	r2, r3
 8000678:	490c      	ldr	r1, [pc, #48]	@ (80006ac <__NVIC_SetPriority+0x4c>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	0112      	lsls	r2, r2, #4
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	440b      	add	r3, r1
 8000684:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000688:	e00a      	b.n	80006a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	b2da      	uxtb	r2, r3
 800068e:	4908      	ldr	r1, [pc, #32]	@ (80006b0 <__NVIC_SetPriority+0x50>)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f003 030f 	and.w	r3, r3, #15
 8000696:	3b04      	subs	r3, #4
 8000698:	0112      	lsls	r2, r2, #4
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	440b      	add	r3, r1
 800069e:	761a      	strb	r2, [r3, #24]
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000e100 	.word	0xe000e100
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b089      	sub	sp, #36	@ 0x24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	f1c3 0307 	rsb	r3, r3, #7
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	bf28      	it	cs
 80006d2:	2304      	movcs	r3, #4
 80006d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3304      	adds	r3, #4
 80006da:	2b06      	cmp	r3, #6
 80006dc:	d902      	bls.n	80006e4 <NVIC_EncodePriority+0x30>
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3b03      	subs	r3, #3
 80006e2:	e000      	b.n	80006e6 <NVIC_EncodePriority+0x32>
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e8:	f04f 32ff 	mov.w	r2, #4294967295
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	43da      	mvns	r2, r3
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	401a      	ands	r2, r3
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	43d9      	mvns	r1, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800070c:	4313      	orrs	r3, r2
         );
}
 800070e:	4618      	mov	r0, r3
 8000710:	3724      	adds	r7, #36	@ 0x24
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3b01      	subs	r3, #1
 8000728:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800072c:	d301      	bcc.n	8000732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800072e:	2301      	movs	r3, #1
 8000730:	e00f      	b.n	8000752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000732:	4a0a      	ldr	r2, [pc, #40]	@ (800075c <SysTick_Config+0x40>)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3b01      	subs	r3, #1
 8000738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800073a:	210f      	movs	r1, #15
 800073c:	f04f 30ff 	mov.w	r0, #4294967295
 8000740:	f7ff ff8e 	bl	8000660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000744:	4b05      	ldr	r3, [pc, #20]	@ (800075c <SysTick_Config+0x40>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800074a:	4b04      	ldr	r3, [pc, #16]	@ (800075c <SysTick_Config+0x40>)
 800074c:	2207      	movs	r2, #7
 800074e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	e000e010 	.word	0xe000e010

08000760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff29 	bl	80005c0 <__NVIC_SetPriorityGrouping>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	b086      	sub	sp, #24
 800077a:	af00      	add	r7, sp, #0
 800077c:	4603      	mov	r3, r0
 800077e:	60b9      	str	r1, [r7, #8]
 8000780:	607a      	str	r2, [r7, #4]
 8000782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000788:	f7ff ff3e 	bl	8000608 <__NVIC_GetPriorityGrouping>
 800078c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	6978      	ldr	r0, [r7, #20]
 8000794:	f7ff ff8e 	bl	80006b4 <NVIC_EncodePriority>
 8000798:	4602      	mov	r2, r0
 800079a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079e:	4611      	mov	r1, r2
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff ff5d 	bl	8000660 <__NVIC_SetPriority>
}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b082      	sub	sp, #8
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff ff31 	bl	8000624 <__NVIC_EnableIRQ>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ffa2 	bl	800071c <SysTick_Config>
 80007d8:	4603      	mov	r3, r0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d008      	beq.n	8000806 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2204      	movs	r2, #4
 80007f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
 8000804:	e020      	b.n	8000848 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f022 020e 	bic.w	r2, r2, #14
 8000814:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f022 0201 	bic.w	r2, r2, #1
 8000824:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800082e:	2101      	movs	r1, #1
 8000830:	fa01 f202 	lsl.w	r2, r1, r2
 8000834:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2201      	movs	r2, #1
 800083a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	2200      	movs	r2, #0
 8000842:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800085c:	2300      	movs	r3, #0
 800085e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000866:	2b02      	cmp	r3, #2
 8000868:	d005      	beq.n	8000876 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2204      	movs	r2, #4
 800086e:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	73fb      	strb	r3, [r7, #15]
 8000874:	e027      	b.n	80008c6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f022 020e 	bic.w	r2, r2, #14
 8000884:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f022 0201 	bic.w	r2, r2, #1
 8000894:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800089e:	2101      	movs	r1, #1
 80008a0:	fa01 f202 	lsl.w	r2, r1, r2
 80008a4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2201      	movs	r2, #1
 80008aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d003      	beq.n	80008c6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	4798      	blx	r3
    } 
  }
  return status;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008de:	e14e      	b.n	8000b7e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	2101      	movs	r1, #1
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ec:	4013      	ands	r3, r2
 80008ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f000 8140 	beq.w	8000b78 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	f003 0303 	and.w	r3, r3, #3
 8000900:	2b01      	cmp	r3, #1
 8000902:	d005      	beq.n	8000910 <HAL_GPIO_Init+0x40>
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	f003 0303 	and.w	r3, r3, #3
 800090c:	2b02      	cmp	r3, #2
 800090e:	d130      	bne.n	8000972 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	2203      	movs	r2, #3
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4313      	orrs	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000946:	2201      	movs	r2, #1
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4013      	ands	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	091b      	lsrs	r3, r3, #4
 800095c:	f003 0201 	and.w	r2, r3, #1
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f003 0303 	and.w	r3, r3, #3
 800097a:	2b03      	cmp	r3, #3
 800097c:	d017      	beq.n	80009ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	2203      	movs	r2, #3
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	693a      	ldr	r2, [r7, #16]
 8000992:	4013      	ands	r3, r2
 8000994:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	689a      	ldr	r2, [r3, #8]
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	f003 0303 	and.w	r3, r3, #3
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d123      	bne.n	8000a02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	08da      	lsrs	r2, r3, #3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3208      	adds	r2, #8
 80009c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	220f      	movs	r2, #15
 80009d2:	fa02 f303 	lsl.w	r3, r2, r3
 80009d6:	43db      	mvns	r3, r3
 80009d8:	693a      	ldr	r2, [r7, #16]
 80009da:	4013      	ands	r3, r2
 80009dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	691a      	ldr	r2, [r3, #16]
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	f003 0307 	and.w	r3, r3, #7
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	08da      	lsrs	r2, r3, #3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3208      	adds	r2, #8
 80009fc:	6939      	ldr	r1, [r7, #16]
 80009fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a12:	43db      	mvns	r3, r3
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	4013      	ands	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f003 0203 	and.w	r2, r3, #3
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f000 809a 	beq.w	8000b78 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a44:	4b55      	ldr	r3, [pc, #340]	@ (8000b9c <HAL_GPIO_Init+0x2cc>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a54      	ldr	r2, [pc, #336]	@ (8000b9c <HAL_GPIO_Init+0x2cc>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b52      	ldr	r3, [pc, #328]	@ (8000b9c <HAL_GPIO_Init+0x2cc>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a5c:	4a50      	ldr	r2, [pc, #320]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	089b      	lsrs	r3, r3, #2
 8000a62:	3302      	adds	r3, #2
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	f003 0303 	and.w	r3, r3, #3
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	220f      	movs	r2, #15
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	43db      	mvns	r3, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a86:	d013      	beq.n	8000ab0 <HAL_GPIO_Init+0x1e0>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	4a46      	ldr	r2, [pc, #280]	@ (8000ba4 <HAL_GPIO_Init+0x2d4>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d00d      	beq.n	8000aac <HAL_GPIO_Init+0x1dc>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4a45      	ldr	r2, [pc, #276]	@ (8000ba8 <HAL_GPIO_Init+0x2d8>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d007      	beq.n	8000aa8 <HAL_GPIO_Init+0x1d8>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a44      	ldr	r2, [pc, #272]	@ (8000bac <HAL_GPIO_Init+0x2dc>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d101      	bne.n	8000aa4 <HAL_GPIO_Init+0x1d4>
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	e006      	b.n	8000ab2 <HAL_GPIO_Init+0x1e2>
 8000aa4:	2305      	movs	r3, #5
 8000aa6:	e004      	b.n	8000ab2 <HAL_GPIO_Init+0x1e2>
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	e002      	b.n	8000ab2 <HAL_GPIO_Init+0x1e2>
 8000aac:	2301      	movs	r3, #1
 8000aae:	e000      	b.n	8000ab2 <HAL_GPIO_Init+0x1e2>
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	697a      	ldr	r2, [r7, #20]
 8000ab4:	f002 0203 	and.w	r2, r2, #3
 8000ab8:	0092      	lsls	r2, r2, #2
 8000aba:	4093      	lsls	r3, r2
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ac2:	4937      	ldr	r1, [pc, #220]	@ (8000ba0 <HAL_GPIO_Init+0x2d0>)
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	089b      	lsrs	r3, r3, #2
 8000ac8:	3302      	adds	r3, #2
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ad0:	4b37      	ldr	r3, [pc, #220]	@ (8000bb0 <HAL_GPIO_Init+0x2e0>)
 8000ad2:	689b      	ldr	r3, [r3, #8]
 8000ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	4013      	ands	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d003      	beq.n	8000af4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000af4:	4a2e      	ldr	r2, [pc, #184]	@ (8000bb0 <HAL_GPIO_Init+0x2e0>)
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000afa:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb0 <HAL_GPIO_Init+0x2e0>)
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	43db      	mvns	r3, r3
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	4013      	ands	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b1e:	4a24      	ldr	r2, [pc, #144]	@ (8000bb0 <HAL_GPIO_Init+0x2e0>)
 8000b20:	693b      	ldr	r3, [r7, #16]
 8000b22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000b24:	4b22      	ldr	r3, [pc, #136]	@ (8000bb0 <HAL_GPIO_Init+0x2e0>)
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d003      	beq.n	8000b48 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000b48:	4a19      	ldr	r2, [pc, #100]	@ (8000bb0 <HAL_GPIO_Init+0x2e0>)
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <HAL_GPIO_Init+0x2e0>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	43db      	mvns	r3, r3
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000b72:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb0 <HAL_GPIO_Init+0x2e0>)
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	fa22 f303 	lsr.w	r3, r2, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	f47f aea9 	bne.w	80008e0 <HAL_GPIO_Init+0x10>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	bf00      	nop
 8000b92:	371c      	adds	r7, #28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010000 	.word	0x40010000
 8000ba4:	48000400 	.word	0x48000400
 8000ba8:	48000800 	.word	0x48000800
 8000bac:	48000c00 	.word	0x48000c00
 8000bb0:	40010400 	.word	0x40010400

08000bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000bc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000bc4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000bca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d102      	bne.n	8000bda <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f001 b823 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000bde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 817d 	beq.w	8000eea <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bf0:	4bbc      	ldr	r3, [pc, #752]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 030c 	and.w	r3, r3, #12
 8000bf8:	2b04      	cmp	r3, #4
 8000bfa:	d00c      	beq.n	8000c16 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bfc:	4bb9      	ldr	r3, [pc, #740]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 030c 	and.w	r3, r3, #12
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	d15c      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x10e>
 8000c08:	4bb6      	ldr	r3, [pc, #728]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c14:	d155      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x10e>
 8000c16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c1a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8000c22:	fa93 f3a3 	rbit	r3, r3
 8000c26:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c2a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2e:	fab3 f383 	clz	r3, r3
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	095b      	lsrs	r3, r3, #5
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d102      	bne.n	8000c48 <HAL_RCC_OscConfig+0x94>
 8000c42:	4ba8      	ldr	r3, [pc, #672]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	e015      	b.n	8000c74 <HAL_RCC_OscConfig+0xc0>
 8000c48:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c4c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c50:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8000c54:	fa93 f3a3 	rbit	r3, r3
 8000c58:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000c5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000c60:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000c64:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8000c68:	fa93 f3a3 	rbit	r3, r3
 8000c6c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8000c70:	4b9c      	ldr	r3, [pc, #624]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c74:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c78:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8000c7c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000c80:	fa92 f2a2 	rbit	r2, r2
 8000c84:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8000c88:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	f042 0220 	orr.w	r2, r2, #32
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	f002 021f 	and.w	r2, r2, #31
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 811f 	beq.w	8000ee8 <HAL_RCC_OscConfig+0x334>
 8000caa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 8116 	bne.w	8000ee8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	f000 bfaf 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000cc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cd2:	d106      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x12e>
 8000cd4:	4b83      	ldr	r3, [pc, #524]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a82      	ldr	r2, [pc, #520]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	e036      	b.n	8000d50 <HAL_RCC_OscConfig+0x19c>
 8000ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000ce6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10c      	bne.n	8000d0c <HAL_RCC_OscConfig+0x158>
 8000cf2:	4b7c      	ldr	r3, [pc, #496]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a7b      	ldr	r2, [pc, #492]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000cf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	4b79      	ldr	r3, [pc, #484]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a78      	ldr	r2, [pc, #480]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d08:	6013      	str	r3, [r2, #0]
 8000d0a:	e021      	b.n	8000d50 <HAL_RCC_OscConfig+0x19c>
 8000d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d10:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d1c:	d10c      	bne.n	8000d38 <HAL_RCC_OscConfig+0x184>
 8000d1e:	4b71      	ldr	r3, [pc, #452]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a70      	ldr	r2, [pc, #448]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d28:	6013      	str	r3, [r2, #0]
 8000d2a:	4b6e      	ldr	r3, [pc, #440]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a6d      	ldr	r2, [pc, #436]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d34:	6013      	str	r3, [r2, #0]
 8000d36:	e00b      	b.n	8000d50 <HAL_RCC_OscConfig+0x19c>
 8000d38:	4b6a      	ldr	r3, [pc, #424]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a69      	ldr	r2, [pc, #420]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	4b67      	ldr	r3, [pc, #412]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a66      	ldr	r2, [pc, #408]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d4e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d50:	4b64      	ldr	r3, [pc, #400]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d54:	f023 020f 	bic.w	r2, r3, #15
 8000d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	495f      	ldr	r1, [pc, #380]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000d66:	4313      	orrs	r3, r2
 8000d68:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000d6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d059      	beq.n	8000e2e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7a:	f7ff fc15 	bl	80005a8 <HAL_GetTick>
 8000d7e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d82:	e00a      	b.n	8000d9a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d84:	f7ff fc10 	bl	80005a8 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b64      	cmp	r3, #100	@ 0x64
 8000d92:	d902      	bls.n	8000d9a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	f000 bf43 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
 8000d9a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000d9e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8000da6:	fa93 f3a3 	rbit	r3, r3
 8000daa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8000dae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db2:	fab3 f383 	clz	r3, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	095b      	lsrs	r3, r3, #5
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d102      	bne.n	8000dcc <HAL_RCC_OscConfig+0x218>
 8000dc6:	4b47      	ldr	r3, [pc, #284]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	e015      	b.n	8000df8 <HAL_RCC_OscConfig+0x244>
 8000dcc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000dd0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8000dd8:	fa93 f3a3 	rbit	r3, r3
 8000ddc:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8000de0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000de4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8000de8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8000dec:	fa93 f3a3 	rbit	r3, r3
 8000df0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8000df4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dfc:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8000e00:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8000e04:	fa92 f2a2 	rbit	r2, r2
 8000e08:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8000e0c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	f042 0220 	orr.w	r2, r2, #32
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	f002 021f 	and.w	r2, r2, #31
 8000e20:	2101      	movs	r1, #1
 8000e22:	fa01 f202 	lsl.w	r2, r1, r2
 8000e26:	4013      	ands	r3, r2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d0ab      	beq.n	8000d84 <HAL_RCC_OscConfig+0x1d0>
 8000e2c:	e05d      	b.n	8000eea <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2e:	f7ff fbbb 	bl	80005a8 <HAL_GetTick>
 8000e32:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e36:	e00a      	b.n	8000e4e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e38:	f7ff fbb6 	bl	80005a8 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b64      	cmp	r3, #100	@ 0x64
 8000e46:	d902      	bls.n	8000e4e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	f000 bee9 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
 8000e4e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e52:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e56:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8000e5a:	fa93 f3a3 	rbit	r3, r3
 8000e5e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8000e62:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e66:	fab3 f383 	clz	r3, r3
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	095b      	lsrs	r3, r3, #5
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d102      	bne.n	8000e80 <HAL_RCC_OscConfig+0x2cc>
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	e015      	b.n	8000eac <HAL_RCC_OscConfig+0x2f8>
 8000e80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e84:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e88:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000e8c:	fa93 f3a3 	rbit	r3, r3
 8000e90:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8000e94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e98:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8000e9c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <HAL_RCC_OscConfig+0x330>)
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000eb0:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8000eb4:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8000eb8:	fa92 f2a2 	rbit	r2, r2
 8000ebc:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8000ec0:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8000ec4:	fab2 f282 	clz	r2, r2
 8000ec8:	b2d2      	uxtb	r2, r2
 8000eca:	f042 0220 	orr.w	r2, r2, #32
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	f002 021f 	and.w	r2, r2, #31
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8000eda:	4013      	ands	r3, r2
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d1ab      	bne.n	8000e38 <HAL_RCC_OscConfig+0x284>
 8000ee0:	e003      	b.n	8000eea <HAL_RCC_OscConfig+0x336>
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000eee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 817d 	beq.w	80011fa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f00:	4ba6      	ldr	r3, [pc, #664]	@ (800119c <HAL_RCC_OscConfig+0x5e8>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 030c 	and.w	r3, r3, #12
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f0c:	4ba3      	ldr	r3, [pc, #652]	@ (800119c <HAL_RCC_OscConfig+0x5e8>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d172      	bne.n	8000ffe <HAL_RCC_OscConfig+0x44a>
 8000f18:	4ba0      	ldr	r3, [pc, #640]	@ (800119c <HAL_RCC_OscConfig+0x5e8>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d16c      	bne.n	8000ffe <HAL_RCC_OscConfig+0x44a>
 8000f24:	2302      	movs	r3, #2
 8000f26:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8000f2e:	fa93 f3a3 	rbit	r3, r3
 8000f32:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8000f36:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3a:	fab3 f383 	clz	r3, r3
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	095b      	lsrs	r3, r3, #5
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	f043 0301 	orr.w	r3, r3, #1
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d102      	bne.n	8000f54 <HAL_RCC_OscConfig+0x3a0>
 8000f4e:	4b93      	ldr	r3, [pc, #588]	@ (800119c <HAL_RCC_OscConfig+0x5e8>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	e013      	b.n	8000f7c <HAL_RCC_OscConfig+0x3c8>
 8000f54:	2302      	movs	r3, #2
 8000f56:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8000f5e:	fa93 f3a3 	rbit	r3, r3
 8000f62:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000f66:	2302      	movs	r3, #2
 8000f68:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8000f6c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8000f70:	fa93 f3a3 	rbit	r3, r3
 8000f74:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000f78:	4b88      	ldr	r3, [pc, #544]	@ (800119c <HAL_RCC_OscConfig+0x5e8>)
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7c:	2202      	movs	r2, #2
 8000f7e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8000f82:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8000f86:	fa92 f2a2 	rbit	r2, r2
 8000f8a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8000f8e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8000f92:	fab2 f282 	clz	r2, r2
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	f042 0220 	orr.w	r2, r2, #32
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	f002 021f 	and.w	r2, r2, #31
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa8:	4013      	ands	r3, r2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00a      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x410>
 8000fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fb2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d002      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	f000 be2e 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc4:	4b75      	ldr	r3, [pc, #468]	@ (800119c <HAL_RCC_OscConfig+0x5e8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8000fd0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	21f8      	movs	r1, #248	@ 0xf8
 8000fda:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fde:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8000fe2:	fa91 f1a1 	rbit	r1, r1
 8000fe6:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8000fea:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8000fee:	fab1 f181 	clz	r1, r1
 8000ff2:	b2c9      	uxtb	r1, r1
 8000ff4:	408b      	lsls	r3, r1
 8000ff6:	4969      	ldr	r1, [pc, #420]	@ (800119c <HAL_RCC_OscConfig+0x5e8>)
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ffc:	e0fd      	b.n	80011fa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001002:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 8088 	beq.w	8001120 <HAL_RCC_OscConfig+0x56c>
 8001010:	2301      	movs	r3, #1
 8001012:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001016:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800101a:	fa93 f3a3 	rbit	r3, r3
 800101e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001022:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001026:	fab3 f383 	clz	r3, r3
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001030:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	461a      	mov	r2, r3
 8001038:	2301      	movs	r3, #1
 800103a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103c:	f7ff fab4 	bl	80005a8 <HAL_GetTick>
 8001040:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001044:	e00a      	b.n	800105c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001046:	f7ff faaf 	bl	80005a8 <HAL_GetTick>
 800104a:	4602      	mov	r2, r0
 800104c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d902      	bls.n	800105c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	f000 bde2 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001062:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001066:	fa93 f3a3 	rbit	r3, r3
 800106a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800106e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001072:	fab3 f383 	clz	r3, r3
 8001076:	b2db      	uxtb	r3, r3
 8001078:	095b      	lsrs	r3, r3, #5
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b01      	cmp	r3, #1
 8001084:	d102      	bne.n	800108c <HAL_RCC_OscConfig+0x4d8>
 8001086:	4b45      	ldr	r3, [pc, #276]	@ (800119c <HAL_RCC_OscConfig+0x5e8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	e013      	b.n	80010b4 <HAL_RCC_OscConfig+0x500>
 800108c:	2302      	movs	r3, #2
 800108e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001092:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001096:	fa93 f3a3 	rbit	r3, r3
 800109a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800109e:	2302      	movs	r3, #2
 80010a0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80010a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80010a8:	fa93 f3a3 	rbit	r3, r3
 80010ac:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80010b0:	4b3a      	ldr	r3, [pc, #232]	@ (800119c <HAL_RCC_OscConfig+0x5e8>)
 80010b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b4:	2202      	movs	r2, #2
 80010b6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80010ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80010be:	fa92 f2a2 	rbit	r2, r2
 80010c2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80010c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80010ca:	fab2 f282 	clz	r2, r2
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	f042 0220 	orr.w	r2, r2, #32
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	f002 021f 	and.w	r2, r2, #31
 80010da:	2101      	movs	r1, #1
 80010dc:	fa01 f202 	lsl.w	r2, r1, r2
 80010e0:	4013      	ands	r3, r2
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d0af      	beq.n	8001046 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e6:	4b2d      	ldr	r3, [pc, #180]	@ (800119c <HAL_RCC_OscConfig+0x5e8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80010f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	21f8      	movs	r1, #248	@ 0xf8
 80010fc:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001100:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001104:	fa91 f1a1 	rbit	r1, r1
 8001108:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800110c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001110:	fab1 f181 	clz	r1, r1
 8001114:	b2c9      	uxtb	r1, r1
 8001116:	408b      	lsls	r3, r1
 8001118:	4920      	ldr	r1, [pc, #128]	@ (800119c <HAL_RCC_OscConfig+0x5e8>)
 800111a:	4313      	orrs	r3, r2
 800111c:	600b      	str	r3, [r1, #0]
 800111e:	e06c      	b.n	80011fa <HAL_RCC_OscConfig+0x646>
 8001120:	2301      	movs	r3, #1
 8001122:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001126:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001132:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001136:	fab3 f383 	clz	r3, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001140:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	461a      	mov	r2, r3
 8001148:	2300      	movs	r3, #0
 800114a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fa2c 	bl	80005a8 <HAL_GetTick>
 8001150:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001154:	e00a      	b.n	800116c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001156:	f7ff fa27 	bl	80005a8 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d902      	bls.n	800116c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	f000 bd5a 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
 800116c:	2302      	movs	r3, #2
 800116e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800117e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	095b      	lsrs	r3, r3, #5
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b01      	cmp	r3, #1
 8001194:	d104      	bne.n	80011a0 <HAL_RCC_OscConfig+0x5ec>
 8001196:	4b01      	ldr	r3, [pc, #4]	@ (800119c <HAL_RCC_OscConfig+0x5e8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	e015      	b.n	80011c8 <HAL_RCC_OscConfig+0x614>
 800119c:	40021000 	.word	0x40021000
 80011a0:	2302      	movs	r3, #2
 80011a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80011b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80011bc:	fa93 f3a3 	rbit	r3, r3
 80011c0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80011c4:	4bc8      	ldr	r3, [pc, #800]	@ (80014e8 <HAL_RCC_OscConfig+0x934>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011c8:	2202      	movs	r2, #2
 80011ca:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80011ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80011d2:	fa92 f2a2 	rbit	r2, r2
 80011d6:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80011da:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80011de:	fab2 f282 	clz	r2, r2
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	f042 0220 	orr.w	r2, r2, #32
 80011e8:	b2d2      	uxtb	r2, r2
 80011ea:	f002 021f 	and.w	r2, r2, #31
 80011ee:	2101      	movs	r1, #1
 80011f0:	fa01 f202 	lsl.w	r2, r1, r2
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1ad      	bne.n	8001156 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80011fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	2b00      	cmp	r3, #0
 800120c:	f000 8110 	beq.w	8001430 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001214:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d079      	beq.n	8001314 <HAL_RCC_OscConfig+0x760>
 8001220:	2301      	movs	r3, #1
 8001222:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001236:	fab3 f383 	clz	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	4bab      	ldr	r3, [pc, #684]	@ (80014ec <HAL_RCC_OscConfig+0x938>)
 8001240:	4413      	add	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	461a      	mov	r2, r3
 8001246:	2301      	movs	r3, #1
 8001248:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124a:	f7ff f9ad 	bl	80005a8 <HAL_GetTick>
 800124e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001252:	e00a      	b.n	800126a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff f9a8 	bl	80005a8 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d902      	bls.n	800126a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	f000 bcdb 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
 800126a:	2302      	movs	r3, #2
 800126c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001270:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001274:	fa93 f3a3 	rbit	r3, r3
 8001278:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800127c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001280:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001284:	2202      	movs	r2, #2
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800128c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	fa93 f2a3 	rbit	r2, r3
 8001296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800129a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012a8:	2202      	movs	r2, #2
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	fa93 f2a3 	rbit	r2, r3
 80012ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012be:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80012c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c4:	4b88      	ldr	r3, [pc, #544]	@ (80014e8 <HAL_RCC_OscConfig+0x934>)
 80012c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012d0:	2102      	movs	r1, #2
 80012d2:	6019      	str	r1, [r3, #0]
 80012d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012d8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	fa93 f1a3 	rbit	r1, r3
 80012e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012e6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80012ea:	6019      	str	r1, [r3, #0]
  return result;
 80012ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80012f0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	fab3 f383 	clz	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f003 031f 	and.w	r3, r3, #31
 8001306:	2101      	movs	r1, #1
 8001308:	fa01 f303 	lsl.w	r3, r1, r3
 800130c:	4013      	ands	r3, r2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0a0      	beq.n	8001254 <HAL_RCC_OscConfig+0x6a0>
 8001312:	e08d      	b.n	8001430 <HAL_RCC_OscConfig+0x87c>
 8001314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001318:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001320:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001324:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	fa93 f2a3 	rbit	r2, r3
 800132e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001332:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001336:	601a      	str	r2, [r3, #0]
  return result;
 8001338:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800133c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001340:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001342:	fab3 f383 	clz	r3, r3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	4b68      	ldr	r3, [pc, #416]	@ (80014ec <HAL_RCC_OscConfig+0x938>)
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	461a      	mov	r2, r3
 8001352:	2300      	movs	r3, #0
 8001354:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001356:	f7ff f927 	bl	80005a8 <HAL_GetTick>
 800135a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135e:	e00a      	b.n	8001376 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001360:	f7ff f922 	bl	80005a8 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d902      	bls.n	8001376 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	f000 bc55 	b.w	8001c20 <HAL_RCC_OscConfig+0x106c>
 8001376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800137a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800137e:	2202      	movs	r2, #2
 8001380:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001386:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	fa93 f2a3 	rbit	r2, r3
 8001390:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001394:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800139e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013a2:	2202      	movs	r2, #2
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013aa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	fa93 f2a3 	rbit	r2, r3
 80013b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80013c6:	2202      	movs	r2, #2
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ce:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	fa93 f2a3 	rbit	r2, r3
 80013d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013dc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80013e0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e2:	4b41      	ldr	r3, [pc, #260]	@ (80014e8 <HAL_RCC_OscConfig+0x934>)
 80013e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80013ee:	2102      	movs	r1, #2
 80013f0:	6019      	str	r1, [r3, #0]
 80013f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013f6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	fa93 f1a3 	rbit	r1, r3
 8001400:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001404:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001408:	6019      	str	r1, [r3, #0]
  return result;
 800140a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800140e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	fab3 f383 	clz	r3, r3
 8001418:	b2db      	uxtb	r3, r3
 800141a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f003 031f 	and.w	r3, r3, #31
 8001424:	2101      	movs	r1, #1
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	4013      	ands	r3, r2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d197      	bne.n	8001360 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001434:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 81a1 	beq.w	8001788 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144c:	4b26      	ldr	r3, [pc, #152]	@ (80014e8 <HAL_RCC_OscConfig+0x934>)
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d116      	bne.n	8001486 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001458:	4b23      	ldr	r3, [pc, #140]	@ (80014e8 <HAL_RCC_OscConfig+0x934>)
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	4a22      	ldr	r2, [pc, #136]	@ (80014e8 <HAL_RCC_OscConfig+0x934>)
 800145e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001462:	61d3      	str	r3, [r2, #28]
 8001464:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <HAL_RCC_OscConfig+0x934>)
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800146c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001470:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800147a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800147e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001480:	2301      	movs	r3, #1
 8001482:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001486:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <HAL_RCC_OscConfig+0x93c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d11a      	bne.n	80014c8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <HAL_RCC_OscConfig+0x93c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a16      	ldr	r2, [pc, #88]	@ (80014f0 <HAL_RCC_OscConfig+0x93c>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149e:	f7ff f883 	bl	80005a8 <HAL_GetTick>
 80014a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a6:	e009      	b.n	80014bc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a8:	f7ff f87e 	bl	80005a8 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b64      	cmp	r3, #100	@ 0x64
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e3b1      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <HAL_RCC_OscConfig+0x93c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0ef      	beq.n	80014a8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d10d      	bne.n	80014f4 <HAL_RCC_OscConfig+0x940>
 80014d8:	4b03      	ldr	r3, [pc, #12]	@ (80014e8 <HAL_RCC_OscConfig+0x934>)
 80014da:	6a1b      	ldr	r3, [r3, #32]
 80014dc:	4a02      	ldr	r2, [pc, #8]	@ (80014e8 <HAL_RCC_OscConfig+0x934>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6213      	str	r3, [r2, #32]
 80014e4:	e03c      	b.n	8001560 <HAL_RCC_OscConfig+0x9ac>
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000
 80014ec:	10908120 	.word	0x10908120
 80014f0:	40007000 	.word	0x40007000
 80014f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d10c      	bne.n	800151e <HAL_RCC_OscConfig+0x96a>
 8001504:	4bc1      	ldr	r3, [pc, #772]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4ac0      	ldr	r2, [pc, #768]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 800150a:	f023 0301 	bic.w	r3, r3, #1
 800150e:	6213      	str	r3, [r2, #32]
 8001510:	4bbe      	ldr	r3, [pc, #760]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4abd      	ldr	r2, [pc, #756]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 8001516:	f023 0304 	bic.w	r3, r3, #4
 800151a:	6213      	str	r3, [r2, #32]
 800151c:	e020      	b.n	8001560 <HAL_RCC_OscConfig+0x9ac>
 800151e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001522:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	2b05      	cmp	r3, #5
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x994>
 800152e:	4bb7      	ldr	r3, [pc, #732]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4ab6      	ldr	r2, [pc, #728]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6213      	str	r3, [r2, #32]
 800153a:	4bb4      	ldr	r3, [pc, #720]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	4ab3      	ldr	r2, [pc, #716]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6213      	str	r3, [r2, #32]
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0x9ac>
 8001548:	4bb0      	ldr	r3, [pc, #704]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	4aaf      	ldr	r2, [pc, #700]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6213      	str	r3, [r2, #32]
 8001554:	4bad      	ldr	r3, [pc, #692]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 8001556:	6a1b      	ldr	r3, [r3, #32]
 8001558:	4aac      	ldr	r2, [pc, #688]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 800155a:	f023 0304 	bic.w	r3, r3, #4
 800155e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001560:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001564:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 8081 	beq.w	8001674 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff f819 	bl	80005a8 <HAL_GetTick>
 8001576:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157a:	e00b      	b.n	8001594 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff f814 	bl	80005a8 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e345      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
 8001594:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001598:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800159c:	2202      	movs	r2, #2
 800159e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	fa93 f2a3 	rbit	r2, r3
 80015ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015b2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80015c0:	2202      	movs	r2, #2
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015c8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	fa93 f2a3 	rbit	r2, r3
 80015d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015d6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80015da:	601a      	str	r2, [r3, #0]
  return result;
 80015dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80015e4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e6:	fab3 f383 	clz	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	095b      	lsrs	r3, r3, #5
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d102      	bne.n	8001600 <HAL_RCC_OscConfig+0xa4c>
 80015fa:	4b84      	ldr	r3, [pc, #528]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	e013      	b.n	8001628 <HAL_RCC_OscConfig+0xa74>
 8001600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001604:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001608:	2202      	movs	r2, #2
 800160a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001610:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	fa93 f2a3 	rbit	r2, r3
 800161a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	4b79      	ldr	r3, [pc, #484]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 8001626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001628:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800162c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001630:	2102      	movs	r1, #2
 8001632:	6011      	str	r1, [r2, #0]
 8001634:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001638:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	fa92 f1a2 	rbit	r1, r2
 8001642:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001646:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800164a:	6011      	str	r1, [r2, #0]
  return result;
 800164c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001650:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001654:	6812      	ldr	r2, [r2, #0]
 8001656:	fab2 f282 	clz	r2, r2
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001660:	b2d2      	uxtb	r2, r2
 8001662:	f002 021f 	and.w	r2, r2, #31
 8001666:	2101      	movs	r1, #1
 8001668:	fa01 f202 	lsl.w	r2, r1, r2
 800166c:	4013      	ands	r3, r2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d084      	beq.n	800157c <HAL_RCC_OscConfig+0x9c8>
 8001672:	e07f      	b.n	8001774 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001674:	f7fe ff98 	bl	80005a8 <HAL_GetTick>
 8001678:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167c:	e00b      	b.n	8001696 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800167e:	f7fe ff93 	bl	80005a8 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e2c4      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
 8001696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800169a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800169e:	2202      	movs	r2, #2
 80016a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016a6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	fa93 f2a3 	rbit	r2, r3
 80016b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016b4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016be:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80016c2:	2202      	movs	r2, #2
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016ca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	fa93 f2a3 	rbit	r2, r3
 80016d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016d8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80016dc:	601a      	str	r2, [r3, #0]
  return result;
 80016de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80016e2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80016e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f043 0302 	orr.w	r3, r3, #2
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d102      	bne.n	8001702 <HAL_RCC_OscConfig+0xb4e>
 80016fc:	4b43      	ldr	r3, [pc, #268]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	e013      	b.n	800172a <HAL_RCC_OscConfig+0xb76>
 8001702:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001706:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800170a:	2202      	movs	r2, #2
 800170c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001712:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	fa93 f2a3 	rbit	r2, r3
 800171c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001720:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	4b39      	ldr	r3, [pc, #228]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800172e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001732:	2102      	movs	r1, #2
 8001734:	6011      	str	r1, [r2, #0]
 8001736:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800173a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	fa92 f1a2 	rbit	r1, r2
 8001744:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001748:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800174c:	6011      	str	r1, [r2, #0]
  return result;
 800174e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001752:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	fab2 f282 	clz	r2, r2
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	f002 021f 	and.w	r2, r2, #31
 8001768:	2101      	movs	r1, #1
 800176a:	fa01 f202 	lsl.w	r2, r1, r2
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d184      	bne.n	800167e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001774:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177c:	4b23      	ldr	r3, [pc, #140]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	4a22      	ldr	r2, [pc, #136]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 8001782:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001786:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800178c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	2b00      	cmp	r3, #0
 8001796:	f000 8242 	beq.w	8001c1e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800179a:	4b1c      	ldr	r3, [pc, #112]	@ (800180c <HAL_RCC_OscConfig+0xc58>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b08      	cmp	r3, #8
 80017a4:	f000 8213 	beq.w	8001bce <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	f040 8162 	bne.w	8001a7e <HAL_RCC_OscConfig+0xeca>
 80017ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017be:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80017c2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80017c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017cc:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fa93 f2a3 	rbit	r2, r3
 80017d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017da:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80017de:	601a      	str	r2, [r3, #0]
  return result;
 80017e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017e4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80017e8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80017f4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	461a      	mov	r2, r3
 80017fc:	2300      	movs	r3, #0
 80017fe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7fe fed2 	bl	80005a8 <HAL_GetTick>
 8001804:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001808:	e00c      	b.n	8001824 <HAL_RCC_OscConfig+0xc70>
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001810:	f7fe feca 	bl	80005a8 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1fd      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
 8001824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001828:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800182c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001836:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	fa93 f2a3 	rbit	r2, r3
 8001840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001844:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001848:	601a      	str	r2, [r3, #0]
  return result;
 800184a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800184e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001852:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	095b      	lsrs	r3, r3, #5
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b01      	cmp	r3, #1
 8001866:	d102      	bne.n	800186e <HAL_RCC_OscConfig+0xcba>
 8001868:	4bb0      	ldr	r3, [pc, #704]	@ (8001b2c <HAL_RCC_OscConfig+0xf78>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e027      	b.n	80018be <HAL_RCC_OscConfig+0xd0a>
 800186e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001872:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001876:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800187a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001880:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	fa93 f2a3 	rbit	r2, r3
 800188a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800188e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001898:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800189c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fa93 f2a3 	rbit	r2, r3
 80018b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	4b9c      	ldr	r3, [pc, #624]	@ (8001b2c <HAL_RCC_OscConfig+0xf78>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018be:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018c2:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80018c6:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80018ca:	6011      	str	r1, [r2, #0]
 80018cc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018d0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	fa92 f1a2 	rbit	r1, r2
 80018da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018de:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80018e2:	6011      	str	r1, [r2, #0]
  return result;
 80018e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80018e8:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80018ec:	6812      	ldr	r2, [r2, #0]
 80018ee:	fab2 f282 	clz	r2, r2
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	f042 0220 	orr.w	r2, r2, #32
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	f002 021f 	and.w	r2, r2, #31
 80018fe:	2101      	movs	r1, #1
 8001900:	fa01 f202 	lsl.w	r2, r1, r2
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d182      	bne.n	8001810 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800190a:	4b88      	ldr	r3, [pc, #544]	@ (8001b2c <HAL_RCC_OscConfig+0xf78>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001916:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800191e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001922:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	430b      	orrs	r3, r1
 800192c:	497f      	ldr	r1, [pc, #508]	@ (8001b2c <HAL_RCC_OscConfig+0xf78>)
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
 8001932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001936:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800193a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800193e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001944:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	fa93 f2a3 	rbit	r2, r3
 800194e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001952:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001956:	601a      	str	r2, [r3, #0]
  return result;
 8001958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800195c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001960:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800196c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	461a      	mov	r2, r3
 8001974:	2301      	movs	r3, #1
 8001976:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7fe fe16 	bl	80005a8 <HAL_GetTick>
 800197c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001980:	e009      	b.n	8001996 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001982:	f7fe fe11 	bl	80005a8 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e144      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
 8001996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800199a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800199e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019a8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	fa93 f2a3 	rbit	r2, r3
 80019b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80019ba:	601a      	str	r2, [r3, #0]
  return result;
 80019bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80019c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019c6:	fab3 f383 	clz	r3, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	095b      	lsrs	r3, r3, #5
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d102      	bne.n	80019e0 <HAL_RCC_OscConfig+0xe2c>
 80019da:	4b54      	ldr	r3, [pc, #336]	@ (8001b2c <HAL_RCC_OscConfig+0xf78>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	e027      	b.n	8001a30 <HAL_RCC_OscConfig+0xe7c>
 80019e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80019e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	fa93 f2a3 	rbit	r2, r3
 80019fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a00:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001a0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a18:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	fa93 f2a3 	rbit	r2, r3
 8001a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a26:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b2c <HAL_RCC_OscConfig+0xf78>)
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a30:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a34:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001a38:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001a3c:	6011      	str	r1, [r2, #0]
 8001a3e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a42:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	fa92 f1a2 	rbit	r1, r2
 8001a4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a50:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001a54:	6011      	str	r1, [r2, #0]
  return result;
 8001a56:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001a5a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	fab2 f282 	clz	r2, r2
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	f042 0220 	orr.w	r2, r2, #32
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f002 021f 	and.w	r2, r2, #31
 8001a70:	2101      	movs	r1, #1
 8001a72:	fa01 f202 	lsl.w	r2, r1, r2
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d082      	beq.n	8001982 <HAL_RCC_OscConfig+0xdce>
 8001a7c:	e0cf      	b.n	8001c1e <HAL_RCC_OscConfig+0x106a>
 8001a7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a82:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001a86:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a90:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	fa93 f2a3 	rbit	r2, r3
 8001a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001aa2:	601a      	str	r2, [r3, #0]
  return result;
 8001aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aa8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001aac:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ab8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	461a      	mov	r2, r3
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7fe fd70 	bl	80005a8 <HAL_GetTick>
 8001ac8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001acc:	e009      	b.n	8001ae2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ace:	f7fe fd6b 	bl	80005a8 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e09e      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
 8001ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001aea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001af4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	fa93 f2a3 	rbit	r2, r3
 8001afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b02:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b06:	601a      	str	r2, [r3, #0]
  return result;
 8001b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001b10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b12:	fab3 f383 	clz	r3, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	095b      	lsrs	r3, r3, #5
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d104      	bne.n	8001b30 <HAL_RCC_OscConfig+0xf7c>
 8001b26:	4b01      	ldr	r3, [pc, #4]	@ (8001b2c <HAL_RCC_OscConfig+0xf78>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	e029      	b.n	8001b80 <HAL_RCC_OscConfig+0xfcc>
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b34:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b38:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b42:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	fa93 f2a3 	rbit	r2, r3
 8001b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b50:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001b5e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b68:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	fa93 f2a3 	rbit	r2, r3
 8001b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b76:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c2c <HAL_RCC_OscConfig+0x1078>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b84:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001b88:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b8c:	6011      	str	r1, [r2, #0]
 8001b8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001b92:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	fa92 f1a2 	rbit	r1, r2
 8001b9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ba0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001ba4:	6011      	str	r1, [r2, #0]
  return result;
 8001ba6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001baa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	fab2 f282 	clz	r2, r2
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	f042 0220 	orr.w	r2, r2, #32
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	f002 021f 	and.w	r2, r2, #31
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d180      	bne.n	8001ace <HAL_RCC_OscConfig+0xf1a>
 8001bcc:	e027      	b.n	8001c1e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e01e      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001be2:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_RCC_OscConfig+0x1078>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001bee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001bf2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d10b      	bne.n	8001c1a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001c02:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001c06:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001c0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d001      	beq.n	8001c1e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000

08001c30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b09e      	sub	sp, #120	@ 0x78
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e162      	b.n	8001f0e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c48:	4b90      	ldr	r3, [pc, #576]	@ (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d910      	bls.n	8001c78 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b8d      	ldr	r3, [pc, #564]	@ (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 0207 	bic.w	r2, r3, #7
 8001c5e:	498b      	ldr	r1, [pc, #556]	@ (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c66:	4b89      	ldr	r3, [pc, #548]	@ (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	683a      	ldr	r2, [r7, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d001      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e14a      	b.n	8001f0e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b82      	ldr	r3, [pc, #520]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	497f      	ldr	r1, [pc, #508]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001c92:	4313      	orrs	r3, r2
 8001c94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80dc 	beq.w	8001e5c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d13c      	bne.n	8001d26 <HAL_RCC_ClockConfig+0xf6>
 8001cac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cb0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001cb4:	fa93 f3a3 	rbit	r3, r3
 8001cb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001cba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbc:	fab3 f383 	clz	r3, r3
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d102      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xa6>
 8001cd0:	4b6f      	ldr	r3, [pc, #444]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	e00f      	b.n	8001cf6 <HAL_RCC_ClockConfig+0xc6>
 8001cd6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001cde:	fa93 f3a3 	rbit	r3, r3
 8001ce2:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ce4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ce8:	663b      	str	r3, [r7, #96]	@ 0x60
 8001cea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001cf2:	4b67      	ldr	r3, [pc, #412]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001cfa:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001cfc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001cfe:	fa92 f2a2 	rbit	r2, r2
 8001d02:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001d04:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d06:	fab2 f282 	clz	r2, r2
 8001d0a:	b2d2      	uxtb	r2, r2
 8001d0c:	f042 0220 	orr.w	r2, r2, #32
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	f002 021f 	and.w	r2, r2, #31
 8001d16:	2101      	movs	r1, #1
 8001d18:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d17b      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0f3      	b.n	8001f0e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d13c      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x178>
 8001d2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d32:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d3e:	fab3 f383 	clz	r3, r3
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	095b      	lsrs	r3, r3, #5
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d102      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x128>
 8001d52:	4b4f      	ldr	r3, [pc, #316]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	e00f      	b.n	8001d78 <HAL_RCC_ClockConfig+0x148>
 8001d58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d6e:	fa93 f3a3 	rbit	r3, r3
 8001d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d74:	4b46      	ldr	r3, [pc, #280]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d7c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8001d7e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001d80:	fa92 f2a2 	rbit	r2, r2
 8001d84:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8001d86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d88:	fab2 f282 	clz	r2, r2
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	f042 0220 	orr.w	r2, r2, #32
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	f002 021f 	and.w	r2, r2, #31
 8001d98:	2101      	movs	r1, #1
 8001d9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d13a      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0b2      	b.n	8001f0e <HAL_RCC_ClockConfig+0x2de>
 8001da8:	2302      	movs	r3, #2
 8001daa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8001db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db6:	fab3 f383 	clz	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	095b      	lsrs	r3, r3, #5
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x1a0>
 8001dca:	4b31      	ldr	r3, [pc, #196]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	e00d      	b.n	8001dec <HAL_RCC_ClockConfig+0x1bc>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd6:	fa93 f3a3 	rbit	r3, r3
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ddc:	2302      	movs	r3, #2
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	6a3b      	ldr	r3, [r7, #32]
 8001de2:	fa93 f3a3 	rbit	r3, r3
 8001de6:	61fb      	str	r3, [r7, #28]
 8001de8:	4b29      	ldr	r3, [pc, #164]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	2202      	movs	r2, #2
 8001dee:	61ba      	str	r2, [r7, #24]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	fa92 f2a2 	rbit	r2, r2
 8001df6:	617a      	str	r2, [r7, #20]
  return result;
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	fab2 f282 	clz	r2, r2
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	f042 0220 	orr.w	r2, r2, #32
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	f002 021f 	and.w	r2, r2, #31
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e079      	b.n	8001f0e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f023 0203 	bic.w	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	491a      	ldr	r1, [pc, #104]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e2c:	f7fe fbbc 	bl	80005a8 <HAL_GetTick>
 8001e30:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f7fe fbb8 	bl	80005a8 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e061      	b.n	8001f0e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <HAL_RCC_ClockConfig+0x260>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 020c 	and.w	r2, r3, #12
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d1eb      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d214      	bcs.n	8001e94 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 0207 	bic.w	r2, r3, #7
 8001e72:	4906      	ldr	r1, [pc, #24]	@ (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <HAL_RCC_ClockConfig+0x25c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e040      	b.n	8001f0e <HAL_RCC_ClockConfig+0x2de>
 8001e8c:	40022000 	.word	0x40022000
 8001e90:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f18 <HAL_RCC_ClockConfig+0x2e8>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	491a      	ldr	r1, [pc, #104]	@ (8001f18 <HAL_RCC_ClockConfig+0x2e8>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ebe:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <HAL_RCC_ClockConfig+0x2e8>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4912      	ldr	r1, [pc, #72]	@ (8001f18 <HAL_RCC_ClockConfig+0x2e8>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ed2:	f000 f829 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8001ed6:	4601      	mov	r1, r0
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <HAL_RCC_ClockConfig+0x2e8>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ee0:	22f0      	movs	r2, #240	@ 0xf0
 8001ee2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	fa92 f2a2 	rbit	r2, r2
 8001eea:	60fa      	str	r2, [r7, #12]
  return result;
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	fab2 f282 	clz	r2, r2
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	40d3      	lsrs	r3, r2
 8001ef6:	4a09      	ldr	r2, [pc, #36]	@ (8001f1c <HAL_RCC_ClockConfig+0x2ec>)
 8001ef8:	5cd3      	ldrb	r3, [r2, r3]
 8001efa:	fa21 f303 	lsr.w	r3, r1, r3
 8001efe:	4a08      	ldr	r2, [pc, #32]	@ (8001f20 <HAL_RCC_ClockConfig+0x2f0>)
 8001f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001f02:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <HAL_RCC_ClockConfig+0x2f4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fb0a 	bl	8000520 <HAL_InitTick>
  
  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3778      	adds	r7, #120	@ 0x78
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	08003458 	.word	0x08003458
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000004 	.word	0x20000004

08001f28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b08b      	sub	sp, #44	@ 0x2c
 8001f2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f42:	4b29      	ldr	r3, [pc, #164]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d002      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x30>
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d003      	beq.n	8001f5e <HAL_RCC_GetSysClockFreq+0x36>
 8001f56:	e03c      	b.n	8001fd2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f58:	4b24      	ldr	r3, [pc, #144]	@ (8001fec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f5a:	623b      	str	r3, [r7, #32]
      break;
 8001f5c:	e03c      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8001f64:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8001f68:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	fa92 f2a2 	rbit	r2, r2
 8001f70:	607a      	str	r2, [r7, #4]
  return result;
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	fab2 f282 	clz	r2, r2
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	40d3      	lsrs	r3, r2
 8001f7c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f82:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	220f      	movs	r2, #15
 8001f8c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	fa92 f2a2 	rbit	r2, r2
 8001f94:	60fa      	str	r2, [r7, #12]
  return result;
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	fab2 f282 	clz	r2, r2
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	40d3      	lsrs	r3, r2
 8001fa0:	4a14      	ldr	r2, [pc, #80]	@ (8001ff4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001fb0:	4a0e      	ldr	r2, [pc, #56]	@ (8001fec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc0:	e004      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ff8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	623b      	str	r3, [r7, #32]
      break;
 8001fd0:	e002      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd2:	4b06      	ldr	r3, [pc, #24]	@ (8001fec <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fd4:	623b      	str	r3, [r7, #32]
      break;
 8001fd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	372c      	adds	r7, #44	@ 0x2c
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	007a1200 	.word	0x007a1200
 8001ff0:	08003470 	.word	0x08003470
 8001ff4:	08003480 	.word	0x08003480
 8001ff8:	003d0900 	.word	0x003d0900

08001ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002000:	4b03      	ldr	r3, [pc, #12]	@ (8002010 <HAL_RCC_GetHCLKFreq+0x14>)
 8002002:	681b      	ldr	r3, [r3, #0]
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000000 	.word	0x20000000

08002014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800201a:	f7ff ffef 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 800201e:	4601      	mov	r1, r0
 8002020:	4b0b      	ldr	r3, [pc, #44]	@ (8002050 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002028:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800202c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	fa92 f2a2 	rbit	r2, r2
 8002034:	603a      	str	r2, [r7, #0]
  return result;
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	fab2 f282 	clz	r2, r2
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	40d3      	lsrs	r3, r2
 8002040:	4a04      	ldr	r2, [pc, #16]	@ (8002054 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	08003468 	.word	0x08003468

08002058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800205e:	f7ff ffcd 	bl	8001ffc <HAL_RCC_GetHCLKFreq>
 8002062:	4601      	mov	r1, r0
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800206c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002070:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	fa92 f2a2 	rbit	r2, r2
 8002078:	603a      	str	r2, [r7, #0]
  return result;
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	fab2 f282 	clz	r2, r2
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	40d3      	lsrs	r3, r2
 8002084:	4a04      	ldr	r2, [pc, #16]	@ (8002098 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002086:	5cd3      	ldrb	r3, [r2, r3]
 8002088:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800208c:	4618      	mov	r0, r3
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40021000 	.word	0x40021000
 8002098:	08003468 	.word	0x08003468

0800209c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e040      	b.n	8002130 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d106      	bne.n	80020c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7fe f958 	bl	8000374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2224      	movs	r2, #36	@ 0x24
 80020c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0201 	bic.w	r2, r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fb80 	bl	80027e0 <UART_SetConfig>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e022      	b.n	8002130 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fcaa 	bl	8002a4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002106:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002116:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fd31 	bl	8002b90 <UART_CheckIdleState>
 800212e:	4603      	mov	r3, r0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	@ 0x28
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	4613      	mov	r3, r2
 8002144:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800214c:	2b20      	cmp	r3, #32
 800214e:	d132      	bne.n	80021b6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <HAL_UART_Receive_IT+0x24>
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e02b      	b.n	80021b8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2200      	movs	r2, #0
 8002164:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d018      	beq.n	80021a6 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	e853 3f00 	ldrex	r3, [r3]
 8002180:	613b      	str	r3, [r7, #16]
   return(result);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	623b      	str	r3, [r7, #32]
 8002194:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002196:	69f9      	ldr	r1, [r7, #28]
 8002198:	6a3a      	ldr	r2, [r7, #32]
 800219a:	e841 2300 	strex	r3, r2, [r1]
 800219e:	61bb      	str	r3, [r7, #24]
   return(result);
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1e6      	bne.n	8002174 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	461a      	mov	r2, r3
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 fdff 	bl	8002db0 <UART_Start_Receive_IT>
 80021b2:	4603      	mov	r3, r0
 80021b4:	e000      	b.n	80021b8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80021b6:	2302      	movs	r3, #2
  }
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3728      	adds	r7, #40	@ 0x28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b0ba      	sub	sp, #232	@ 0xe8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80021e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80021ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80021ee:	4013      	ands	r3, r2
 80021f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80021f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d115      	bne.n	8002228 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80021fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00f      	beq.n	8002228 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800220c:	f003 0320 	and.w	r3, r3, #32
 8002210:	2b00      	cmp	r3, #0
 8002212:	d009      	beq.n	8002228 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 82ab 	beq.w	8002774 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	4798      	blx	r3
      }
      return;
 8002226:	e2a5      	b.n	8002774 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 8117 	beq.w	8002460 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d106      	bne.n	800224c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800223e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002242:	4b85      	ldr	r3, [pc, #532]	@ (8002458 <HAL_UART_IRQHandler+0x298>)
 8002244:	4013      	ands	r3, r2
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 810a 	beq.w	8002460 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800224c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d011      	beq.n	800227c <HAL_UART_IRQHandler+0xbc>
 8002258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800225c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00b      	beq.n	800227c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2201      	movs	r2, #1
 800226a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002272:	f043 0201 	orr.w	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800227c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d011      	beq.n	80022ac <HAL_UART_IRQHandler+0xec>
 8002288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00b      	beq.n	80022ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2202      	movs	r2, #2
 800229a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022a2:	f043 0204 	orr.w	r2, r3, #4
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80022ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d011      	beq.n	80022dc <HAL_UART_IRQHandler+0x11c>
 80022b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00b      	beq.n	80022dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2204      	movs	r2, #4
 80022ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022d2:	f043 0202 	orr.w	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80022dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d017      	beq.n	8002318 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80022ec:	f003 0320 	and.w	r3, r3, #32
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80022f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80022f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00b      	beq.n	8002318 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2208      	movs	r2, #8
 8002306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800230e:	f043 0208 	orr.w	r2, r3, #8
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800231c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002320:	2b00      	cmp	r3, #0
 8002322:	d012      	beq.n	800234a <HAL_UART_IRQHandler+0x18a>
 8002324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002328:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00c      	beq.n	800234a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002340:	f043 0220 	orr.w	r2, r3, #32
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 8211 	beq.w	8002778 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800235a:	f003 0320 	and.w	r3, r3, #32
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00d      	beq.n	800237e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b00      	cmp	r3, #0
 800236c:	d007      	beq.n	800237e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002384:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002392:	2b40      	cmp	r3, #64	@ 0x40
 8002394:	d005      	beq.n	80023a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800239a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d04f      	beq.n	8002442 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fdca 	bl	8002f3c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b2:	2b40      	cmp	r3, #64	@ 0x40
 80023b4:	d141      	bne.n	800243a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	3308      	adds	r3, #8
 80023bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80023c4:	e853 3f00 	ldrex	r3, [r3]
 80023c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80023cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80023d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3308      	adds	r3, #8
 80023de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80023e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80023e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80023ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80023f2:	e841 2300 	strex	r3, r2, [r1]
 80023f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80023fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1d9      	bne.n	80023b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002406:	2b00      	cmp	r3, #0
 8002408:	d013      	beq.n	8002432 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800240e:	4a13      	ldr	r2, [pc, #76]	@ (800245c <HAL_UART_IRQHandler+0x29c>)
 8002410:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fa1c 	bl	8000854 <HAL_DMA_Abort_IT>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d017      	beq.n	8002452 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800242c:	4610      	mov	r0, r2
 800242e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002430:	e00f      	b.n	8002452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f9be 	bl	80027b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002438:	e00b      	b.n	8002452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f9ba 	bl	80027b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002440:	e007      	b.n	8002452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f9b6 	bl	80027b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002450:	e192      	b.n	8002778 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002452:	bf00      	nop
    return;
 8002454:	e190      	b.n	8002778 <HAL_UART_IRQHandler+0x5b8>
 8002456:	bf00      	nop
 8002458:	04000120 	.word	0x04000120
 800245c:	08003005 	.word	0x08003005

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002464:	2b01      	cmp	r3, #1
 8002466:	f040 814b 	bne.w	8002700 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800246a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8144 	beq.w	8002700 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800247c:	f003 0310 	and.w	r3, r3, #16
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 813d 	beq.w	8002700 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2210      	movs	r2, #16
 800248c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002498:	2b40      	cmp	r3, #64	@ 0x40
 800249a:	f040 80b5 	bne.w	8002608 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80024aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8164 	beq.w	800277c <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80024ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024be:	429a      	cmp	r2, r3
 80024c0:	f080 815c 	bcs.w	800277c <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80024ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b20      	cmp	r3, #32
 80024d6:	f000 8086 	beq.w	80025e6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80024e6:	e853 3f00 	ldrex	r3, [r3]
 80024ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80024ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80024f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002504:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002508:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002510:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002514:	e841 2300 	strex	r3, r2, [r1]
 8002518:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800251c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1da      	bne.n	80024da <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	3308      	adds	r3, #8
 800252a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800252e:	e853 3f00 	ldrex	r3, [r3]
 8002532:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002534:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3308      	adds	r3, #8
 8002544:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002548:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800254c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002550:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002554:	e841 2300 	strex	r3, r2, [r1]
 8002558:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800255a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800255c:	2b00      	cmp	r3, #0
 800255e:	d1e1      	bne.n	8002524 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	3308      	adds	r3, #8
 8002566:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002568:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800256a:	e853 3f00 	ldrex	r3, [r3]
 800256e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002570:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3308      	adds	r3, #8
 8002580:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002584:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002586:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002588:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800258a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800258c:	e841 2300 	strex	r3, r2, [r1]
 8002590:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002592:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1e3      	bne.n	8002560 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2220      	movs	r2, #32
 800259c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025ae:	e853 3f00 	ldrex	r3, [r3]
 80025b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80025b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025b6:	f023 0310 	bic.w	r3, r3, #16
 80025ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025ca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80025ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025d0:	e841 2300 	strex	r3, r2, [r1]
 80025d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80025d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e4      	bne.n	80025a6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe f8fe 	bl	80007e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2202      	movs	r2, #2
 80025ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	4619      	mov	r1, r3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f8e1 	bl	80027c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002606:	e0b9      	b.n	800277c <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002614:	b29b      	uxth	r3, r3
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002622:	b29b      	uxth	r3, r3
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 80ab 	beq.w	8002780 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 800262a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80a6 	beq.w	8002780 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263c:	e853 3f00 	ldrex	r3, [r3]
 8002640:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002644:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002648:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	461a      	mov	r2, r3
 8002652:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002656:	647b      	str	r3, [r7, #68]	@ 0x44
 8002658:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800265c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800265e:	e841 2300 	strex	r3, r2, [r1]
 8002662:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1e4      	bne.n	8002634 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	3308      	adds	r3, #8
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	e853 3f00 	ldrex	r3, [r3]
 8002678:	623b      	str	r3, [r7, #32]
   return(result);
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3308      	adds	r3, #8
 800268a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800268e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002690:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002692:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002696:	e841 2300 	strex	r3, r2, [r1]
 800269a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800269c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1e3      	bne.n	800266a <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	e853 3f00 	ldrex	r3, [r3]
 80026c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f023 0310 	bic.w	r3, r3, #16
 80026ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	461a      	mov	r2, r3
 80026d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026dc:	69b9      	ldr	r1, [r7, #24]
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	e841 2300 	strex	r3, r2, [r1]
 80026e4:	617b      	str	r3, [r7, #20]
   return(result);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1e4      	bne.n	80026b6 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80026f6:	4619      	mov	r1, r3
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f865 	bl	80027c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80026fe:	e03f      	b.n	8002780 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002704:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00e      	beq.n	800272a <HAL_UART_IRQHandler+0x56a>
 800270c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002720:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 fe56 	bl	80033d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002728:	e02d      	b.n	8002786 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800272a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800272e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00e      	beq.n	8002754 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002736:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800273a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273e:	2b00      	cmp	r3, #0
 8002740:	d008      	beq.n	8002754 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002746:	2b00      	cmp	r3, #0
 8002748:	d01c      	beq.n	8002784 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	4798      	blx	r3
    }
    return;
 8002752:	e017      	b.n	8002784 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800275c:	2b00      	cmp	r3, #0
 800275e:	d012      	beq.n	8002786 <HAL_UART_IRQHandler+0x5c6>
 8002760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00c      	beq.n	8002786 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fc5f 	bl	8003030 <UART_EndTransmit_IT>
    return;
 8002772:	e008      	b.n	8002786 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002774:	bf00      	nop
 8002776:	e006      	b.n	8002786 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002778:	bf00      	nop
 800277a:	e004      	b.n	8002786 <HAL_UART_IRQHandler+0x5c6>
      return;
 800277c:	bf00      	nop
 800277e:	e002      	b.n	8002786 <HAL_UART_IRQHandler+0x5c6>
      return;
 8002780:	bf00      	nop
 8002782:	e000      	b.n	8002786 <HAL_UART_IRQHandler+0x5c6>
    return;
 8002784:	bf00      	nop
  }

}
 8002786:	37e8      	adds	r7, #232	@ 0xe8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	4b8a      	ldr	r3, [pc, #552]	@ (8002a34 <UART_SetConfig+0x254>)
 800280c:	4013      	ands	r3, r2
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	6979      	ldr	r1, [r7, #20]
 8002814:	430b      	orrs	r3, r1
 8002816:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a1b      	ldr	r3, [r3, #32]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	4313      	orrs	r3, r2
 800283c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	697a      	ldr	r2, [r7, #20]
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a78      	ldr	r2, [pc, #480]	@ (8002a38 <UART_SetConfig+0x258>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d120      	bne.n	800289e <UART_SetConfig+0xbe>
 800285c:	4b77      	ldr	r3, [pc, #476]	@ (8002a3c <UART_SetConfig+0x25c>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b03      	cmp	r3, #3
 8002866:	d817      	bhi.n	8002898 <UART_SetConfig+0xb8>
 8002868:	a201      	add	r2, pc, #4	@ (adr r2, 8002870 <UART_SetConfig+0x90>)
 800286a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800286e:	bf00      	nop
 8002870:	08002881 	.word	0x08002881
 8002874:	0800288d 	.word	0x0800288d
 8002878:	08002893 	.word	0x08002893
 800287c:	08002887 	.word	0x08002887
 8002880:	2300      	movs	r3, #0
 8002882:	77fb      	strb	r3, [r7, #31]
 8002884:	e01d      	b.n	80028c2 <UART_SetConfig+0xe2>
 8002886:	2302      	movs	r3, #2
 8002888:	77fb      	strb	r3, [r7, #31]
 800288a:	e01a      	b.n	80028c2 <UART_SetConfig+0xe2>
 800288c:	2304      	movs	r3, #4
 800288e:	77fb      	strb	r3, [r7, #31]
 8002890:	e017      	b.n	80028c2 <UART_SetConfig+0xe2>
 8002892:	2308      	movs	r3, #8
 8002894:	77fb      	strb	r3, [r7, #31]
 8002896:	e014      	b.n	80028c2 <UART_SetConfig+0xe2>
 8002898:	2310      	movs	r3, #16
 800289a:	77fb      	strb	r3, [r7, #31]
 800289c:	e011      	b.n	80028c2 <UART_SetConfig+0xe2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a67      	ldr	r2, [pc, #412]	@ (8002a40 <UART_SetConfig+0x260>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d102      	bne.n	80028ae <UART_SetConfig+0xce>
 80028a8:	2300      	movs	r3, #0
 80028aa:	77fb      	strb	r3, [r7, #31]
 80028ac:	e009      	b.n	80028c2 <UART_SetConfig+0xe2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a64      	ldr	r2, [pc, #400]	@ (8002a44 <UART_SetConfig+0x264>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d102      	bne.n	80028be <UART_SetConfig+0xde>
 80028b8:	2300      	movs	r3, #0
 80028ba:	77fb      	strb	r3, [r7, #31]
 80028bc:	e001      	b.n	80028c2 <UART_SetConfig+0xe2>
 80028be:	2310      	movs	r3, #16
 80028c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028ca:	d15a      	bne.n	8002982 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80028cc:	7ffb      	ldrb	r3, [r7, #31]
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d827      	bhi.n	8002922 <UART_SetConfig+0x142>
 80028d2:	a201      	add	r2, pc, #4	@ (adr r2, 80028d8 <UART_SetConfig+0xf8>)
 80028d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d8:	080028fd 	.word	0x080028fd
 80028dc:	08002905 	.word	0x08002905
 80028e0:	0800290d 	.word	0x0800290d
 80028e4:	08002923 	.word	0x08002923
 80028e8:	08002913 	.word	0x08002913
 80028ec:	08002923 	.word	0x08002923
 80028f0:	08002923 	.word	0x08002923
 80028f4:	08002923 	.word	0x08002923
 80028f8:	0800291b 	.word	0x0800291b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028fc:	f7ff fb8a 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 8002900:	61b8      	str	r0, [r7, #24]
        break;
 8002902:	e013      	b.n	800292c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002904:	f7ff fba8 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 8002908:	61b8      	str	r0, [r7, #24]
        break;
 800290a:	e00f      	b.n	800292c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800290c:	4b4e      	ldr	r3, [pc, #312]	@ (8002a48 <UART_SetConfig+0x268>)
 800290e:	61bb      	str	r3, [r7, #24]
        break;
 8002910:	e00c      	b.n	800292c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002912:	f7ff fb09 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 8002916:	61b8      	str	r0, [r7, #24]
        break;
 8002918:	e008      	b.n	800292c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800291a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800291e:	61bb      	str	r3, [r7, #24]
        break;
 8002920:	e004      	b.n	800292c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	77bb      	strb	r3, [r7, #30]
        break;
 800292a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d074      	beq.n	8002a1c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	005a      	lsls	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	085b      	lsrs	r3, r3, #1
 800293c:	441a      	add	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	fbb2 f3f3 	udiv	r3, r2, r3
 8002946:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2b0f      	cmp	r3, #15
 800294c:	d916      	bls.n	800297c <UART_SetConfig+0x19c>
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002954:	d212      	bcs.n	800297c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f023 030f 	bic.w	r3, r3, #15
 800295e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	b29b      	uxth	r3, r3
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	b29a      	uxth	r2, r3
 800296c:	89fb      	ldrh	r3, [r7, #14]
 800296e:	4313      	orrs	r3, r2
 8002970:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	89fa      	ldrh	r2, [r7, #14]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	e04f      	b.n	8002a1c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	77bb      	strb	r3, [r7, #30]
 8002980:	e04c      	b.n	8002a1c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002982:	7ffb      	ldrb	r3, [r7, #31]
 8002984:	2b08      	cmp	r3, #8
 8002986:	d828      	bhi.n	80029da <UART_SetConfig+0x1fa>
 8002988:	a201      	add	r2, pc, #4	@ (adr r2, 8002990 <UART_SetConfig+0x1b0>)
 800298a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298e:	bf00      	nop
 8002990:	080029b5 	.word	0x080029b5
 8002994:	080029bd 	.word	0x080029bd
 8002998:	080029c5 	.word	0x080029c5
 800299c:	080029db 	.word	0x080029db
 80029a0:	080029cb 	.word	0x080029cb
 80029a4:	080029db 	.word	0x080029db
 80029a8:	080029db 	.word	0x080029db
 80029ac:	080029db 	.word	0x080029db
 80029b0:	080029d3 	.word	0x080029d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029b4:	f7ff fb2e 	bl	8002014 <HAL_RCC_GetPCLK1Freq>
 80029b8:	61b8      	str	r0, [r7, #24]
        break;
 80029ba:	e013      	b.n	80029e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029bc:	f7ff fb4c 	bl	8002058 <HAL_RCC_GetPCLK2Freq>
 80029c0:	61b8      	str	r0, [r7, #24]
        break;
 80029c2:	e00f      	b.n	80029e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029c4:	4b20      	ldr	r3, [pc, #128]	@ (8002a48 <UART_SetConfig+0x268>)
 80029c6:	61bb      	str	r3, [r7, #24]
        break;
 80029c8:	e00c      	b.n	80029e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029ca:	f7ff faad 	bl	8001f28 <HAL_RCC_GetSysClockFreq>
 80029ce:	61b8      	str	r0, [r7, #24]
        break;
 80029d0:	e008      	b.n	80029e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029d6:	61bb      	str	r3, [r7, #24]
        break;
 80029d8:	e004      	b.n	80029e4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	77bb      	strb	r3, [r7, #30]
        break;
 80029e2:	bf00      	nop
    }

    if (pclk != 0U)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d018      	beq.n	8002a1c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	085a      	lsrs	r2, r3, #1
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	441a      	add	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b0f      	cmp	r3, #15
 8002a02:	d909      	bls.n	8002a18 <UART_SetConfig+0x238>
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a0a:	d205      	bcs.n	8002a18 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60da      	str	r2, [r3, #12]
 8002a16:	e001      	b.n	8002a1c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002a28:	7fbb      	ldrb	r3, [r7, #30]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3720      	adds	r7, #32
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	efff69f3 	.word	0xefff69f3
 8002a38:	40013800 	.word	0x40013800
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40004400 	.word	0x40004400
 8002a44:	40004800 	.word	0x40004800
 8002a48:	007a1200 	.word	0x007a1200

08002a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a58:	f003 0301 	and.w	r3, r3, #1
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00a      	beq.n	8002a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	f003 0308 	and.w	r3, r3, #8
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00a      	beq.n	8002afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	f003 0320 	and.w	r3, r3, #32
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00a      	beq.n	8002b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d01a      	beq.n	8002b62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b4a:	d10a      	bne.n	8002b62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]
  }
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b098      	sub	sp, #96	@ 0x60
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ba0:	f7fd fd02 	bl	80005a8 <HAL_GetTick>
 8002ba4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0308 	and.w	r3, r3, #8
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d12e      	bne.n	8002c12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f88c 	bl	8002ce0 <UART_WaitOnFlagUntilTimeout>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d021      	beq.n	8002c12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bd6:	e853 3f00 	ldrex	r3, [r3]
 8002bda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002bf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bf4:	e841 2300 	strex	r3, r2, [r1]
 8002bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e6      	bne.n	8002bce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e062      	b.n	8002cd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b04      	cmp	r3, #4
 8002c1e:	d149      	bne.n	8002cb4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f856 	bl	8002ce0 <UART_WaitOnFlagUntilTimeout>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d03c      	beq.n	8002cb4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c42:	e853 3f00 	ldrex	r3, [r3]
 8002c46:	623b      	str	r3, [r7, #32]
   return(result);
 8002c48:	6a3b      	ldr	r3, [r7, #32]
 8002c4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c58:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c60:	e841 2300 	strex	r3, r2, [r1]
 8002c64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1e6      	bne.n	8002c3a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3308      	adds	r3, #8
 8002c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	e853 3f00 	ldrex	r3, [r3]
 8002c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3308      	adds	r3, #8
 8002c8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c8c:	61fa      	str	r2, [r7, #28]
 8002c8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	69b9      	ldr	r1, [r7, #24]
 8002c92:	69fa      	ldr	r2, [r7, #28]
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	617b      	str	r3, [r7, #20]
   return(result);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e5      	bne.n	8002c6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e011      	b.n	8002cd8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2220      	movs	r2, #32
 8002cbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3758      	adds	r7, #88	@ 0x58
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	603b      	str	r3, [r7, #0]
 8002cec:	4613      	mov	r3, r2
 8002cee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf0:	e049      	b.n	8002d86 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf8:	d045      	beq.n	8002d86 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfa:	f7fd fc55 	bl	80005a8 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d302      	bcc.n	8002d10 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e048      	b.n	8002da6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d031      	beq.n	8002d86 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	69db      	ldr	r3, [r3, #28]
 8002d28:	f003 0308 	and.w	r3, r3, #8
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d110      	bne.n	8002d52 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2208      	movs	r2, #8
 8002d36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f8ff 	bl	8002f3c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2208      	movs	r2, #8
 8002d42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

           return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e029      	b.n	8002da6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d60:	d111      	bne.n	8002d86 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f8e5 	bl	8002f3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2220      	movs	r2, #32
 8002d76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e00f      	b.n	8002da6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	bf0c      	ite	eq
 8002d96:	2301      	moveq	r3, #1
 8002d98:	2300      	movne	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d0a6      	beq.n	8002cf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b097      	sub	sp, #92	@ 0x5c
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	88fa      	ldrh	r2, [r7, #6]
 8002dc8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	88fa      	ldrh	r2, [r7, #6]
 8002dd0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002de2:	d10e      	bne.n	8002e02 <UART_Start_Receive_IT+0x52>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d105      	bne.n	8002df8 <UART_Start_Receive_IT+0x48>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8002df2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002df6:	e02d      	b.n	8002e54 <UART_Start_Receive_IT+0xa4>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	22ff      	movs	r2, #255	@ 0xff
 8002dfc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e00:	e028      	b.n	8002e54 <UART_Start_Receive_IT+0xa4>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10d      	bne.n	8002e26 <UART_Start_Receive_IT+0x76>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d104      	bne.n	8002e1c <UART_Start_Receive_IT+0x6c>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	22ff      	movs	r2, #255	@ 0xff
 8002e16:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e1a:	e01b      	b.n	8002e54 <UART_Start_Receive_IT+0xa4>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	227f      	movs	r2, #127	@ 0x7f
 8002e20:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e24:	e016      	b.n	8002e54 <UART_Start_Receive_IT+0xa4>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e2e:	d10d      	bne.n	8002e4c <UART_Start_Receive_IT+0x9c>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d104      	bne.n	8002e42 <UART_Start_Receive_IT+0x92>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	227f      	movs	r2, #127	@ 0x7f
 8002e3c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e40:	e008      	b.n	8002e54 <UART_Start_Receive_IT+0xa4>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	223f      	movs	r2, #63	@ 0x3f
 8002e46:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002e4a:	e003      	b.n	8002e54 <UART_Start_Receive_IT+0xa4>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2222      	movs	r2, #34	@ 0x22
 8002e60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3308      	adds	r3, #8
 8002e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e6e:	e853 3f00 	ldrex	r3, [r3]
 8002e72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3308      	adds	r3, #8
 8002e82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e84:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002e86:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e88:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002e8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e8c:	e841 2300 	strex	r3, r2, [r1]
 8002e90:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8002e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e5      	bne.n	8002e64 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ea0:	d107      	bne.n	8002eb2 <UART_Start_Receive_IT+0x102>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d103      	bne.n	8002eb2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4a21      	ldr	r2, [pc, #132]	@ (8002f34 <UART_Start_Receive_IT+0x184>)
 8002eae:	669a      	str	r2, [r3, #104]	@ 0x68
 8002eb0:	e002      	b.n	8002eb8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4a20      	ldr	r2, [pc, #128]	@ (8002f38 <UART_Start_Receive_IT+0x188>)
 8002eb6:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d019      	beq.n	8002ef4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8002ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ede:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ee0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002ee4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ee6:	e841 2300 	strex	r3, r2, [r1]
 8002eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8002eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e6      	bne.n	8002ec0 <UART_Start_Receive_IT+0x110>
 8002ef2:	e018      	b.n	8002f26 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	e853 3f00 	ldrex	r3, [r3]
 8002f00:	613b      	str	r3, [r7, #16]
   return(result);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f043 0320 	orr.w	r3, r3, #32
 8002f08:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f12:	623b      	str	r3, [r7, #32]
 8002f14:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f16:	69f9      	ldr	r1, [r7, #28]
 8002f18:	6a3a      	ldr	r2, [r7, #32]
 8002f1a:	e841 2300 	strex	r3, r2, [r1]
 8002f1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1e6      	bne.n	8002ef4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	375c      	adds	r7, #92	@ 0x5c
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	0800322d 	.word	0x0800322d
 8002f38:	08003085 	.word	0x08003085

08002f3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b095      	sub	sp, #84	@ 0x54
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f4c:	e853 3f00 	ldrex	r3, [r3]
 8002f50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f62:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f64:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f6a:	e841 2300 	strex	r3, r2, [r1]
 8002f6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1e6      	bne.n	8002f44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	3308      	adds	r3, #8
 8002f7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	e853 3f00 	ldrex	r3, [r3]
 8002f84:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	f023 0301 	bic.w	r3, r3, #1
 8002f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3308      	adds	r3, #8
 8002f94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f9e:	e841 2300 	strex	r3, r2, [r1]
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1e5      	bne.n	8002f76 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d118      	bne.n	8002fe4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	e853 3f00 	ldrex	r3, [r3]
 8002fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f023 0310 	bic.w	r3, r3, #16
 8002fc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd4:	6979      	ldr	r1, [r7, #20]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	e841 2300 	strex	r3, r2, [r1]
 8002fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e6      	bne.n	8002fb2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002ff8:	bf00      	nop
 8002ffa:	3754      	adds	r7, #84	@ 0x54
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003010:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f7ff fbc6 	bl	80027b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003028:	bf00      	nop
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	e853 3f00 	ldrex	r3, [r3]
 8003044:	60bb      	str	r3, [r7, #8]
   return(result);
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800304c:	61fb      	str	r3, [r7, #28]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305a:	6979      	ldr	r1, [r7, #20]
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	613b      	str	r3, [r7, #16]
   return(result);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e6      	bne.n	8003038 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fb88 	bl	800278c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800307c:	bf00      	nop
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b09c      	sub	sp, #112	@ 0x70
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003092:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800309c:	2b22      	cmp	r3, #34	@ 0x22
 800309e:	f040 80b9 	bne.w	8003214 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80030a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80030ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80030b0:	b2d9      	uxtb	r1, r3
 80030b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030bc:	400a      	ands	r2, r1
 80030be:	b2d2      	uxtb	r2, r2
 80030c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c6:	1c5a      	adds	r2, r3, #1
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f040 809c 	bne.w	8003224 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030f4:	e853 3f00 	ldrex	r3, [r3]
 80030f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	461a      	mov	r2, r3
 8003108:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800310a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800310c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003110:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003112:	e841 2300 	strex	r3, r2, [r1]
 8003116:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003118:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1e6      	bne.n	80030ec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3308      	adds	r3, #8
 8003124:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003128:	e853 3f00 	ldrex	r3, [r3]
 800312c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800312e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003130:	f023 0301 	bic.w	r3, r3, #1
 8003134:	667b      	str	r3, [r7, #100]	@ 0x64
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3308      	adds	r3, #8
 800313c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800313e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003140:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800314c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e5      	bne.n	800311e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2220      	movs	r2, #32
 8003156:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d018      	beq.n	80031a6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	623b      	str	r3, [r7, #32]
   return(result);
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003188:	663b      	str	r3, [r7, #96]	@ 0x60
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003192:	633b      	str	r3, [r7, #48]	@ 0x30
 8003194:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e6      	bne.n	8003174 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d12e      	bne.n	800320c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	e853 3f00 	ldrex	r3, [r3]
 80031c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f023 0310 	bic.w	r3, r3, #16
 80031c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80031d2:	61fb      	str	r3, [r7, #28]
 80031d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d6:	69b9      	ldr	r1, [r7, #24]
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	e841 2300 	strex	r3, r2, [r1]
 80031de:	617b      	str	r3, [r7, #20]
   return(result);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1e6      	bne.n	80031b4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b10      	cmp	r3, #16
 80031f2:	d103      	bne.n	80031fc <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2210      	movs	r2, #16
 80031fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7ff fadf 	bl	80027c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800320a:	e00b      	b.n	8003224 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fac7 	bl	80027a0 <HAL_UART_RxCpltCallback>
}
 8003212:	e007      	b.n	8003224 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0208 	orr.w	r2, r2, #8
 8003222:	619a      	str	r2, [r3, #24]
}
 8003224:	bf00      	nop
 8003226:	3770      	adds	r7, #112	@ 0x70
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b09c      	sub	sp, #112	@ 0x70
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800323a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003244:	2b22      	cmp	r3, #34	@ 0x22
 8003246:	f040 80b9 	bne.w	80033bc <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003250:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003258:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800325a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800325e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003262:	4013      	ands	r3, r2
 8003264:	b29a      	uxth	r2, r3
 8003266:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003268:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326e:	1c9a      	adds	r2, r3, #2
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800327a:	b29b      	uxth	r3, r3
 800327c:	3b01      	subs	r3, #1
 800327e:	b29a      	uxth	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800328c:	b29b      	uxth	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	f040 809c 	bne.w	80033cc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800329c:	e853 3f00 	ldrex	r3, [r3]
 80032a0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80032a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80032b4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80032b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032ba:	e841 2300 	strex	r3, r2, [r1]
 80032be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80032c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e6      	bne.n	8003294 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	3308      	adds	r3, #8
 80032cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d8:	f023 0301 	bic.w	r3, r3, #1
 80032dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3308      	adds	r3, #8
 80032e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80032e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80032e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032ee:	e841 2300 	strex	r3, r2, [r1]
 80032f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e5      	bne.n	80032c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d018      	beq.n	800334e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	61fb      	str	r3, [r7, #28]
   return(result);
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003330:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800333a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800333c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003340:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e6      	bne.n	800331c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003352:	2b01      	cmp	r3, #1
 8003354:	d12e      	bne.n	80033b4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	60bb      	str	r3, [r7, #8]
   return(result);
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f023 0310 	bic.w	r3, r3, #16
 8003370:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	461a      	mov	r2, r3
 8003378:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800337a:	61bb      	str	r3, [r7, #24]
 800337c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	6979      	ldr	r1, [r7, #20]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	613b      	str	r3, [r7, #16]
   return(result);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e6      	bne.n	800335c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69db      	ldr	r3, [r3, #28]
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b10      	cmp	r3, #16
 800339a:	d103      	bne.n	80033a4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2210      	movs	r2, #16
 80033a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80033aa:	4619      	mov	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff fa0b 	bl	80027c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80033b2:	e00b      	b.n	80033cc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff f9f3 	bl	80027a0 <HAL_UART_RxCpltCallback>
}
 80033ba:	e007      	b.n	80033cc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0208 	orr.w	r2, r2, #8
 80033ca:	619a      	str	r2, [r3, #24]
}
 80033cc:	bf00      	nop
 80033ce:	3770      	adds	r7, #112	@ 0x70
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <memset>:
 80033e8:	4402      	add	r2, r0
 80033ea:	4603      	mov	r3, r0
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d100      	bne.n	80033f2 <memset+0xa>
 80033f0:	4770      	bx	lr
 80033f2:	f803 1b01 	strb.w	r1, [r3], #1
 80033f6:	e7f9      	b.n	80033ec <memset+0x4>

080033f8 <__libc_init_array>:
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	4d0d      	ldr	r5, [pc, #52]	@ (8003430 <__libc_init_array+0x38>)
 80033fc:	4c0d      	ldr	r4, [pc, #52]	@ (8003434 <__libc_init_array+0x3c>)
 80033fe:	1b64      	subs	r4, r4, r5
 8003400:	10a4      	asrs	r4, r4, #2
 8003402:	2600      	movs	r6, #0
 8003404:	42a6      	cmp	r6, r4
 8003406:	d109      	bne.n	800341c <__libc_init_array+0x24>
 8003408:	4d0b      	ldr	r5, [pc, #44]	@ (8003438 <__libc_init_array+0x40>)
 800340a:	4c0c      	ldr	r4, [pc, #48]	@ (800343c <__libc_init_array+0x44>)
 800340c:	f000 f818 	bl	8003440 <_init>
 8003410:	1b64      	subs	r4, r4, r5
 8003412:	10a4      	asrs	r4, r4, #2
 8003414:	2600      	movs	r6, #0
 8003416:	42a6      	cmp	r6, r4
 8003418:	d105      	bne.n	8003426 <__libc_init_array+0x2e>
 800341a:	bd70      	pop	{r4, r5, r6, pc}
 800341c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003420:	4798      	blx	r3
 8003422:	3601      	adds	r6, #1
 8003424:	e7ee      	b.n	8003404 <__libc_init_array+0xc>
 8003426:	f855 3b04 	ldr.w	r3, [r5], #4
 800342a:	4798      	blx	r3
 800342c:	3601      	adds	r6, #1
 800342e:	e7f2      	b.n	8003416 <__libc_init_array+0x1e>
 8003430:	08003490 	.word	0x08003490
 8003434:	08003490 	.word	0x08003490
 8003438:	08003490 	.word	0x08003490
 800343c:	08003494 	.word	0x08003494

08003440 <_init>:
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	bf00      	nop
 8003444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003446:	bc08      	pop	{r3}
 8003448:	469e      	mov	lr, r3
 800344a:	4770      	bx	lr

0800344c <_fini>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	bf00      	nop
 8003450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003452:	bc08      	pop	{r3}
 8003454:	469e      	mov	lr, r3
 8003456:	4770      	bx	lr
